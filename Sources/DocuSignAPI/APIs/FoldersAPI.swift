//
// FoldersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class FoldersAPI {
    /**
     Gets a list of the envelopes in the specified folder.

     GET /v2.1/accounts/{accountId}/folders/{folderId}

     Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter folderId: (path) The id of the folder.
     - parameter fromDate: (query) Reserved for DocuSign. (optional)
     - parameter includeItems: (query) Indicates whether folder items are included in the response. If this parameter is omitted, the default is false. (optional)
     - parameter ownerEmail: (query) Reserved for DocuSign. (optional)
     - parameter ownerName: (query) Reserved for DocuSign. (optional)
     - parameter searchText: (query) Reserved for DocuSign. (optional)
     - parameter startPosition: (query) Reserved for DocuSign. (optional)
     - parameter status: (query) Reserved for DocuSign. (optional)
     - parameter toDate: (query) Reserved for DocuSign. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func foldersGetFolderItemsRaw(accountId: String, folderId: String, fromDate: String? = nil, includeItems: String? = nil, ownerEmail: String? = nil, ownerName: String? = nil, searchText: String? = nil, startPosition: String? = nil, status: String? = nil, toDate: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/folders/{folderId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let folderIdPreEscape = String(describing: folderId)
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var fromDate: String?
                var includeItems: String?
                var ownerEmail: String?
                var ownerName: String?
                var searchText: String?
                var startPosition: String?
                var status: String?
                var toDate: String?
            }
            try request.query.encode(QueryParams(fromDate: fromDate, includeItems: includeItems, ownerEmail: ownerEmail, ownerName: ownerName, searchText: searchText, startPosition: startPosition, status: status, toDate: toDate))

            try beforeSend(&request)
        }
    }

    public enum FoldersGetFolderItems {
        case http200(value: FolderItemsResponse, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: FolderItemsResponse, raw: ClientResponse)
    }

    /**
     Gets a list of the envelopes in the specified folder.

     GET /v2.1/accounts/{accountId}/folders/{folderId}

     Retrieves a list of the envelopes in the specified folder. You can narrow the query by specifying search criteria in the query string parameters.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter folderId: (path) The id of the folder.
     - parameter fromDate: (query) Reserved for DocuSign. (optional)
     - parameter includeItems: (query) Indicates whether folder items are included in the response. If this parameter is omitted, the default is false. (optional)
     - parameter ownerEmail: (query) Reserved for DocuSign. (optional)
     - parameter ownerName: (query) Reserved for DocuSign. (optional)
     - parameter searchText: (query) Reserved for DocuSign. (optional)
     - parameter startPosition: (query) Reserved for DocuSign. (optional)
     - parameter status: (query) Reserved for DocuSign. (optional)
     - parameter toDate: (query) Reserved for DocuSign. (optional)
     - returns: `EventLoopFuture` of `FoldersGetFolderItems`
     */
    open class func foldersGetFolderItems(accountId: String, folderId: String, fromDate: String? = nil, includeItems: String? = nil, ownerEmail: String? = nil, ownerName: String? = nil, searchText: String? = nil, startPosition: String? = nil, status: String? = nil, toDate: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<FoldersGetFolderItems> {
        return foldersGetFolderItemsRaw(accountId: accountId, folderId: folderId, fromDate: fromDate, includeItems: includeItems, ownerEmail: ownerEmail, ownerName: ownerName, searchText: searchText, startPosition: startPosition, status: status, toDate: toDate, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> FoldersGetFolderItems in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(FolderItemsResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FolderItemsResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(FolderItemsResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FolderItemsResponse.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Gets a list of the folders for the account.

     GET /v2.1/accounts/{accountId}/folders

     Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the `template` query string parameter.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter include: (query) A comma-separated list of folder types to include in the response. Valid values are:  - `envelope_folders`: Returns a list of envelope folders. (Default) - `template_folders`: Returns a list of template folders.  - `shared_template_folders`: Returns a list of shared template folders.  (optional)
     - parameter includeItems: (query) Indicates whether folder items are included in the response. If this parameter is omitted, the default is false. (optional)
     - parameter startPosition: (query) The position within the total result set from which to start returning values. (optional)
     - parameter template: (query) This parameter is deprecated as of version 2.1. Use `include` instead. (optional)
     - parameter userFilter: (query) Narrows down the resulting folder list by the following values:  - `all`: Returns all templates owned or shared with the user. (default) - `owned_by_me`: Returns only  templates the user owns. - `shared_with_me`: Returns only templates that are shared with the user.  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func foldersGetFoldersRaw(accountId: String, include: String? = nil, includeItems: String? = nil, startPosition: String? = nil, template: String? = nil, userFilter: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/folders"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var include: String?
                var includeItems: String?
                var startPosition: String?
                var template: String?
                var userFilter: String?
            }
            try request.query.encode(QueryParams(include: include, includeItems: includeItems, startPosition: startPosition, template: template, userFilter: userFilter))

            try beforeSend(&request)
        }
    }

    public enum FoldersGetFolders {
        case http200(value: FoldersResponse, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: FoldersResponse, raw: ClientResponse)
    }

    /**
     Gets a list of the folders for the account.

     GET /v2.1/accounts/{accountId}/folders

     Retrieves a list of the folders for the account, including the folder hierarchy. You can specify whether to return just the template folder or template folder and normal folders by setting the `template` query string parameter.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter include: (query) A comma-separated list of folder types to include in the response. Valid values are:  - `envelope_folders`: Returns a list of envelope folders. (Default) - `template_folders`: Returns a list of template folders.  - `shared_template_folders`: Returns a list of shared template folders.  (optional)
     - parameter includeItems: (query) Indicates whether folder items are included in the response. If this parameter is omitted, the default is false. (optional)
     - parameter startPosition: (query) The position within the total result set from which to start returning values. (optional)
     - parameter template: (query) This parameter is deprecated as of version 2.1. Use `include` instead. (optional)
     - parameter userFilter: (query) Narrows down the resulting folder list by the following values:  - `all`: Returns all templates owned or shared with the user. (default) - `owned_by_me`: Returns only  templates the user owns. - `shared_with_me`: Returns only templates that are shared with the user.  (optional)
     - returns: `EventLoopFuture` of `FoldersGetFolders`
     */
    open class func foldersGetFolders(accountId: String, include: String? = nil, includeItems: String? = nil, startPosition: String? = nil, template: String? = nil, userFilter: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<FoldersGetFolders> {
        return foldersGetFoldersRaw(accountId: accountId, include: include, includeItems: includeItems, startPosition: startPosition, template: template, userFilter: userFilter, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> FoldersGetFolders in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(FoldersResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FoldersResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(FoldersResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FoldersResponse.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Moves an envelope from its current folder to the specified folder.

     PUT /v2.1/accounts/{accountId}/folders/{folderId}

     Moves an envelope from its current folder to the specified folder.  You can use this method to delete envelopes by specifying `recyclebin` in the `folderId` parameter. Placing an in-process envelope (envelope status of `sent` or `delivered`) in the recycle bin voids the envelope.  You can also use this method to delete templates by specifying a template ID instead of an envelope ID in the `envelopeIds` property and specifying `recyclebin` in the `folderId` parameter.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter folderId: (path) The id of the folder.
     - parameter foldersRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func foldersPutFolderByIdRaw(accountId: String, folderId: String, foldersRequest: FoldersRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/folders/{folderId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let folderIdPreEscape = String(describing: folderId)
        let folderIdPostEscape = folderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{folderId}", with: folderIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = foldersRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum FoldersPutFolderById {
        case http200(value: FoldersResponse, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: FoldersResponse, raw: ClientResponse)
    }

    /**
     Moves an envelope from its current folder to the specified folder.

     PUT /v2.1/accounts/{accountId}/folders/{folderId}

     Moves an envelope from its current folder to the specified folder.  You can use this method to delete envelopes by specifying `recyclebin` in the `folderId` parameter. Placing an in-process envelope (envelope status of `sent` or `delivered`) in the recycle bin voids the envelope.  You can also use this method to delete templates by specifying a template ID instead of an envelope ID in the `envelopeIds` property and specifying `recyclebin` in the `folderId` parameter.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter folderId: (path) The id of the folder.
     - parameter foldersRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `FoldersPutFolderById`
     */
    open class func foldersPutFolderById(accountId: String, folderId: String, foldersRequest: FoldersRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<FoldersPutFolderById> {
        return foldersPutFolderByIdRaw(accountId: accountId, folderId: folderId, foldersRequest: foldersRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> FoldersPutFolderById in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(FoldersResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FoldersResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(FoldersResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FoldersResponse.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Gets a list of envelopes in folders matching the specified criteria.

     GET /v2.1/accounts/{accountId}/search_folders/{searchFolderId}

     **This method is deprecated in API v2.1.**  Use  [Envelopes::listStatusChanges](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges) instead.  Retrieves a list of items that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter searchFolderId: (path) Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.
     - parameter all: (query) Specifies that all envelopes that match the criteria are returned. (optional)
     - parameter count: (query) Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)
     - parameter fromDate: (query) Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)
     - parameter includeRecipients: (query) When set to **true**, the recipient information is returned in the response. (optional)
     - parameter order: (query) Specifies the order in which the list is returned. Valid values are: `asc` for ascending order, and `desc` for descending order. (optional)
     - parameter orderBy: (query) Specifies the property used to sort the list. Valid values are: `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`, or `subject`. (optional)
     - parameter startPosition: (query) Specifies the the starting location in the result set of the items that are returned. (optional)
     - parameter toDate: (query) Specifies the end of the date range to return. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func searchFoldersGetSearchFolderContentsRaw(accountId: String, searchFolderId: String, all: String? = nil, count: String? = nil, fromDate: String? = nil, includeRecipients: String? = nil, order: String? = nil, orderBy: String? = nil, startPosition: String? = nil, toDate: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/search_folders/{searchFolderId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let searchFolderIdPreEscape = String(describing: searchFolderId)
        let searchFolderIdPostEscape = searchFolderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{searchFolderId}", with: searchFolderIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var all: String?
                var count: String?
                var fromDate: String?
                var includeRecipients: String?
                var order: String?
                var orderBy: String?
                var startPosition: String?
                var toDate: String?
            }
            try request.query.encode(QueryParams(all: all, count: count, fromDate: fromDate, includeRecipients: includeRecipients, order: order, orderBy: orderBy, startPosition: startPosition, toDate: toDate))

            try beforeSend(&request)
        }
    }

    public enum SearchFoldersGetSearchFolderContents {
        case http200(value: FolderItemResponse, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: FolderItemResponse, raw: ClientResponse)
    }

    /**
     Gets a list of envelopes in folders matching the specified criteria.

     GET /v2.1/accounts/{accountId}/search_folders/{searchFolderId}

     **This method is deprecated in API v2.1.**  Use  [Envelopes::listStatusChanges](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges) instead.  Retrieves a list of items that match the criteria specified in the query.  If the user ID of the user making the call is the same as the user ID for any returned recipient, then the userId property is added to the returned information for those recipients.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter searchFolderId: (path) Specifies the envelope group that is searched by the request. These are logical groupings, not actual folder names. Valid values are: drafts, awaiting_my_signature, completed, out_for_signature.
     - parameter all: (query) Specifies that all envelopes that match the criteria are returned. (optional)
     - parameter count: (query) Specifies the number of records returned in the cache. The number must be greater than 0 and less than or equal to 100. (optional)
     - parameter fromDate: (query) Specifies the start of the date range to return. If no value is provided, the default search is the previous 30 days. (optional)
     - parameter includeRecipients: (query) When set to **true**, the recipient information is returned in the response. (optional)
     - parameter order: (query) Specifies the order in which the list is returned. Valid values are: `asc` for ascending order, and `desc` for descending order. (optional)
     - parameter orderBy: (query) Specifies the property used to sort the list. Valid values are: `action_required`, `created`, `completed`, `sent`, `signer_list`, `status`, or `subject`. (optional)
     - parameter startPosition: (query) Specifies the the starting location in the result set of the items that are returned. (optional)
     - parameter toDate: (query) Specifies the end of the date range to return. (optional)
     - returns: `EventLoopFuture` of `SearchFoldersGetSearchFolderContents`
     */
    open class func searchFoldersGetSearchFolderContents(accountId: String, searchFolderId: String, all: String? = nil, count: String? = nil, fromDate: String? = nil, includeRecipients: String? = nil, order: String? = nil, orderBy: String? = nil, startPosition: String? = nil, toDate: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SearchFoldersGetSearchFolderContents> {
        return searchFoldersGetSearchFolderContentsRaw(accountId: accountId, searchFolderId: searchFolderId, all: all, count: count, fromDate: fromDate, includeRecipients: includeRecipients, order: order, orderBy: orderBy, startPosition: startPosition, toDate: toDate, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> SearchFoldersGetSearchFolderContents in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(FolderItemResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FolderItemResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(FolderItemResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: FolderItemResponse.defaultContentType)), raw: response)
            }
        }
    }
}

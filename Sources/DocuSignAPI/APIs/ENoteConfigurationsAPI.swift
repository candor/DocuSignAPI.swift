//
// ENoteConfigurationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class ENoteConfigurationsAPI {
    public enum ENoteConfigurationDeleteENoteConfiguration {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Deletes configuration information for the eNote eOriginal integration.

     DELETE /v2.1/accounts/{accountId}/settings/enote_configuration

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - returns: `EventLoopFuture` of `ENoteConfigurationDeleteENoteConfiguration`
     */
    open class func eNoteConfigurationDeleteENoteConfiguration(accountId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ENoteConfigurationDeleteENoteConfiguration> {
        var path = "/v2.1/accounts/{accountId}/settings/enote_configuration"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> ENoteConfigurationDeleteENoteConfiguration in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    public enum ENoteConfigurationGetENoteConfiguration {
        case http200(value: ENoteConfiguration?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: ENoteConfiguration?, raw: ClientResponse)
    }

    /**
     Returns the configuration information for the eNote eOriginal integration.

     GET /v2.1/accounts/{accountId}/settings/enote_configuration

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - returns: `EventLoopFuture` of `ENoteConfigurationGetENoteConfiguration`
     */
    open class func eNoteConfigurationGetENoteConfiguration(accountId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ENoteConfigurationGetENoteConfiguration> {
        var path = "/v2.1/accounts/{accountId}/settings/enote_configuration"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> ENoteConfigurationGetENoteConfiguration in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(ENoteConfiguration.self, using: Configuration.contentConfiguration.requireDecoder(for: ENoteConfiguration.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(ENoteConfiguration.self, using: Configuration.contentConfiguration.requireDecoder(for: ENoteConfiguration.defaultContentType)), raw: response)
            }
        }
    }

    public enum ENoteConfigurationPutENoteConfiguration {
        case http200(value: ENoteConfiguration?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: ENoteConfiguration?, raw: ClientResponse)
    }

    /**
     Updates configuration information for the eNote eOriginal integration.

     PUT /v2.1/accounts/{accountId}/settings/enote_configuration

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter eNoteConfiguration: (body)  (optional)
     - returns: `EventLoopFuture` of `ENoteConfigurationPutENoteConfiguration`
     */
    open class func eNoteConfigurationPutENoteConfiguration(accountId: String, eNoteConfiguration: ENoteConfiguration? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ENoteConfigurationPutENoteConfiguration> {
        var path = "/v2.1/accounts/{accountId}/settings/enote_configuration"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = eNoteConfiguration {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> ENoteConfigurationPutENoteConfiguration in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(ENoteConfiguration.self, using: Configuration.contentConfiguration.requireDecoder(for: ENoteConfiguration.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(ENoteConfiguration.self, using: Configuration.contentConfiguration.requireDecoder(for: ENoteConfiguration.defaultContentType)), raw: response)
            }
        }
    }
}

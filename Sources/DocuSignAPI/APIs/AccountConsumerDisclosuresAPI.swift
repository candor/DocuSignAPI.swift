//
// AccountConsumerDisclosuresAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class AccountConsumerDisclosuresAPI {
    public enum ConsumerDisclosureGetConsumerDisclosure {
        case http200(value: AccountConsumerDisclosures?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: AccountConsumerDisclosures?, raw: ClientResponse)
    }

    /**
     Gets the default Electronic Record and Signature Disclosure for an account.

     GET /v2.1/accounts/{accountId}/consumer_disclosure

     Retrieves the default, HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account.   This is the default ERSD disclosure that DocuSign provides for the convenience of U.S.-based customers only. This default disclosure is only valid for transactions between U.S.-based parties.  To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter langCode: (query) (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`)  - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`. (optional)
     - returns: `EventLoopFuture` of `ConsumerDisclosureGetConsumerDisclosure`
     */
    open class func consumerDisclosureGetConsumerDisclosure(accountId: String, langCode: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ConsumerDisclosureGetConsumerDisclosure> {
        var path = "/v2.1/accounts/{accountId}/consumer_disclosure"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var langCode: String?
            }
            try request.query.encode(QueryParams(langCode: langCode))

            try beforeSend(&request)
        }.flatMapThrowing { response -> ConsumerDisclosureGetConsumerDisclosure in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(AccountConsumerDisclosures.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountConsumerDisclosures.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(AccountConsumerDisclosures.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountConsumerDisclosures.defaultContentType)), raw: response)
            }
        }
    }

    public enum ConsumerDisclosureGetConsumerDisclosureLangCode {
        case http200(value: AccountConsumerDisclosures?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: AccountConsumerDisclosures?, raw: ClientResponse)
    }

    /**
     Gets the Electronic Record and Signature Disclosure for an account.

     GET /v2.1/accounts/{accountId}/consumer_disclosure/{langCode}

     Retrieves the HTML-formatted Electronic Record and Signature Disclosure (ERSD) associated with the account.   To set the language of the disclosure that you want to retrieve, use the optional `langCode` query parameter.  **Note**: The text of the default disclosure is always in English, but if you are using a custom disclosure and have created versions of it in different signer languages, you can use the `langCode` parameter to specify the signer language version that you want to retrieve.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter langCode: (path) (Optional) The code for the signer language version of the disclosure that you want to retrieve. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`)  - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
     - returns: `EventLoopFuture` of `ConsumerDisclosureGetConsumerDisclosureLangCode`
     */
    open class func consumerDisclosureGetConsumerDisclosureLangCode(accountId: String, langCode: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ConsumerDisclosureGetConsumerDisclosureLangCode> {
        var path = "/v2.1/accounts/{accountId}/consumer_disclosure/{langCode}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let langCodePreEscape = String(describing: langCode)
        let langCodePostEscape = langCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{langCode}", with: langCodePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> ConsumerDisclosureGetConsumerDisclosureLangCode in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(AccountConsumerDisclosures.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountConsumerDisclosures.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(AccountConsumerDisclosures.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountConsumerDisclosures.defaultContentType)), raw: response)
            }
        }
    }

    public enum ConsumerDisclosurePutConsumerDisclosure {
        case http200(value: ConsumerDisclosure?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: ConsumerDisclosure?, raw: ClientResponse)
    }

    /**
     Updates the Electronic Record and Signature Disclosure for an account.

     PUT /v2.1/accounts/{accountId}/consumer_disclosure/{langCode}

     Account administrators can use this method to perform the following tasks:  - Customize values in the default disclosure. - Switch to a custom disclosure that uses your own text and HTML formatting. - Change values in your existing consumer disclosure.   To specify the signer language version of the disclosure that you are updating, use the optional `langCode` query parameter.  **Note**: Only account administrators can use this method. Each time you change the disclosure content, all unsigned recipients of outstanding documents will be required to accept a new version.   ## Updating the default disclosure  When you update the default disclosure, you can edit all properties except for the following ones:  - `accountEsignId`: This property is read only. - `custom`: The default value is **false**. Editing this property causes the default disclosure to switch to a custom disclosure. - `esignAgreement`: This property is read only. - `esignText`: You cannot edit this property when `custom` is set to **false**. The API returns a 200 OK HTTP response, but does not update the `esignText`. - Metadata properties: These properties are read only.  **Note**: The text of the default disclosure is always in English.  ## Switching to a custom disclosure  To switch to a custom disclosure, set the `custom` property to **true** and customize the value for the `eSignText` property.   You can also edit all of the other properties except for the following ones:  - `accountEsignId`: This property is read only. - `esignAgreement`: This property is read only. - Metadata properties: These properties are read only.  **Note**: When you use a custom disclosure, you can create versions of it in different signer languages and se the `langCode` parameter to specify the signer language version that you are updating.  **Important**:  When you switch from a default to a custom disclosure, note the following information:  - You will not be able to return to using the default disclosure. - Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.  ## Updating a custom disclosure  When you update a custom disclosure, you can update all of the properties except for the following ones:  - `accountEsignId`: This property is read only.  - `esignAgreement`: This property is read only. - Metadata properties: These properties are read only.  **Important**: Only the disclosure for the currently selected signer language is saved. DocuSign will not automatically translate your custom disclosure. You must create a disclosure for each language that your signers use.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter langCode: (path) (Optional) The code for the signer language version of the disclosure that you want to update. The following languages are supported:  - Arabic (`ar`) - Bulgarian (`bg`) - Czech (`cs`) - Chinese Simplified (`zh_CN`) - Chinese Traditional (`zh_TW`) - Croatian (`hr`) - Danish (`da`) - Dutch (`nl`) - English US (`en`) - English UK (`en_GB`) - Estonian (`et`) - Farsi (`fa`) - Finnish (`fi`) - French (`fr`) - French Canadian (`fr_CA`) - German (`de`) - Greek (`el`) - Hebrew (`he`) - Hindi (`hi`) - Hungarian (`hu`) - Bahasa Indonesian (`id`) - Italian (`it`) - Japanese (`ja`) - Korean (`ko`) - Latvian (`lv`) - Lithuanian (`lt`) - Bahasa Melayu (`ms`) - Norwegian (`no`) - Polish (`pl`) - Portuguese (`pt`) - Portuguese Brazil (`pt_BR`) - Romanian (`ro`) - Russian (`ru`) - Serbian (`sr`) - Slovak (`sk`) - Slovenian (`sl`) - Spanish (`es`) - Spanish Latin America (`es_MX`) - Swedish (`sv`) - Thai (`th`) - Turkish (`tr`) - Ukrainian (`uk`)  - Vietnamese (`vi`)  Additionally, you can automatically detect the browser language being used by the viewer and display the disclosure in that language by setting the value to `browser`.
     - parameter includeMetadata: (query) (Optional) When set to true, the response includes metadata indicating which properties are editable. (optional)
     - parameter consumerDisclosure: (body)  (optional)
     - returns: `EventLoopFuture` of `ConsumerDisclosurePutConsumerDisclosure`
     */
    open class func consumerDisclosurePutConsumerDisclosure(accountId: String, langCode: String, includeMetadata: String? = nil, consumerDisclosure: ConsumerDisclosure? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ConsumerDisclosurePutConsumerDisclosure> {
        var path = "/v2.1/accounts/{accountId}/consumer_disclosure/{langCode}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let langCodePreEscape = String(describing: langCode)
        let langCodePostEscape = langCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{langCode}", with: langCodePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeMetadata: String?
            }
            try request.query.encode(QueryParams(includeMetadata: includeMetadata))
            if let body = consumerDisclosure {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> ConsumerDisclosurePutConsumerDisclosure in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(ConsumerDisclosure.self, using: Configuration.contentConfiguration.requireDecoder(for: ConsumerDisclosure.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(ConsumerDisclosure.self, using: Configuration.contentConfiguration.requireDecoder(for: ConsumerDisclosure.defaultContentType)), raw: response)
            }
        }
    }
}

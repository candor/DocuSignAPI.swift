//
// ResourcesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class ResourcesAPI {
    public enum ServiceInformationGetResourceInformation {
        case http200(value: ResourceInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: ResourceInformation?, raw: ClientResponse)
    }

    /**
     Lists resources for REST version specified

     GET /v2.1

     Retrieves the base resources available for the DocuSign REST APIs.  You do not need an integrator key to view the REST API versions and resources.  Example: https://demo.docusign.net/restapi/v2 lists all of the base resources available in version 2 of the REST API on the DocuSign Demo system.  To view descriptions and samples of the service operations for all versions, remove the version number and add /help to the URL.  Example: https://demo.docusign.net/restapi/help lists the REST API operations on the DocuSign Demo system with XML and JSON request and response samples.

     - returns: `EventLoopFuture` of `ServiceInformationGetResourceInformation`
     */
    open class func serviceInformationGetResourceInformation(headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ServiceInformationGetResourceInformation> {
        let path = "/v2.1"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> ServiceInformationGetResourceInformation in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(ResourceInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: ResourceInformation.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(ResourceInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: ResourceInformation.defaultContentType)), raw: response)
            }
        }
    }
}

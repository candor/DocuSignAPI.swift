//
// AccountBrandsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class AccountBrandsAPI {
    /**
     Deletes a brand.

     DELETE /v2.1/accounts/{accountId}/brands/{brandId}

     This method deletes a brand from an account.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandDeleteBrandRaw(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum BrandDeleteBrand {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Deletes a brand.

     DELETE /v2.1/accounts/{accountId}/brands/{brandId}

     This method deletes a brand from an account.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `BrandDeleteBrand`
     */
    open class func brandDeleteBrand(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandDeleteBrand> {
        return brandDeleteBrandRaw(accountId: accountId, brandId: brandId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandDeleteBrand in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Exports a brand.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/file

     This method exports information about a brand to an XML file.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandExportGetBrandExportFileRaw(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/file"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum BrandExportGetBrandExportFile {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Exports a brand.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/file

     This method exports information about a brand to an XML file.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `BrandExportGetBrandExportFile`
     */
    open class func brandExportGetBrandExportFile(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandExportGetBrandExportFile> {
        return brandExportGetBrandExportFileRaw(accountId: accountId, brandId: brandId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandExportGetBrandExportFile in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Gets information about a brand.

     GET /v2.1/accounts/{accountId}/brands/{brandId}

     This method returns details about an account brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter includeExternalReferences: (query) When **true**, the landing pages and links associated with the brand are included in the response. (optional)
     - parameter includeLogos: (query) When **true**, the URIs for the logos associated with the brand are included in the response. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandGetBrandRaw(accountId: String, brandId: String, includeExternalReferences: String? = nil, includeLogos: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeExternalReferences: String?
                var includeLogos: String?
            }
            try request.query.encode(QueryParams(includeExternalReferences: includeExternalReferences, includeLogos: includeLogos))

            try beforeSend(&request)
        }
    }

    public enum BrandGetBrand {
        case http200(value: Brand, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Brand, raw: ClientResponse)
    }

    /**
     Gets information about a brand.

     GET /v2.1/accounts/{accountId}/brands/{brandId}

     This method returns details about an account brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter includeExternalReferences: (query) When **true**, the landing pages and links associated with the brand are included in the response. (optional)
     - parameter includeLogos: (query) When **true**, the URIs for the logos associated with the brand are included in the response. (optional)
     - returns: `EventLoopFuture` of `BrandGetBrand`
     */
    open class func brandGetBrand(accountId: String, brandId: String, includeExternalReferences: String? = nil, includeLogos: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandGetBrand> {
        return brandGetBrandRaw(accountId: accountId, brandId: brandId, includeExternalReferences: includeExternalReferences, includeLogos: includeLogos, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandGetBrand in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(Brand.self, using: Configuration.contentConfiguration.requireDecoder(for: Brand.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(Brand.self, using: Configuration.contentConfiguration.requireDecoder(for: Brand.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Deletes a brand logo.

     DELETE /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method deletes a single logo from an account brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandLogoDeleteBrandLogoRaw(accountId: String, brandId: String, logoType: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let logoTypePreEscape = String(describing: logoType)
        let logoTypePostEscape = logoTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{logoType}", with: logoTypePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum BrandLogoDeleteBrandLogo {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Deletes a brand logo.

     DELETE /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method deletes a single logo from an account brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - returns: `EventLoopFuture` of `BrandLogoDeleteBrandLogo`
     */
    open class func brandLogoDeleteBrandLogo(accountId: String, brandId: String, logoType: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandLogoDeleteBrandLogo> {
        return brandLogoDeleteBrandLogoRaw(accountId: accountId, brandId: brandId, logoType: logoType, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandLogoDeleteBrandLogo in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Gets a brand logo.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method returns a specific logo that is used in a brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandLogoGetBrandLogoRaw(accountId: String, brandId: String, logoType: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let logoTypePreEscape = String(describing: logoType)
        let logoTypePostEscape = logoTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{logoType}", with: logoTypePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum BrandLogoGetBrandLogo {
        case http200(value: Data, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Data, raw: ClientResponse)
    }

    /**
     Gets a brand logo.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method returns a specific logo that is used in a brand.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - returns: `EventLoopFuture` of `BrandLogoGetBrandLogo`
     */
    open class func brandLogoGetBrandLogo(accountId: String, brandId: String, logoType: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandLogoGetBrandLogo> {
        return brandLogoGetBrandLogoRaw(accountId: accountId, brandId: brandId, logoType: logoType, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandLogoGetBrandLogo in
            switch response.status.code {
            case 200:
                return .http200(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            }
        }
    }

    /**
     Updates a brand logo.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method updates a single brand logo.  You pass in the new version of the resource in the `Content-Disposition` header. Example:  `Content-Disposition: form-data; name=\"file\"; filename=\"logo.jpg\"`  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - parameter logoFileBytes: (body) Brand logo binary Stream. Supported formats: JPG, GIF, PNG. Maximum file size: 300 KB. Recommended dimensions: 296 x 76 pixels (larger images will be resized). Changes may take up to one hour to display in all places
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandLogoPutBrandLogoRaw(accountId: String, brandId: String, logoType: String, logoFileBytes: Data, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let logoTypePreEscape = String(describing: logoType)
        let logoTypePostEscape = logoTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{logoType}", with: logoTypePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            request.body = ByteBuffer(data: logoFileBytes)

            try beforeSend(&request)
        }
    }

    public enum BrandLogoPutBrandLogo {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Updates a brand logo.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}/logos/{logoType}

     This method updates a single brand logo.  You pass in the new version of the resource in the `Content-Disposition` header. Example:  `Content-Disposition: form-data; name=\"file\"; filename=\"logo.jpg\"`  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter logoType: (path) The type of logo. Valid values are:  - `primary`  - `secondary`  - `email`
     - parameter logoFileBytes: (body) Brand logo binary Stream. Supported formats: JPG, GIF, PNG. Maximum file size: 300 KB. Recommended dimensions: 296 x 76 pixels (larger images will be resized). Changes may take up to one hour to display in all places
     - returns: `EventLoopFuture` of `BrandLogoPutBrandLogo`
     */
    open class func brandLogoPutBrandLogo(accountId: String, brandId: String, logoType: String, logoFileBytes: Data, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandLogoPutBrandLogo> {
        return brandLogoPutBrandLogoRaw(accountId: accountId, brandId: brandId, logoType: logoType, logoFileBytes: logoFileBytes, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandLogoPutBrandLogo in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Updates an existing brand.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}

     This method updates an account brand.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter brand: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandPutBrandRaw(accountId: String, brandId: String, brand: Brand? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = brand {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum BrandPutBrand {
        case http200(value: Brand, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Brand, raw: ClientResponse)
    }

    /**
     Updates an existing brand.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}

     This method updates an account brand.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter brand: (body)  (optional)
     - returns: `EventLoopFuture` of `BrandPutBrand`
     */
    open class func brandPutBrand(accountId: String, brandId: String, brand: Brand? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandPutBrand> {
        return brandPutBrandRaw(accountId: accountId, brandId: brandId, brand: brand, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandPutBrand in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(Brand.self, using: Configuration.contentConfiguration.requireDecoder(for: Brand.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(Brand.self, using: Configuration.contentConfiguration.requireDecoder(for: Brand.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Returns a branding resource file.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}

     This method returns a specific branding resource file.  A brand uses a set of brand resource files to control the sending, signing, email message, and captive (embedded) signing experiences.  You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.  **Important**: When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter resourceContentType: (path) The type of brand resource file to return. Valid values are:  - `sending` - `signing` - `email` - `signing_captive`
     - parameter langcode: (query) The ISO 3166-1 alpha-2 codes for the languages that the brand supports. (optional)
     - parameter returnMaster: (query) Specifies which resource file data to return. When **true**, only the master resource file is returned. When **false**, only the elements that you modified are returned. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandResourcesGetBrandResourcesRaw(accountId: String, brandId: String, resourceContentType: String, langcode: String? = nil, returnMaster: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let resourceContentTypePreEscape = String(describing: resourceContentType)
        let resourceContentTypePostEscape = resourceContentTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceContentType}", with: resourceContentTypePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var langcode: String?
                var returnMaster: String?
            }
            try request.query.encode(QueryParams(langcode: langcode, returnMaster: returnMaster))

            try beforeSend(&request)
        }
    }

    public enum BrandResourcesGetBrandResources {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Returns a branding resource file.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}

     This method returns a specific branding resource file.  A brand uses a set of brand resource files to control the sending, signing, email message, and captive (embedded) signing experiences.  You can modify the default email messages and formats in these files and upload them to your brand to customize the user experience.  **Important**: When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter resourceContentType: (path) The type of brand resource file to return. Valid values are:  - `sending` - `signing` - `email` - `signing_captive`
     - parameter langcode: (query) The ISO 3166-1 alpha-2 codes for the languages that the brand supports. (optional)
     - parameter returnMaster: (query) Specifies which resource file data to return. When **true**, only the master resource file is returned. When **false**, only the elements that you modified are returned. (optional)
     - returns: `EventLoopFuture` of `BrandResourcesGetBrandResources`
     */
    open class func brandResourcesGetBrandResources(accountId: String, brandId: String, resourceContentType: String, langcode: String? = nil, returnMaster: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandResourcesGetBrandResources> {
        return brandResourcesGetBrandResourcesRaw(accountId: accountId, brandId: brandId, resourceContentType: resourceContentType, langcode: langcode, returnMaster: returnMaster, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandResourcesGetBrandResources in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Returns metadata about the branding resources for an account.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/resources

     This method returns metadata about the branding resources that are associated with an account.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandResourcesGetBrandResourcesListRaw(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/resources"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum BrandResourcesGetBrandResourcesList {
        case http200(value: BrandResourcesList, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: BrandResourcesList, raw: ClientResponse)
    }

    /**
     Returns metadata about the branding resources for an account.

     GET /v2.1/accounts/{accountId}/brands/{brandId}/resources

     This method returns metadata about the branding resources that are associated with an account.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - returns: `EventLoopFuture` of `BrandResourcesGetBrandResourcesList`
     */
    open class func brandResourcesGetBrandResourcesList(accountId: String, brandId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandResourcesGetBrandResourcesList> {
        return brandResourcesGetBrandResourcesListRaw(accountId: accountId, brandId: brandId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandResourcesGetBrandResourcesList in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(BrandResourcesList.self, using: Configuration.contentConfiguration.requireDecoder(for: BrandResourcesList.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(BrandResourcesList.self, using: Configuration.contentConfiguration.requireDecoder(for: BrandResourcesList.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Updates a branding resource file.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}

     This method updates a branding resource file.  You pass in the new version of the resource file in the `Content-Disposition` header. Example:  `Content-Disposition: form-data; name=\"file\"; filename=\"DocuSign_SigningResource_4328673.xml\"`  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).  **Important**: Customizing resource files is an advanced branding configuration option which can significantly impact your account, and should be done only by someone with expertise in XML and HTML. The master resource files are subject to change without notice. If you customize your resource files, after each release, DocuSign recommends you review any changes and update your custom files as needed.  When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter resourceContentType: (path) The type of brand resource file that you are updating. Valid values are:  - `sending` - `signing` - `email` - `signing_captive`
     - parameter fileXml: (form) Brand resource XML file.
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandResourcesPutBrandResourcesRaw(accountId: String, brandId: String, resourceContentType: String, fileXml: Data, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let brandIdPreEscape = String(describing: brandId)
        let brandIdPostEscape = brandIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{brandId}", with: brandIdPostEscape, options: .literal, range: nil)
        let resourceContentTypePreEscape = String(describing: resourceContentType)
        let resourceContentTypePostEscape = resourceContentTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{resourceContentType}", with: resourceContentTypePostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct FormParams: Content {
                static let defaultContentType = Vapor.HTTPMediaType.formData
                var fileXml: Data
            }
            try request.content.encode(FormParams(fileXml: fileXml), using: Configuration.contentConfiguration.requireEncoder(for: FormParams.defaultContentType))
            try beforeSend(&request)
        }
    }

    public enum BrandResourcesPutBrandResources {
        case http200(value: BrandResources, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: BrandResources, raw: ClientResponse)
    }

    /**
     Updates a branding resource file.

     PUT /v2.1/accounts/{accountId}/brands/{brandId}/resources/{resourceContentType}

     This method updates a branding resource file.  You pass in the new version of the resource file in the `Content-Disposition` header. Example:  `Content-Disposition: form-data; name=\"file\"; filename=\"DocuSign_SigningResource_4328673.xml\"`  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).  **Important**: Customizing resource files is an advanced branding configuration option which can significantly impact your account, and should be done only by someone with expertise in XML and HTML. The master resource files are subject to change without notice. If you customize your resource files, after each release, DocuSign recommends you review any changes and update your custom files as needed.  When you upload a modified resource file, only the elements that differ from the master resource file are saved as your resource file. Similarly, when you download your resource files, only the modified elements are included in the file.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandId: (path) The id of the brand.
     - parameter resourceContentType: (path) The type of brand resource file that you are updating. Valid values are:  - `sending` - `signing` - `email` - `signing_captive`
     - parameter fileXml: (form) Brand resource XML file.
     - returns: `EventLoopFuture` of `BrandResourcesPutBrandResources`
     */
    open class func brandResourcesPutBrandResources(accountId: String, brandId: String, resourceContentType: String, fileXml: Data, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandResourcesPutBrandResources> {
        return brandResourcesPutBrandResourcesRaw(accountId: accountId, brandId: brandId, resourceContentType: resourceContentType, fileXml: fileXml, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandResourcesPutBrandResources in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(BrandResources.self, using: Configuration.contentConfiguration.requireDecoder(for: BrandResources.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(BrandResources.self, using: Configuration.contentConfiguration.requireDecoder(for: BrandResources.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Deletes one or more brand profiles.

     DELETE /v2.1/accounts/{accountId}/brands

     This method deletes one or more brand profiles from an account, based on the brand ids that you include in the `brandsRequest`.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandsDeleteBrandsRaw(accountId: String, brandsRequest: BrandsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = brandsRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum BrandsDeleteBrands {
        case http200(value: AccountBrands, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: AccountBrands, raw: ClientResponse)
    }

    /**
     Deletes one or more brand profiles.

     DELETE /v2.1/accounts/{accountId}/brands

     This method deletes one or more brand profiles from an account, based on the brand ids that you include in the `brandsRequest`.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brandsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `BrandsDeleteBrands`
     */
    open class func brandsDeleteBrands(accountId: String, brandsRequest: BrandsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandsDeleteBrands> {
        return brandsDeleteBrandsRaw(accountId: accountId, brandsRequest: brandsRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandsDeleteBrands in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Gets a list of brands.

     GET /v2.1/accounts/{accountId}/brands

     This method returns details about all of the brands associated with an account, including the default brand profiles.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter excludeDistributorBrand: (query) When **true**, excludes distributor brand information from the response set. (optional)
     - parameter includeLogos: (query) When **true**, the URIs for the logos associated with the brand are included in the response. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandsGetBrandsRaw(accountId: String, excludeDistributorBrand: String? = nil, includeLogos: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var excludeDistributorBrand: String?
                var includeLogos: String?
            }
            try request.query.encode(QueryParams(excludeDistributorBrand: excludeDistributorBrand, includeLogos: includeLogos))

            try beforeSend(&request)
        }
    }

    public enum BrandsGetBrands {
        case http200(value: AccountBrands, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: AccountBrands, raw: ClientResponse)
    }

    /**
     Gets a list of brands.

     GET /v2.1/accounts/{accountId}/brands

     This method returns details about all of the brands associated with an account, including the default brand profiles.   **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter excludeDistributorBrand: (query) When **true**, excludes distributor brand information from the response set. (optional)
     - parameter includeLogos: (query) When **true**, the URIs for the logos associated with the brand are included in the response. (optional)
     - returns: `EventLoopFuture` of `BrandsGetBrands`
     */
    open class func brandsGetBrands(accountId: String, excludeDistributorBrand: String? = nil, includeLogos: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandsGetBrands> {
        return brandsGetBrandsRaw(accountId: accountId, excludeDistributorBrand: excludeDistributorBrand, includeLogos: includeLogos, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandsGetBrands in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Creates one or more brand profiles for an account.

     POST /v2.1/accounts/{accountId}/brands

     This method creates one or more brand profile files for an account.  If the `brandId` property for a brand profile is already set for the account, an error is returned. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When you upload brand profile files, you must combine them into a single zip file and set the `Content-Type` to `application/zip`.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brand: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func brandsPostBrandsRaw(accountId: String, brand: Brand? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/brands"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = brand {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum BrandsPostBrands {
        case http201(value: AccountBrands, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: AccountBrands, raw: ClientResponse)
    }

    /**
     Creates one or more brand profiles for an account.

     POST /v2.1/accounts/{accountId}/brands

     This method creates one or more brand profile files for an account.  If the `brandId` property for a brand profile is already set for the account, an error is returned. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When you upload brand profile files, you must combine them into a single zip file and set the `Content-Type` to `application/zip`.  **Note**: Branding for either signing or sending must be enabled for the account (`canSelfBrandSend` , `canSelfBrandSign`, or both of these account settings must be **true**).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter brand: (body)  (optional)
     - returns: `EventLoopFuture` of `BrandsPostBrands`
     */
    open class func brandsPostBrands(accountId: String, brand: Brand? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<BrandsPostBrands> {
        return brandsPostBrandsRaw(accountId: accountId, brand: brand, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> BrandsPostBrands in
            switch response.status.code {
            case 201:
                return .http201(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(AccountBrands.self, using: Configuration.contentConfiguration.requireDecoder(for: AccountBrands.defaultContentType)), raw: response)
            }
        }
    }
}

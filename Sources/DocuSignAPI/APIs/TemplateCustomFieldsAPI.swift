//
// TemplateCustomFieldsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class TemplateCustomFieldsAPI {
    /**
     Deletes envelope custom fields in a template.

     DELETE /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Deletes envelope custom fields in a template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func customFieldsDeleteTemplateCustomFieldsRaw(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = templateCustomFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum CustomFieldsDeleteTemplateCustomFields {
        case http200(value: CustomFields, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: CustomFields, raw: ClientResponse)
    }

    /**
     Deletes envelope custom fields in a template.

     DELETE /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Deletes envelope custom fields in a template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `CustomFieldsDeleteTemplateCustomFields`
     */
    open class func customFieldsDeleteTemplateCustomFields(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<CustomFieldsDeleteTemplateCustomFields> {
        return customFieldsDeleteTemplateCustomFieldsRaw(accountId: accountId, templateId: templateId, templateCustomFields: templateCustomFields, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> CustomFieldsDeleteTemplateCustomFields in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Gets the custom document fields from a template.

     GET /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Retrieves the custom document field information from an existing template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func customFieldsGetTemplateCustomFieldsRaw(accountId: String, templateId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum CustomFieldsGetTemplateCustomFields {
        case http200(value: CustomFields, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: CustomFields, raw: ClientResponse)
    }

    /**
     Gets the custom document fields from a template.

     GET /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Retrieves the custom document field information from an existing template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - returns: `EventLoopFuture` of `CustomFieldsGetTemplateCustomFields`
     */
    open class func customFieldsGetTemplateCustomFields(accountId: String, templateId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<CustomFieldsGetTemplateCustomFields> {
        return customFieldsGetTemplateCustomFieldsRaw(accountId: accountId, templateId: templateId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> CustomFieldsGetTemplateCustomFields in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Creates custom document fields in an existing template document.

     POST /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Creates custom document fields in an existing template document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func customFieldsPostTemplateCustomFieldsRaw(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = templateCustomFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum CustomFieldsPostTemplateCustomFields {
        case http201(value: CustomFields, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: CustomFields, raw: ClientResponse)
    }

    /**
     Creates custom document fields in an existing template document.

     POST /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Creates custom document fields in an existing template document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `CustomFieldsPostTemplateCustomFields`
     */
    open class func customFieldsPostTemplateCustomFields(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<CustomFieldsPostTemplateCustomFields> {
        return customFieldsPostTemplateCustomFieldsRaw(accountId: accountId, templateId: templateId, templateCustomFields: templateCustomFields, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> CustomFieldsPostTemplateCustomFields in
            switch response.status.code {
            case 201:
                return .http201(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Updates envelope custom fields in a template.

     PUT /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Updates the custom fields in a template.  Each custom field used in a template must have a unique name.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func customFieldsPutTemplateCustomFieldsRaw(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/custom_fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = templateCustomFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum CustomFieldsPutTemplateCustomFields {
        case http200(value: CustomFields, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: CustomFields, raw: ClientResponse)
    }

    /**
     Updates envelope custom fields in a template.

     PUT /v2.1/accounts/{accountId}/templates/{templateId}/custom_fields

     Updates the custom fields in a template.  Each custom field used in a template must have a unique name.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateCustomFields: (body)  (optional)
     - returns: `EventLoopFuture` of `CustomFieldsPutTemplateCustomFields`
     */
    open class func customFieldsPutTemplateCustomFields(accountId: String, templateId: String, templateCustomFields: TemplateCustomFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<CustomFieldsPutTemplateCustomFields> {
        return customFieldsPutTemplateCustomFieldsRaw(accountId: accountId, templateId: templateId, templateCustomFields: templateCustomFields, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> CustomFieldsPutTemplateCustomFields in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(CustomFields.self, using: Configuration.contentConfiguration.requireDecoder(for: CustomFields.defaultContentType)), raw: response)
            }
        }
    }
}

//
// NotaryAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class NotaryAPI {
    /**
     Gets settings for a  notary user.

     GET /v2.1/current_user/notary

     Gets settings for a notary user. The current user must be a notary.

     - parameter includeJurisdictions: (query) If **true**, the response will include a `jurisdiction` property that contains an array of all supported jurisdictions for the current user. (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func notaryGetNotaryRaw(includeJurisdictions: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        let path = "/v2.1/current_user/notary"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeJurisdictions: String?
            }
            try request.query.encode(QueryParams(includeJurisdictions: includeJurisdictions))

            try beforeSend(&request)
        }
    }

    public enum NotaryGetNotary {
        case http200(value: NotaryResult, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: NotaryResult, raw: ClientResponse)
    }

    /**
     Gets settings for a  notary user.

     GET /v2.1/current_user/notary

     Gets settings for a notary user. The current user must be a notary.

     - parameter includeJurisdictions: (query) If **true**, the response will include a `jurisdiction` property that contains an array of all supported jurisdictions for the current user. (optional)
     - returns: `EventLoopFuture` of `NotaryGetNotary`
     */
    open class func notaryGetNotary(includeJurisdictions: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotaryGetNotary> {
        return notaryGetNotaryRaw(includeJurisdictions: includeJurisdictions, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> NotaryGetNotary in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(NotaryResult.self, using: Configuration.contentConfiguration.requireDecoder(for: NotaryResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(NotaryResult.self, using: Configuration.contentConfiguration.requireDecoder(for: NotaryResult.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Registers the current user as a notary.

     POST /v2.1/current_user/notary

     Registers the current user as a notary.

     - parameter notary: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func notaryPostNotaryRaw(notary: Notary? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        let path = "/v2.1/current_user/notary"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = notary {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum NotaryPostNotary {
        case http201(value: Notary, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Notary, raw: ClientResponse)
    }

    /**
     Registers the current user as a notary.

     POST /v2.1/current_user/notary

     Registers the current user as a notary.

     - parameter notary: (body)  (optional)
     - returns: `EventLoopFuture` of `NotaryPostNotary`
     */
    open class func notaryPostNotary(notary: Notary? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotaryPostNotary> {
        return notaryPostNotaryRaw(notary: notary, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> NotaryPostNotary in
            switch response.status.code {
            case 201:
                return .http201(value: try response.content.decode(Notary.self, using: Configuration.contentConfiguration.requireDecoder(for: Notary.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(Notary.self, using: Configuration.contentConfiguration.requireDecoder(for: Notary.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Updates notary information for the current user.

     PUT /v2.1/current_user/notary

     Updates notary information for the current user.

     - parameter notary: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func notaryPutNotaryRaw(notary: Notary? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        let path = "/v2.1/current_user/notary"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = notary {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum NotaryPutNotary {
        case http200(value: Notary, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Notary, raw: ClientResponse)
    }

    /**
     Updates notary information for the current user.

     PUT /v2.1/current_user/notary

     Updates notary information for the current user.

     - parameter notary: (body)  (optional)
     - returns: `EventLoopFuture` of `NotaryPutNotary`
     */
    open class func notaryPutNotary(notary: Notary? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotaryPutNotary> {
        return notaryPutNotaryRaw(notary: notary, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> NotaryPutNotary in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(Notary.self, using: Configuration.contentConfiguration.requireDecoder(for: Notary.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(Notary.self, using: Configuration.contentConfiguration.requireDecoder(for: Notary.defaultContentType)), raw: response)
            }
        }
    }
}

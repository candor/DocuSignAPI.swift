//
// EnvelopeAttachmentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class EnvelopeAttachmentsAPI {
    /**
     Delete one or more attachments from a DRAFT envelope.

     DELETE /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeAttachmentsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func attachmentsDeleteAttachmentsRaw(accountId: String, envelopeId: String, envelopeAttachmentsRequest: EnvelopeAttachmentsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeAttachmentsRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum AttachmentsDeleteAttachments {
        case http200(value: EnvelopeAttachmentsResult, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: EnvelopeAttachmentsResult, raw: ClientResponse)
    }

    /**
     Delete one or more attachments from a DRAFT envelope.

     DELETE /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeAttachmentsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `AttachmentsDeleteAttachments`
     */
    open class func attachmentsDeleteAttachments(accountId: String, envelopeId: String, envelopeAttachmentsRequest: EnvelopeAttachmentsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AttachmentsDeleteAttachments> {
        return attachmentsDeleteAttachmentsRaw(accountId: accountId, envelopeId: envelopeId, envelopeAttachmentsRequest: envelopeAttachmentsRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> AttachmentsDeleteAttachments in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Retrieves an attachment from the envelope.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter attachmentId: (path) The unique identifier for the attachment.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func attachmentsGetAttachmentRaw(accountId: String, attachmentId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = String(describing: attachmentId)
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum AttachmentsGetAttachment {
        case http200(value: Void, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: Void, raw: ClientResponse)
    }

    /**
     Retrieves an attachment from the envelope.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter attachmentId: (path) The unique identifier for the attachment.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `AttachmentsGetAttachment`
     */
    open class func attachmentsGetAttachment(accountId: String, attachmentId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AttachmentsGetAttachment> {
        return attachmentsGetAttachmentRaw(accountId: accountId, attachmentId: attachmentId, envelopeId: envelopeId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> AttachmentsGetAttachment in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    /**
     Returns a list of attachments associated with the specified envelope

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func attachmentsGetAttachmentsRaw(accountId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }
    }

    public enum AttachmentsGetAttachments {
        case http200(value: EnvelopeAttachmentsResult, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: EnvelopeAttachmentsResult, raw: ClientResponse)
    }

    /**
     Returns a list of attachments associated with the specified envelope

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `AttachmentsGetAttachments`
     */
    open class func attachmentsGetAttachments(accountId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AttachmentsGetAttachments> {
        return attachmentsGetAttachmentsRaw(accountId: accountId, envelopeId: envelopeId, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> AttachmentsGetAttachments in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Add an attachment to a DRAFT or IN-PROCESS envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter attachmentId: (path) The unique identifier for the attachment.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter attachment: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func attachmentsPutAttachmentRaw(accountId: String, attachmentId: String, envelopeId: String, attachment: Attachment? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = String(describing: attachmentId)
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachmentId}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = attachment {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum AttachmentsPutAttachment {
        case http200(value: EnvelopeAttachmentsResult, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: EnvelopeAttachmentsResult, raw: ClientResponse)
    }

    /**
     Add an attachment to a DRAFT or IN-PROCESS envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments/{attachmentId}

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter attachmentId: (path) The unique identifier for the attachment.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter attachment: (body)  (optional)
     - returns: `EventLoopFuture` of `AttachmentsPutAttachment`
     */
    open class func attachmentsPutAttachment(accountId: String, attachmentId: String, envelopeId: String, attachment: Attachment? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AttachmentsPutAttachment> {
        return attachmentsPutAttachmentRaw(accountId: accountId, attachmentId: attachmentId, envelopeId: envelopeId, attachment: attachment, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> AttachmentsPutAttachment in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Add one or more attachments to a draft or in-process envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     Supported attachment formats include: .asp, .bmp, .csv, .doc, .docm, .docx, .dot, .dotm, .dotx, .gif, .htm, .html, .jpeg, .jpg, .msg, .pdf, .png, .pot, .potx, .pps, .ppt, .pptm, .pptx, .ps, .rtf, .tif, .tiff, .txt, .wpd, .xls, .xlsm, .xlsx, .xml, and .xps. For more information about supported file formats, see [Supported File Formats](https://support.docusign.com/guides/ndse-user-guide-supported-file-formats).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeAttachmentsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `ClientResponse`
     */
    open class func attachmentsPutAttachmentsRaw(accountId: String, envelopeId: String, envelopeAttachmentsRequest: EnvelopeAttachmentsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ClientResponse> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeAttachmentsRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }
    }

    public enum AttachmentsPutAttachments {
        case http200(value: EnvelopeAttachmentsResult, raw: ClientResponse)
        case http400(value: ErrorDetails, raw: ClientResponse)
        case http0(value: EnvelopeAttachmentsResult, raw: ClientResponse)
    }

    /**
     Add one or more attachments to a draft or in-process envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/attachments

     Supported attachment formats include: .asp, .bmp, .csv, .doc, .docm, .docx, .dot, .dotm, .dotx, .gif, .htm, .html, .jpeg, .jpg, .msg, .pdf, .png, .pot, .potx, .pps, .ppt, .pptm, .pptx, .ps, .rtf, .tif, .tiff, .txt, .wpd, .xls, .xlsm, .xlsx, .xml, and .xps. For more information about supported file formats, see [Supported File Formats](https://support.docusign.com/guides/ndse-user-guide-supported-file-formats).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeAttachmentsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `AttachmentsPutAttachments`
     */
    open class func attachmentsPutAttachments(accountId: String, envelopeId: String, envelopeAttachmentsRequest: EnvelopeAttachmentsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AttachmentsPutAttachments> {
        return attachmentsPutAttachmentsRaw(accountId: accountId, envelopeId: envelopeId, envelopeAttachmentsRequest: envelopeAttachmentsRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> AttachmentsPutAttachments in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try response.content.decode(EnvelopeAttachmentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAttachmentsResult.defaultContentType)), raw: response)
            }
        }
    }
}

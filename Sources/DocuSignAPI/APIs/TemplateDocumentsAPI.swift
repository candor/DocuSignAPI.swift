//
// TemplateDocumentsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class TemplateDocumentsAPI {
    public enum DocumentsDeleteTemplateDocuments {
        case http200(value: TemplateDocumentsResult?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TemplateDocumentsResult?, raw: ClientResponse)
    }

    /**
     Deletes documents from a template.

     DELETE /v2.1/accounts/{accountId}/templates/{templateId}/documents

     This method deletes one or more documents from an existing template.  To delete a document, use only the relevant parts of the [`envelopeDefinition`](#envelopeDefinition). For example, this request body specifies that you want to delete the document whose `documentId` is \"1\".   ```text {   \"documents\": [     {       \"documentId\": \"1\"     }   ] } ```

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter envelopeDefinition: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentsDeleteTemplateDocuments`
     */
    open class func documentsDeleteTemplateDocuments(accountId: String, templateId: String, envelopeDefinition: EnvelopeDefinition? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentsDeleteTemplateDocuments> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/documents"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeDefinition {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentsDeleteTemplateDocuments in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            }
        }
    }

    public enum DocumentsGetTemplateDocument {
        case http200(value: Data?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Data?, raw: ClientResponse)
    }

    /**
     Gets PDF documents from a template.

     GET /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}

     This method retrieves one or more PDF documents from the template that you specify.  You can specify the ID of the document to retrieve, or pass in the value `combined` to retrieve all documents in the template as a single PDF file.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter templateId: (path) The id of the template.
     - parameter encrypt: (query) When set to **true**, the PDF bytes returned in the response are encrypted for all the key managers configured on your DocuSign account. You can decrypt the documents by using the Key Manager DecryptDocument API method. For more information about Key Manager, see the DocuSign Security Appliance Installation Guide that your organization received from DocuSign. (optional)
     - parameter showChanges: (query) When set to **true**, any document fields that a recipient changed are highlighted in yellow in the returned PDF document, and optional signatures or initials are outlined in red. (optional)
     - returns: `EventLoopFuture` of `DocumentsGetTemplateDocument`
     */
    open class func documentsGetTemplateDocument(accountId: String, documentId: String, templateId: String, encrypt: String? = nil, showChanges: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentsGetTemplateDocument> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var encrypt: String?
                var showChanges: String?
            }
            try request.query.encode(QueryParams(encrypt: encrypt, showChanges: showChanges))

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentsGetTemplateDocument in
            switch response.status.code {
            case 200:
                return .http200(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            }
        }
    }

    public enum DocumentsGetTemplateDocuments {
        case http200(value: TemplateDocumentsResult?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TemplateDocumentsResult?, raw: ClientResponse)
    }

    /**
     Gets a list of documents associated with a template.

     GET /v2.1/accounts/{accountId}/templates/{templateId}/documents

     Retrieves a list of documents associated with the specified template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter includeTabs: (query) Reserved for DocuSign. (optional)
     - returns: `EventLoopFuture` of `DocumentsGetTemplateDocuments`
     */
    open class func documentsGetTemplateDocuments(accountId: String, templateId: String, includeTabs: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentsGetTemplateDocuments> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/documents"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeTabs: String?
            }
            try request.query.encode(QueryParams(includeTabs: includeTabs))

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentsGetTemplateDocuments in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            }
        }
    }

    public enum DocumentsPutTemplateDocument {
        case http200(value: EnvelopeDocument?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeDocument?, raw: ClientResponse)
    }

    /**
     Updates a template document.

     PUT /v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}

     This methods updates an existing template document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter templateId: (path) The id of the template.
     - parameter isEnvelopeDefinition: (query)  (optional)
     - parameter envelopeDefinition: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentsPutTemplateDocument`
     */
    open class func documentsPutTemplateDocument(accountId: String, documentId: String, templateId: String, isEnvelopeDefinition: String? = nil, envelopeDefinition: EnvelopeDefinition? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentsPutTemplateDocument> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/documents/{documentId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var isEnvelopeDefinition: String?
            }
            try request.query.encode(QueryParams(isEnvelopeDefinition: isEnvelopeDefinition))
            if let body = envelopeDefinition {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentsPutTemplateDocument in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeDocument.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeDocument.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeDocument.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeDocument.defaultContentType)), raw: response)
            }
        }
    }

    public enum DocumentsPutTemplateDocuments {
        case http200(value: TemplateDocumentsResult?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TemplateDocumentsResult?, raw: ClientResponse)
    }

    /**
     Adds documents to a template document.

     PUT /v2.1/accounts/{accountId}/templates/{templateId}/documents

     Adds one or more documents to an existing template document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter envelopeDefinition: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentsPutTemplateDocuments`
     */
    open class func documentsPutTemplateDocuments(accountId: String, templateId: String, envelopeDefinition: EnvelopeDefinition? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentsPutTemplateDocuments> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/documents"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeDefinition {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentsPutTemplateDocuments in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(TemplateDocumentsResult.self, using: Configuration.contentConfiguration.requireDecoder(for: TemplateDocumentsResult.defaultContentType)), raw: response)
            }
        }
    }
}

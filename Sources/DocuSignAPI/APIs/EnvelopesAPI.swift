//
// EnvelopesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class EnvelopesAPI {
    public enum AuditEventsGetAuditEvents {
        case http200(value: EnvelopeAuditEventResponse?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeAuditEventResponse?, raw: ClientResponse)
    }

    /**
     Gets the envelope audit events for an envelope.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/audit_events

     Gets the envelope audit events for the specified envelope.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `AuditEventsGetAuditEvents`
     */
    open class func auditEventsGetAuditEvents(accountId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AuditEventsGetAuditEvents> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/audit_events"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> AuditEventsGetAuditEvents in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeAuditEventResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAuditEventResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeAuditEventResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeAuditEventResponse.defaultContentType)), raw: response)
            }
        }
    }

    public enum EnvelopesGetEnvelope {
        case http200(value: Envelope?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Envelope?, raw: ClientResponse)
    }

    /**
     Gets the status of a single envelope.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}

     Retrieves the overall status for the specified envelope. To get the status of a list of envelopes, use [Envelope: listStatusChanges ](https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/listStatusChanges/).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter advancedUpdate: (query) When **true**, envelope information can be added or modified. (optional)
     - parameter include: (query) Specifies additional information about the envelope to return. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:  - `custom_fields`: The custom fields associated with the envelope. - `documents`: The documents associated with the envelope. - `attachments`: The attachments associated with the envelope. - `extensions`: Information about the email settings associated with the envelope. - `folders`: The folder where the envelope exists. - `recipients`: The recipients associated with the envelope. - `powerform`: The PowerForms associated with the envelope. - `tabs`: The tabs associated with the envelope. - `payment_tabs`: The payment tabs associated with the envelope.  (optional)
     - returns: `EventLoopFuture` of `EnvelopesGetEnvelope`
     */
    open class func envelopesGetEnvelope(accountId: String, envelopeId: String, advancedUpdate: String? = nil, include: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<EnvelopesGetEnvelope> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var advancedUpdate: String?
                var include: String?
            }
            try request.query.encode(QueryParams(advancedUpdate: advancedUpdate, include: include))

            try beforeSend(&request)
        }.flatMapThrowing { response -> EnvelopesGetEnvelope in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Envelope.self, using: Configuration.contentConfiguration.requireDecoder(for: Envelope.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Envelope.self, using: Configuration.contentConfiguration.requireDecoder(for: Envelope.defaultContentType)), raw: response)
            }
        }
    }

    public enum EnvelopesGetEnvelopes {
        case http200(value: EnvelopesInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopesInformation?, raw: ClientResponse)
    }

    /**
     Gets status changes for one or more envelopes.

     GET /v2.1/accounts/{accountId}/envelopes

     Retrieves a list of envelopes that match your request.  A large set of optional filters let you filter by date, by envelope ID, or by status codes.  Your request must include one or more of the following parameters:  * `from_date` * `envelope_ids` * `transaction_ids`   Getting envelope status using `transaction_ids` is useful for offline signing situations where it can be used determine if an envelope was created or not. It can be used for the cases where a network connection was lost, before the envelope status could be returned.  To avoid unnecessary database queries, the DocuSign signature platform first checks requests to ensure that the filter set supplied does not result in a zero-size response before querying the database.   For example, for a request with a `from_to_status` of `delivered` and a current `status` of `created,sent`, DocuSign will always return an empty list.  This is because the request translates to: find the envelopes that were delivered between the `from_date` and `to_date` dates that have a current status of `created` or `sent`. Since an envelope that has been delivered can never have a status of `created` or `sent`, a zero-size response would be generated.  In this case, DocuSign does not query the database and returns an empty list immediately.   The following table shows the valid current envelope statuses (`status` parameter) for the different status qualifiers (`from_to_status` parameter) in the request. If the status and status qualifiers in the API request do not contain any of the values shown in the Valid Current Statuses column, then an empty list is returned.  Client applications should check that the statuses (`status` parameter) they are requesting make sense for a given `from_to_status` parameter value.  | Status Qualifier<br>(`from_to_status`) | Effective Status Qualifier | Valid Current Statuses                                                      |   | :------------------------------------- | :------------------------- | :-------------------------------------------------------------------------- |   | any (changed)                          | StatusChanged              | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | created                                | Created                    | any, created, sent, delivered, signed, completed, declined, voided, deleted |   | sent                                   | Sent                       | any, sent, delivered, signed, completed, declined, voided, deleted          |   | delivered                              | StatusChanged              | any, delivered, signed, completed, declined, voided, deleted                |   | signed                                 | StatusChanged              | any, signed, completed, declined, voided, deleted                           |   | completed                              | Completed                  | any, completed, declined, voided, deleted                                   |   | declined                               | StatusChanged              | any, declined, voided, deleted                                              |   | timedout<br>always return zero results | StatusChanged              | any, voided, deleted                                                        |   | voided                                 | Voided                     | any, voided, deleted                                                        |   | deleted                                | StatusChanged              | any, deleted                                                                |    ## Extraneous results  In some cases, a request for a specific envelope status will include envelopes with additional statuses. For example, in a request with a `from_date` of 2017-01-01, a `to_date` of 2017-01-07 and the status qualifier (`from_to_status`) set to `delivered`, the response set might contain envelopes that were created during that time period, but not delivered during the time period. As a workaround, check the envelope status values in the result set as needed.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter acStatus: (query) Specifies the Authoritative Copy Status for the envelopes. The possible values are:   - `Unknown` - `Original` - `Transferred` - `AuthoritativeCopy` - `AuthoritativeCopyExportPending` - `AuthoritativeCopyExported` - `DepositPending` - `Deposited` - `DepositedEO` - `DepositFailed` (optional)
     - parameter block: (query) Reserved for DocuSign.  (optional)
     - parameter cdseMode: (query) Reserved for DocuSign.  (optional)
     - parameter continuationToken: (query) A token returned in the response to a previous API call that is used to resume a search query from a specific point. (optional)
     - parameter count: (query) Optional. Number of items to return. Currently there is no implicit maximum limit of the number of items that can be returned.  (optional)
     - parameter customField: (query) Optional. Specifies a envelope custom field name and value searched for in the envelopes. Format: `custom_envelope_field_name=desired_value`  Example: If you have an envelope custom field named \"Region\" and you want to search for all envelopes where the value is \"West\" you would use set this parameter to `Region=West`.     (optional)
     - parameter email: (query) Limit results to envelopes sent by the account user with this email address.  `user_name` must be given as well, and both `email` and `user_name` must refer to an existing account user.  (optional)
     - parameter envelopeIds: (query) Comma separated list of `envelopeId` values. (optional)
     - parameter exclude: (query) Excludes information from the response. Enter  as a comma-separated list (e.g., `folders,powerforms`). Valid values are:  - `recipients` - `powerforms` - `folders` (optional)
     - parameter folderIds: (query) Returns the envelopes from specific folders. Enter as a comma-separated list of either valid folder Guids or the following values:   - `awaiting_my_signature` - `completed` - `draft` - `drafts` - `expiring_soon` - `inbox` - `out_for_signature` - `recyclebin` - `sentitems` - `waiting_for_others` (optional)
     - parameter folderTypes: (query) A comma-separated list of folder types you want to retrieve envelopes from. Valid values are:   - `normal` - `inbox` - `sentitems` - `draft` - `templates` (optional)
     - parameter fromDate: (query) Specifies the date and time to start looking for status changes. This parameter is required unless `envelopeIds` or `transactionIds` are set.   Although you can use any date format supported by the .NET system library's [`DateTime.Parse()`][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server's time zone.  For example, the following dates and times refer to the same instant:  * `2017-05-02T01:44Z` * `2017-05-01T21:44-04:00` * `2017-05-01T18:44-07:00`   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601 (optional)
     - parameter fromToStatus: (query) The envelope status that you are checking for. Possible values are:   - `Changed` (default) - `Completed` - `Created` - `Declined` - `Deleted` - `Delivered` - `Processing` - `Sent` - `Signed` - `TimedOut` - `Voided`  For example, if you specify `Changed`, this method returns a list of envelopes that changed status during the `from_date` to `to_date` time period.   (optional)
     - parameter include: (query) Specifies additional information to return  about the envelopes. Enter a comma-separated list, such as `tabs,recipients`. Valid values are:  - `custom_fields`: The custom fields associated with the envelope. - `documents`: The documents associated with the envelope. - `attachments`: The attachments associated with the envelope. - `extensions`: Information about the email settings associated with the envelope. - `folders`: The folders where the envelope exists. - `recipients`: The recipients associated with the envelope. - `powerform`: The PowerForms associated with the envelope. - `payment_tabs`: The payment tabs associated with the envelope.  (optional)
     - parameter includePurgeInformation: (query) When set to **true**, information about envelopes that have been deleted is included in the response. (optional)
     - parameter intersectingFolderIds: (query) A comma-separated list of folders that you want want to get envelopes from. Valid values are:   - `normal` - `inbox` - `sentitems` - `draft` - `templates` (optional)
     - parameter lastQueriedDate: (query) Returns envelopes that were modified prior to the specified date and time.   Example: `2020-05-09T21:56:12.2500000Z` (optional)
     - parameter order: (query) Returns envelopes in either ascending (`asc`) or descending (`desc`) order. (optional)
     - parameter orderBy: (query) Sorts results according to a specific property. Valid values are:  - `last_modified` - `action_required` - `created` - `completed` - `envelope_name` - `expire` - `sent` - `signer_list` - `status` - `subject` - `user_name` - `status_changed` - `last_modified` (optional)
     - parameter powerformids: (query) A comma-separated list of `PowerFormId` values. (optional)
     - parameter queryBudget: (query) The time in seconds that the query should run before returning data. (optional)
     - parameter requesterDateFormat: (query)  (optional)
     - parameter searchText: (query) Free text search criteria that you can use to filter the list of envelopes that is returned. (optional)
     - parameter startPosition: (query) This value is supported and currently has no implicit maximum items.  (optional)
     - parameter status: (query) A comma-separated list of current envelope statuses to included in the response. Possible values are:  * `completed` * `created` * `declined` * `deleted` * `delivered` * `processing` * `sent` * `signed` * `timedout` * `voided`  The `any` value is equivalent to any status.  (optional)
     - parameter toDate: (query) Specifies the date and time to stop looking for status changes. The default is the current date and time.  Although you can use any date format supported by the .NET system library's [`DateTime.Parse()`][msoft] function, DocuSign recommends using [ISO 8601][] format dates with an explicit time zone offset If you do not provide a time zone offset, the method uses the server's time zone.  For example, the following dates and times refer to the same instant:  * `2017-05-02T01:44Z` * `2017-05-01T21:44-04:00` * `2017-05-01T18:44-07:00`   [msoft]: https://msdn.microsoft.com/en-us/library/system.datetime.parse(v=vs.110).aspx#StringToParse [ISO 8601]: https://en.wikipedia.org/wiki/ISO_8601  (optional)
     - parameter transactionIds: (query) A comma-separated list of envelope transaction IDs. Transaction IDs are only valid for seven days.  (optional)
     - parameter userFilter: (query) Returns envelopes where the current user is the recipient, the sender, or the recipient only. (For example, `user_filter=sender`.) Valid values are:  - `sender` - `recipient` - `recipient_only` (optional)
     - parameter userId: (query) The ID of the user who created the envelopes to be retrieved. Note that an account can have multiple users, and any user with account access can retrieve envelopes by user_id from the account. (optional)
     - parameter userName: (query) Limit results to envelopes sent by the account user with this user name.  `email` must be given as well, and both `email` and `user_name` must refer to an existing account user.  (optional)
     - returns: `EventLoopFuture` of `EnvelopesGetEnvelopes`
     */
    open class func envelopesGetEnvelopes(accountId: String, acStatus: String? = nil, block: String? = nil, cdseMode: String? = nil, continuationToken: String? = nil, count: String? = nil, customField: String? = nil, email: String? = nil, envelopeIds: String? = nil, exclude: String? = nil, folderIds: String? = nil, folderTypes: String? = nil, fromDate: String? = nil, fromToStatus: String? = nil, include: String? = nil, includePurgeInformation: String? = nil, intersectingFolderIds: String? = nil, lastQueriedDate: String? = nil, order: String? = nil, orderBy: String? = nil, powerformids: String? = nil, queryBudget: String? = nil, requesterDateFormat: String? = nil, searchText: String? = nil, startPosition: String? = nil, status: String? = nil, toDate: String? = nil, transactionIds: String? = nil, userFilter: String? = nil, userId: String? = nil, userName: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<EnvelopesGetEnvelopes> {
        var path = "/v2.1/accounts/{accountId}/envelopes"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var acStatus: String?
                var block: String?
                var cdseMode: String?
                var continuationToken: String?
                var count: String?
                var customField: String?
                var email: String?
                var envelopeIds: String?
                var exclude: String?
                var folderIds: String?
                var folderTypes: String?
                var fromDate: String?
                var fromToStatus: String?
                var include: String?
                var includePurgeInformation: String?
                var intersectingFolderIds: String?
                var lastQueriedDate: String?
                var order: String?
                var orderBy: String?
                var powerformids: String?
                var queryBudget: String?
                var requesterDateFormat: String?
                var searchText: String?
                var startPosition: String?
                var status: String?
                var toDate: String?
                var transactionIds: String?
                var userFilter: String?
                var userId: String?
                var userName: String?
            }
            try request.query.encode(QueryParams(acStatus: acStatus, block: block, cdseMode: cdseMode, continuationToken: continuationToken, count: count, customField: customField, email: email, envelopeIds: envelopeIds, exclude: exclude, folderIds: folderIds, folderTypes: folderTypes, fromDate: fromDate, fromToStatus: fromToStatus, include: include, includePurgeInformation: includePurgeInformation, intersectingFolderIds: intersectingFolderIds, lastQueriedDate: lastQueriedDate, order: order, orderBy: orderBy, powerformids: powerformids, queryBudget: queryBudget, requesterDateFormat: requesterDateFormat, searchText: searchText, startPosition: startPosition, status: status, toDate: toDate, transactionIds: transactionIds, userFilter: userFilter, userId: userId, userName: userName))

            try beforeSend(&request)
        }.flatMapThrowing { response -> EnvelopesGetEnvelopes in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopesInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopesInformation.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopesInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopesInformation.defaultContentType)), raw: response)
            }
        }
    }

    public enum EnvelopesPostEnvelopes {
        case http201(value: EnvelopeSummary?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeSummary?, raw: ClientResponse)
    }

    /**
     Creates an envelope.

     POST /v2.1/accounts/{accountId}/envelopes

     Creates and sends an envelope or creates a draft envelope. Envelopes are fundamental resources in the DocuSign platform.  With this method you can:  * Create and send an envelope   with [documents][], [recipients][], and [tabs][]. * [Create and send an envelope from a template](https://developers.docusign.com/esign-rest-api/guides/features/templates#sending-from-a-template). * [Create and send an envelope from   a combination of documents and templates](https://developers.docusign.com/esign-rest-api/guides/features/templates#composite-templates). * Create a draft envelope.   When you use this method to create and send an envelope in a single request, the following parameters in the request body (an [`envelopeDefinition`][envelopeDefinition]) are required:  | Parameter      | Description | | :--------      | :---------- | | `status`       | Set to `sent` to send the envelope to recipients.<br>Set to `created` (or don't set at all) to save the envelope as a draft. | | `emailSubject` | The subject of the email used to send the envelope. | | `documents`    | The [documents][] to be signed. | | `recipients`   | The email addresses of the envelope [recipients][]. |   **Note**: If the envelope has a workflow definition and the `workflowStatus` is `paused`, the envelope will not be sent immediately, even if the envelope's `status` is `sent`.  There are many ways to use envelopes. You can create and send an envelope with a single API request, or you can use several API requests to create, populate, and send envelopes.   | See:                  | To learn about:                                                                                                                    | | :----------------------- | :--------------------------------------------------------------------------------------------------------------------------------- | | [Envelopes][envelopes]   | Envelopes, [adding documents][addingdocs], [tracking][], [locking][], [deleting][], [templates][]                                  | | [Documents][documents]   | Documents, [attachments][], [supplemental documents][supdocs], [authoritative copies][authcopies], [purging][]                     | | [Recipients][recipients] | Recipients, [recipient types][reciptypes], [recipient status][recipstatus]                                                         | | [Tabs][tabs]             | Tabs, [tab types][tabtypes], [anchoring tabs][tabanchor], [auto-populating tabs][tabauto],  [custom tabs][tabcustom], [payments][] |   [addingdocs]:           https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes#adding-documents-to-an-envelope [attachments]:          https://developers.docusign.com/esign-rest-api/guides/concepts/documents#attachments [authcopies]:           https://developers.docusign.com/esign-rest-api/guides/concepts/documents#authoritative-copies [conoverview]:          https://developers.docusign.com/esign-rest-api/guides/concepts/overview [deleting]:             https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes#deleting-envelopes [documents]:            https://developers.docusign.com/esign-rest-api/guides/concepts/documents [envelopeDefinition]:   https://developers.docusign.com/esign-rest-api/reference/Envelopes/Envelopes/create#envelopeDefinition [envelopes]:            https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes [locking]:              https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes#locking-envelopes [payments]:             https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#requesting-payments [purging]:              https://developers.docusign.com/esign-rest-api/guides/concepts/documents#purging-documents [recipients]:           https://developers.docusign.com/esign-rest-api/guides/concepts/recipients [recipstatus]:          https://developers.docusign.com/esign-rest-api/guides/concepts/recipients#recipient-status [reciptypes]:           https://developers.docusign.com/esign-rest-api/guides/concepts/recipients#recipient-types [supdocs]:              https://developers.docusign.com/esign-rest-api/guides/concepts/documents#supplemental-documents [tabanchor]:            https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#anchoring-tabs [tabauto]:              https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#automatically-populating-tabs [tabcustom]:            https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#using-custom-tabs-in-envelopes-and-templates [tabs]:                 https://developers.docusign.com/esign-rest-api/guides/concepts/tabs [tabtypes]:             https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#tab-types [templates]:            https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes#working-with-templates [tracking]:             https://developers.docusign.com/esign-rest-api/guides/concepts/envelopes#tracking-envelope-status  **Note**: When you create an envelope by using a [composite template](https://developers.docusign.com/esign-rest-api/guides/concepts/templates#composite-templates), you should specify the envelope custom fields in the inline template. Any custom fields that you specify at the root level are ignored.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter cdseMode: (query) Reserved for DocuSign.  (optional)
     - parameter changeRoutingOrder: (query) When true, users can define the routing order of recipients while sending documents for signature. (optional)
     - parameter completedDocumentsOnly: (query) Reserved for DocuSign.  (optional)
     - parameter mergeRolesOnDraft: (query) When set to **true**, template roles will be merged, and empty recipients will be removed. This parameter applies when you create a draft envelope with multiple templates. (To create a draft envelope, the `status` field is set to `created`.)  **Note**: DocuSign recommends that this parameter should be set to **true** whenever you create a draft envelope with multiple templates. (optional)
     - parameter envelopeDefinition: (body)  (optional)
     - returns: `EventLoopFuture` of `EnvelopesPostEnvelopes`
     */
    open class func envelopesPostEnvelopes(accountId: String, cdseMode: String? = nil, changeRoutingOrder: String? = nil, completedDocumentsOnly: String? = nil, mergeRolesOnDraft: String? = nil, envelopeDefinition: EnvelopeDefinition? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<EnvelopesPostEnvelopes> {
        var path = "/v2.1/accounts/{accountId}/envelopes"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var cdseMode: String?
                var changeRoutingOrder: String?
                var completedDocumentsOnly: String?
                var mergeRolesOnDraft: String?
            }
            try request.query.encode(QueryParams(cdseMode: cdseMode, changeRoutingOrder: changeRoutingOrder, completedDocumentsOnly: completedDocumentsOnly, mergeRolesOnDraft: mergeRolesOnDraft))
            if let body = envelopeDefinition {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> EnvelopesPostEnvelopes in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(EnvelopeSummary.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeSummary.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeSummary.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeSummary.defaultContentType)), raw: response)
            }
        }
    }

    public enum EnvelopesPutEnvelope {
        case http200(value: EnvelopeUpdateSummary?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeUpdateSummary?, raw: ClientResponse)
    }

    /**
     Send, void, or modify a draft envelope. Purge documents from a completed envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}

     This method enables you to make changes to an envelope. You can use it to:  * Send a draft envelope * Void an in-process envelope * Modify a draft envelope * Purge documents and envelope metadata from the DocuSign platform   <div class=\"highlight highlight-info\"> <p markdown=\"1\">  Although the request body for this method is a complete envelope definition, you only need to provide the properties that you're updating.  </p> </div>   ## Sending a Draft Envelope  To send a draft envelope, include the following code in the request body:  ```json {   \"status\": \"sent\" } ```  You can attach a workflow before sending the envelope:  ```json {   \"status\": \"sent\",   \"workflow\": {     \"workflowSteps\": [       {         \"action\": \"pause_before\",         \"description\": \"pause_before routing order 2\",         \"itemId\": 2,         \"triggerOnItem\": \"routing_order\"       }     ]   } } ```  ## Working with Workflows  To unpause a workflow, the request body should include this:  ```json {   \"workflow\": {     \"workflowStatus\": \"in_progress\"   } } ```  ## Voiding an In-Process Envelope  To void an in-process envelope, include the following code in the request body:  ```json {   \"status\": \"voided\",   \"voidedReason\": \"The reason for voiding the envelope\" } ```  ## Modifying Envelope Email Information  To change the email subject and message of a draft envelope, include the following code in the request body:  ```json {   \"emailSubject\": \"new email subject\",   \"emailBlurb\": \"new email message\" } ```  ## Purging Documents from DocuSign   To place only the documents in the purge queue, leaving any corresponding attachments and tabs in the DocuSign platform, set the `purgeState` property to `documents_queued`.   ```json {   \"purgeState\": \"documents_queued\" } ```  To place documents, attachments, and tabs in the purge queue, set the `purgeState` property to `documents_and_metadata_queued`.  ```json {   \"purgeState\": \"documents_and_metadata_queued\" } ```   You can purge documents only from completed envelopes that are not marked as the authoritative copy. The user requesting the purge must have permission to purge documents and must be the sender or be acting on behalf of the sender.    When the purge request is initiated the items to be purged are placed in the purge queue for deletion in 14 days. The sender and all recipients with DocuSign accounts associated with the envelope get an email notification the the documents will be deleted in 14 days. The notification contains a link to the documents. A second email notification is sent 7 days later. At the end of the 14-day period the documents are deleted from the system. Recipients without DocuSign accounts do not receive email notifications.   If your account has a Document Retention policy, envelope documents are automatically placed in the purge queue, and notification emails are sent at the end of the retention period. Setting a Document Retention policy is the same as setting a schedule for purging documents.  ## Removing Documents from the Purge Queue  To remove documents from the purge queue, include the following code in the request body:  ``` {   \"purgeState\": \"documents_dequeued\" } ```

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter advancedUpdate: (query) When set to **true**, allows the caller to update recipients, tabs, custom fields, notification, email settings and other envelope attributes. (optional)
     - parameter resendEnvelope: (query) When set to **true**, sends the specified envelope again. (optional)
     - parameter envelope: (body) A container used to send documents to recipients. The envelope carries information about the sender and timestamps to indicate the progress of the delivery procedure. It can contain collections of Documents, Tabs and Recipients. (optional)
     - returns: `EventLoopFuture` of `EnvelopesPutEnvelope`
     */
    open class func envelopesPutEnvelope(accountId: String, envelopeId: String, advancedUpdate: String? = nil, resendEnvelope: String? = nil, envelope: Envelope? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<EnvelopesPutEnvelope> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var advancedUpdate: String?
                var resendEnvelope: String?
            }
            try request.query.encode(QueryParams(advancedUpdate: advancedUpdate, resendEnvelope: resendEnvelope))
            if let body = envelope {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> EnvelopesPutEnvelope in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeUpdateSummary.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeUpdateSummary.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeUpdateSummary.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopeUpdateSummary.defaultContentType)), raw: response)
            }
        }
    }

    public enum EnvelopesPutStatus {
        case http200(value: EnvelopesInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopesInformation?, raw: ClientResponse)
    }

    /**
     Gets envelope statuses for a set of envelopes.

     PUT /v2.1/accounts/{accountId}/envelopes/status

     Retrieves envelope statuses for a set of envelopes.  You must specify _one_ of the following query parameters:  | Parameter         | Description                                                                      | | :---------------- | :------------------------------------------------------------------------------- | | `from_date`       | a valid UTC DateTime:  `2016-01-01`                                              | | `envelope_ids`    | A comma-separated list of envelope IDs<br>or the special value `request_body`    | | `transaction_ids` | A comma-separated list of transaction IDs<br>or the special value `request_body` |  When you use the special value `request_body`, the request body looks like this:  ``` {   \"envelopeIds\": [     \"44c5ad6c-xxxx-xxxx-xxxx-ebda5e2dfe15\",     \"8e26040d-xxxx-xxxx-xxxx-1e29b924d237\",     \"c8b40a2d-xxxx-xxxx-xxxx-4fe56fe10f95\"   ] } ```  **Note**: It is an error omit the request body altogether. The request body must be at least `{}`.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter acStatus: (query) Specifies the Authoritative Copy Status for the envelopes. The possible values are:   - `Unknown` - `Original` - `Transferred` - `AuthoritativeCopy` - `AuthoritativeCopyExportPending` - `AuthoritativeCopyExported` - `DepositPending` - `Deposited` - `DepositedEO` - `DepositFailed` (optional)
     - parameter block: (query) If set to **true**, removes any results that match one of the provided `transaction_ids`. (optional)
     - parameter count: (query) The maximum number of results to return. (optional)
     - parameter email: (query) The email address of the sender. (optional)
     - parameter envelopeIds: (query) The envelope IDs to include in the results.  The value of this property can be: - A comma-separated list of envelope IDs - The special value `request_body`. In this case, the method uses the envelope IDs in the request body. (optional)
     - parameter fromDate: (query) The date/time setting that specifies when the request begins checking for status changes for envelopes in the account. This is required unless parameters `envelope_ids` and/or `transaction_Ids` are provided.   ****Note****: This parameter must be set to a valid  `DateTime`, or  `envelope_ids` and/or `transaction_ids` must be specified. (optional)
     - parameter fromToStatus: (query) The envelope status that you are checking for. Possible values are:   - `Changed` (default) - `Completed` - `Created` - `Declined` - `Deleted` - `Delivered` - `Processing` - `Sent` - `Signed` - `TimedOut` - `Voided`  For example, if you specify `Changed`, this method returns a list of envelopes that changed status during the `from_date` to `to_date` time period.   (optional)
     - parameter startPosition: (query) The starting index position for search. (optional)
     - parameter status: (query) A comma-separated list of envelope status to search for. Possible values are:  - `completed` - `created` - `declined` - `deleted` - `delivered` - `processing` - `sent` - `signed` - `template` - `voided`  (optional)
     - parameter toDate: (query) Optional date/time setting that specifies the last date/time  or envelope status changes in the result set.   The default value is the time that you call the method.   (optional)
     - parameter transactionIds: (query) The transaction IDs to include in the results. Note that transaction IDs are valid for seven days.  The value of this property can be: - A list of comma-separated transaction IDs - The special value `request_body`. In this case, this method uses the transaction IDs in the request body. (optional)
     - parameter userName: (query) Limits results to envelopes sent by the account user with this user name.  `email` must be given as well, and both `email` and `user_name` must refer to an existing account user.  (optional)
     - parameter envelopeIdsRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `EnvelopesPutStatus`
     */
    open class func envelopesPutStatus(accountId: String, acStatus: String? = nil, block: String? = nil, count: String? = nil, email: String? = nil, envelopeIds: String? = nil, fromDate: String? = nil, fromToStatus: String? = nil, startPosition: String? = nil, status: String? = nil, toDate: String? = nil, transactionIds: String? = nil, userName: String? = nil, envelopeIdsRequest: EnvelopeIdsRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<EnvelopesPutStatus> {
        var path = "/v2.1/accounts/{accountId}/envelopes/status"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var acStatus: String?
                var block: String?
                var count: String?
                var email: String?
                var envelopeIds: String?
                var fromDate: String?
                var fromToStatus: String?
                var startPosition: String?
                var status: String?
                var toDate: String?
                var transactionIds: String?
                var userName: String?
            }
            try request.query.encode(QueryParams(acStatus: acStatus, block: block, count: count, email: email, envelopeIds: envelopeIds, fromDate: fromDate, fromToStatus: fromToStatus, startPosition: startPosition, status: status, toDate: toDate, transactionIds: transactionIds, userName: userName))
            if let body = envelopeIdsRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> EnvelopesPutStatus in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopesInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopesInformation.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopesInformation.self, using: Configuration.contentConfiguration.requireDecoder(for: EnvelopesInformation.defaultContentType)), raw: response)
            }
        }
    }

    public enum NotificationGetEnvelopesEnvelopeIdNotification {
        case http200(value: Notification?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Notification?, raw: ClientResponse)
    }

    /**
     Gets envelope notification information.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification

     Retrieves the envelope notification, reminders and expirations, information for an existing envelope.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `NotificationGetEnvelopesEnvelopeIdNotification`
     */
    open class func notificationGetEnvelopesEnvelopeIdNotification(accountId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotificationGetEnvelopesEnvelopeIdNotification> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> NotificationGetEnvelopesEnvelopeIdNotification in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Notification.self, using: Configuration.contentConfiguration.requireDecoder(for: Notification.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Notification.self, using: Configuration.contentConfiguration.requireDecoder(for: Notification.defaultContentType)), raw: response)
            }
        }
    }

    public enum NotificationPutEnvelopesEnvelopeIdNotification {
        case http200(value: Notification?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Notification?, raw: ClientResponse)
    }

    /**
     Sets envelope notifications for an existing envelope.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification

     This method sets the notifications (reminders and expirations) for an existing envelope. The request body sends a structure containing reminders and expirations settings. It also specifies whether to use the settings specified in the request, or the account default notification settings for the envelope.  Note that this request only specifies when notifications are sent; it does not initiate sending of email messages.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeNotificationRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `NotificationPutEnvelopesEnvelopeIdNotification`
     */
    open class func notificationPutEnvelopesEnvelopeIdNotification(accountId: String, envelopeId: String, envelopeNotificationRequest: EnvelopeNotificationRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotificationPutEnvelopesEnvelopeIdNotification> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/notification"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeNotificationRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> NotificationPutEnvelopesEnvelopeIdNotification in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Notification.self, using: Configuration.contentConfiguration.requireDecoder(for: Notification.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Notification.self, using: Configuration.contentConfiguration.requireDecoder(for: Notification.defaultContentType)), raw: response)
            }
        }
    }

    public enum PagesDeletePage {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Deletes a page from a document in an envelope.

     DELETE /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}

     Deletes a page from a document in an envelope based on the page number.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter pageNumber: (path) The page number being accessed.
     - returns: `EventLoopFuture` of `PagesDeletePage`
     */
    open class func pagesDeletePage(accountId: String, documentId: String, envelopeId: String, pageNumber: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<PagesDeletePage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let pageNumberPreEscape = String(describing: pageNumber)
        let pageNumberPostEscape = pageNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pageNumber}", with: pageNumberPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> PagesDeletePage in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    public enum PagesGetPageImage {
        case http200(value: Data?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Data?, raw: ClientResponse)
    }

    /**
     Gets a page image from an envelope for display.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image

     Returns an image of a page in a document for display.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter pageNumber: (path) The page number being accessed.
     - parameter dpi: (query) Sets the dots per inch (DPI) for the returned image. (optional)
     - parameter maxHeight: (query) Sets the maximum height for the page image in pixels. The DPI is recalculated based on this setting. (optional)
     - parameter maxWidth: (query) Sets the maximum width for the page image in pixels. The DPI is recalculated based on this setting. (optional)
     - parameter showChanges: (query) When **true**, changes display in the user interface. (optional)
     - returns: `EventLoopFuture` of `PagesGetPageImage`
     */
    open class func pagesGetPageImage(accountId: String, documentId: String, envelopeId: String, pageNumber: String, dpi: String? = nil, maxHeight: String? = nil, maxWidth: String? = nil, showChanges: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<PagesGetPageImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let pageNumberPreEscape = String(describing: pageNumber)
        let pageNumberPostEscape = pageNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pageNumber}", with: pageNumberPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var dpi: String?
                var maxHeight: String?
                var maxWidth: String?
                var showChanges: String?
            }
            try request.query.encode(QueryParams(dpi: dpi, maxHeight: maxHeight, maxWidth: maxWidth, showChanges: showChanges))

            try beforeSend(&request)
        }.flatMapThrowing { response -> PagesGetPageImage in
            switch response.status.code {
            case 200:
                return .http200(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Data.self, using: Configuration.contentConfiguration.requireDecoder(for: Data.defaultContentType)), raw: response)
            }
        }
    }

    public enum PagesGetPageImages {
        case http200(value: PageImages?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: PageImages?, raw: ClientResponse)
    }

    /**
     Returns document page image(s) based on input.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages

     Returns images of the pages in a document for display based on the parameters that you specify.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter count: (query) The maximum number of results to return. (optional)
     - parameter dpi: (query) The number of dots per inch (DPI) for the resulting images. Valid values are 1-310 DPI. The default value is 94. (optional)
     - parameter maxHeight: (query) Sets the maximum height of the returned images in pixels. (optional)
     - parameter maxWidth: (query) Sets the maximum width of the returned images in pixels. (optional)
     - parameter nocache: (query) If **true**, using cache is disabled and image information is retrieved from a database. **True** is the default value.  (optional)
     - parameter showChanges: (query) If **true**, changes display in the user interface. (optional)
     - parameter startPosition: (query) The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)
     - returns: `EventLoopFuture` of `PagesGetPageImages`
     */
    open class func pagesGetPageImages(accountId: String, documentId: String, envelopeId: String, count: String? = nil, dpi: String? = nil, maxHeight: String? = nil, maxWidth: String? = nil, nocache: String? = nil, showChanges: String? = nil, startPosition: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<PagesGetPageImages> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var count: String?
                var dpi: String?
                var maxHeight: String?
                var maxWidth: String?
                var nocache: String?
                var showChanges: String?
                var startPosition: String?
            }
            try request.query.encode(QueryParams(count: count, dpi: dpi, maxHeight: maxHeight, maxWidth: maxWidth, nocache: nocache, showChanges: showChanges, startPosition: startPosition))

            try beforeSend(&request)
        }.flatMapThrowing { response -> PagesGetPageImages in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(PageImages.self, using: Configuration.contentConfiguration.requireDecoder(for: PageImages.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(PageImages.self, using: Configuration.contentConfiguration.requireDecoder(for: PageImages.defaultContentType)), raw: response)
            }
        }
    }

    public enum PagesPutPageImage {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Rotates page image from an envelope for display.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image

     Rotates page image from an envelope for display. The page image can be rotated to the left or right.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter pageNumber: (path) The page number being accessed.
     - parameter pageRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `PagesPutPageImage`
     */
    open class func pagesPutPageImage(accountId: String, documentId: String, envelopeId: String, pageNumber: String, pageRequest: PageRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<PagesPutPageImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/pages/{pageNumber}/page_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let pageNumberPreEscape = String(describing: pageNumber)
        let pageNumberPostEscape = pageNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pageNumber}", with: pageNumberPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = pageRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> PagesPutPageImage in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    public enum RecipientsGetRecipientInitialsImage {
        case http200(value: Data?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Data?, raw: ClientResponse)
    }

    /**
     Gets the initials image for a user.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image

     Retrieves the initials image for the specified user. The image is returned in the same format as it was uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user's user id and the user must be a member of the account.  The `signatureIdOrName` paramter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that do not properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \"Bob Smith\" to \"Bob%20Smith\"  Older envelopes might only contain chromed images. If getting the non-chromed image fails, try getting the chromed image.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - parameter includeChrome: (query) The added line and identifier around the initial image. Note: Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image. (optional)
     - returns: `EventLoopFuture` of `RecipientsGetRecipientInitialsImage`
     */
    open class func recipientsGetRecipientInitialsImage(accountId: String, envelopeId: String, recipientId: String, includeChrome: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsGetRecipientInitialsImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeChrome: String?
            }
            try request.query.encode(QueryParams(includeChrome: includeChrome))

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsGetRecipientInitialsImage in
            switch response.status.code {
            case 200:
                return .http200(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Data.self, using: Configuration.contentConfiguration.requireDecoder(for: Data.defaultContentType)), raw: response)
            }
        }
    }

    public enum RecipientsGetRecipientSignature {
        case http200(value: UserSignature?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: UserSignature?, raw: ClientResponse)
    }

    /**
     Gets signature information for a signer or sign-in-person recipient.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature

     Retrieves signature information for a signer or sign-in-person recipient.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - returns: `EventLoopFuture` of `RecipientsGetRecipientSignature`
     */
    open class func recipientsGetRecipientSignature(accountId: String, envelopeId: String, recipientId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsGetRecipientSignature> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsGetRecipientSignature in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(UserSignature.self, using: Configuration.contentConfiguration.requireDecoder(for: UserSignature.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(UserSignature.self, using: Configuration.contentConfiguration.requireDecoder(for: UserSignature.defaultContentType)), raw: response)
            }
        }
    }

    public enum RecipientsGetRecipientSignatureImage {
        case http200(value: Data?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Data?, raw: ClientResponse)
    }

    /**
     Retrieve signature image information for a signer/sign-in-person recipient.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image

     Retrieves the specified user signature image. The image is returned in the same format as uploaded. In the request you can specify if the chrome (the added line and identifier around the initial image) is returned with the image.  The userId specified in the endpoint must match the authenticated user's user ID and the user must be a member of the account.  The `signatureIdOrName` parameter accepts signature ID or signature name. DocuSign recommends you use signature ID (`signatureId`), since some names contain characters that don't properly URL encode. If you use the user name, it is likely that the name includes spaces and you might need to URL encode the name before using it in the endpoint.   For example: \"Bob Smith\" to \"Bob%20Smith\"  Older envelopes might only have chromed images. If getting the non-chromed image fails, try getting the chromed image.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - parameter includeChrome: (query) When set to **true**, the response includes the chromed version of the signature image. (optional)
     - returns: `EventLoopFuture` of `RecipientsGetRecipientSignatureImage`
     */
    open class func recipientsGetRecipientSignatureImage(accountId: String, envelopeId: String, recipientId: String, includeChrome: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsGetRecipientSignatureImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeChrome: String?
            }
            try request.query.encode(QueryParams(includeChrome: includeChrome))

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsGetRecipientSignatureImage in
            switch response.status.code {
            case 200:
                return .http200(value: Data(buffer: response.body ?? ByteBuffer()), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: try? response.content.decode(Data.self, using: Configuration.contentConfiguration.requireDecoder(for: Data.defaultContentType)), raw: response)
            }
        }
    }

    public enum RecipientsPutRecipientInitialsImage {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Sets the initials image for an accountless signer.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image

     Updates the initials image for a signer that does not have a DocuSign account. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - returns: `EventLoopFuture` of `RecipientsPutRecipientInitialsImage`
     */
    open class func recipientsPutRecipientInitialsImage(accountId: String, envelopeId: String, recipientId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsPutRecipientInitialsImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/initials_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsPutRecipientInitialsImage in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    public enum RecipientsPutRecipientSignatureImage {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Sets the signature image for an accountless signer.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image

     Updates the signature image for an accountless signer. The supported image formats for this file are: gif, png, jpeg, and bmp. The file size must be less than 200K.  For the Authentication/Authorization for this call, the credentials must match the sender of the envelope, the recipient must be an accountless signer or in person signer. The account must have the `CanSendEnvelope` property set to **true** and the `ExpressSendOnly` property in `SendingUser` structure must be set to **false**.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - returns: `EventLoopFuture` of `RecipientsPutRecipientSignatureImage`
     */
    open class func recipientsPutRecipientSignatureImage(accountId: String, envelopeId: String, recipientId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsPutRecipientSignatureImage> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/recipients/{recipientId}/signature_image"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsPutRecipientSignatureImage in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorDetails.defaultContentType)), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }
}

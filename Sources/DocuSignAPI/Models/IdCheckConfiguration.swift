//
// IdCheckConfiguration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A complex object specifying ID check configuration. */
public final class IdCheckConfiguration: Content, Hashable {
    /** A list of ID check security steps, each specifying an authorization type. */
    public var authSteps: [IdCheckSecurityStep]?
    /** Boolean that specifies whether the signature is the default signature for the user. */
    public var isDefault: String?
    /** The name of the signature. */
    public var name: String?

    public init(authSteps: [IdCheckSecurityStep]? = nil, isDefault: String? = nil, name: String? = nil) {
        self.authSteps = authSteps
        self.isDefault = isDefault
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authSteps
        case isDefault
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authSteps, forKey: .authSteps)
        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(name, forKey: .name)
    }

    public static func == (lhs: IdCheckConfiguration, rhs: IdCheckConfiguration) -> Bool {
        lhs.authSteps == rhs.authSteps &&
            lhs.isDefault == rhs.isDefault &&
            lhs.name == rhs.name
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(authSteps?.hashValue)
        hasher.combine(isDefault?.hashValue)
        hasher.combine(name?.hashValue)
    }
}

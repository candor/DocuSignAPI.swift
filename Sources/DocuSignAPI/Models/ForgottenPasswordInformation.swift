//
// ForgottenPasswordInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A complex element that has up to four Question/Answer pairs for forgotten password information. */
public final class ForgottenPasswordInformation: Content, Hashable {
    /** The answer to the first forgotten password challenge question. */
    public var forgottenPasswordAnswer1: String?
    /** The answer to the second forgotten password challenge question. */
    public var forgottenPasswordAnswer2: String?
    /** The answer to the third forgotten password challenge question. */
    public var forgottenPasswordAnswer3: String?
    /** The answer to the fourth forgotten password challenge question. */
    public var forgottenPasswordAnswer4: String?
    /** The first challenge question presented to a user who has forgotten their password. */
    public var forgottenPasswordQuestion1: String?
    /** The second challenge question presented to a user who has forgotten their password. */
    public var forgottenPasswordQuestion2: String?
    /** The third challenge question presented to a user who has forgotten their password. */
    public var forgottenPasswordQuestion3: String?
    /** The fourth challenge question presented to a user who has forgotten their password. */
    public var forgottenPasswordQuestion4: String?

    public init(forgottenPasswordAnswer1: String? = nil, forgottenPasswordAnswer2: String? = nil, forgottenPasswordAnswer3: String? = nil, forgottenPasswordAnswer4: String? = nil, forgottenPasswordQuestion1: String? = nil, forgottenPasswordQuestion2: String? = nil, forgottenPasswordQuestion3: String? = nil, forgottenPasswordQuestion4: String? = nil) {
        self.forgottenPasswordAnswer1 = forgottenPasswordAnswer1
        self.forgottenPasswordAnswer2 = forgottenPasswordAnswer2
        self.forgottenPasswordAnswer3 = forgottenPasswordAnswer3
        self.forgottenPasswordAnswer4 = forgottenPasswordAnswer4
        self.forgottenPasswordQuestion1 = forgottenPasswordQuestion1
        self.forgottenPasswordQuestion2 = forgottenPasswordQuestion2
        self.forgottenPasswordQuestion3 = forgottenPasswordQuestion3
        self.forgottenPasswordQuestion4 = forgottenPasswordQuestion4
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case forgottenPasswordAnswer1
        case forgottenPasswordAnswer2
        case forgottenPasswordAnswer3
        case forgottenPasswordAnswer4
        case forgottenPasswordQuestion1
        case forgottenPasswordQuestion2
        case forgottenPasswordQuestion3
        case forgottenPasswordQuestion4
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(forgottenPasswordAnswer1, forKey: .forgottenPasswordAnswer1)
        try container.encodeIfPresent(forgottenPasswordAnswer2, forKey: .forgottenPasswordAnswer2)
        try container.encodeIfPresent(forgottenPasswordAnswer3, forKey: .forgottenPasswordAnswer3)
        try container.encodeIfPresent(forgottenPasswordAnswer4, forKey: .forgottenPasswordAnswer4)
        try container.encodeIfPresent(forgottenPasswordQuestion1, forKey: .forgottenPasswordQuestion1)
        try container.encodeIfPresent(forgottenPasswordQuestion2, forKey: .forgottenPasswordQuestion2)
        try container.encodeIfPresent(forgottenPasswordQuestion3, forKey: .forgottenPasswordQuestion3)
        try container.encodeIfPresent(forgottenPasswordQuestion4, forKey: .forgottenPasswordQuestion4)
    }

    public static func == (lhs: ForgottenPasswordInformation, rhs: ForgottenPasswordInformation) -> Bool {
        lhs.forgottenPasswordAnswer1 == rhs.forgottenPasswordAnswer1 &&
            lhs.forgottenPasswordAnswer2 == rhs.forgottenPasswordAnswer2 &&
            lhs.forgottenPasswordAnswer3 == rhs.forgottenPasswordAnswer3 &&
            lhs.forgottenPasswordAnswer4 == rhs.forgottenPasswordAnswer4 &&
            lhs.forgottenPasswordQuestion1 == rhs.forgottenPasswordQuestion1 &&
            lhs.forgottenPasswordQuestion2 == rhs.forgottenPasswordQuestion2 &&
            lhs.forgottenPasswordQuestion3 == rhs.forgottenPasswordQuestion3 &&
            lhs.forgottenPasswordQuestion4 == rhs.forgottenPasswordQuestion4
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(forgottenPasswordAnswer1?.hashValue)
        hasher.combine(forgottenPasswordAnswer2?.hashValue)
        hasher.combine(forgottenPasswordAnswer3?.hashValue)
        hasher.combine(forgottenPasswordAnswer4?.hashValue)
        hasher.combine(forgottenPasswordQuestion1?.hashValue)
        hasher.combine(forgottenPasswordQuestion2?.hashValue)
        hasher.combine(forgottenPasswordQuestion3?.hashValue)
        hasher.combine(forgottenPasswordQuestion4?.hashValue)
    }
}

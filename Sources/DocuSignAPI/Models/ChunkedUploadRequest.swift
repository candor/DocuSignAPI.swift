//
// ChunkedUploadRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** This is the request object for uploading a chunked upload. */
public final class ChunkedUploadRequest: Content, Hashable {
    /** The id of the chunked upload.  **Note**: This property is ignored in requests, and overridden with an auto-generated value in responses. */
    public var chunkedUploadId: String?
    /** A Base64-encoded representation of the content hat is used to upload the file.   Maximum size: 50 MB. However, data is also subject to REST API limits regarding request sizes, and Internet Information Systems (IIS) might place further constraints on file size. */
    public var data: String?

    public init(chunkedUploadId: String? = nil, data: String? = nil) {
        self.chunkedUploadId = chunkedUploadId
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case chunkedUploadId
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(chunkedUploadId, forKey: .chunkedUploadId)
        try container.encodeIfPresent(data, forKey: .data)
    }

    public static func == (lhs: ChunkedUploadRequest, rhs: ChunkedUploadRequest) -> Bool {
        lhs.chunkedUploadId == rhs.chunkedUploadId &&
            lhs.data == rhs.data
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(chunkedUploadId?.hashValue)
        hasher.combine(data?.hashValue)
    }
}

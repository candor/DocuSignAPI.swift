//
// FormDataItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class FormDataItem: Content, Hashable {
    public var errorDetails: ErrorDetails?
    /** The selected value in a list. */
    public var listSelectedValue: String?
    /** The name of the form field. */
    public var name: String?
    /** The initial value associated with the form field. */
    public var originalValue: String?
    /** The current value associated with the form field. */
    public var value: String?

    public init(errorDetails: ErrorDetails? = nil, listSelectedValue: String? = nil, name: String? = nil, originalValue: String? = nil, value: String? = nil) {
        self.errorDetails = errorDetails
        self.listSelectedValue = listSelectedValue
        self.name = name
        self.originalValue = originalValue
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorDetails
        case listSelectedValue
        case name
        case originalValue
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(listSelectedValue, forKey: .listSelectedValue)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(originalValue, forKey: .originalValue)
        try container.encodeIfPresent(value, forKey: .value)
    }

    public static func == (lhs: FormDataItem, rhs: FormDataItem) -> Bool {
        lhs.errorDetails == rhs.errorDetails &&
            lhs.listSelectedValue == rhs.listSelectedValue &&
            lhs.name == rhs.name &&
            lhs.originalValue == rhs.originalValue &&
            lhs.value == rhs.value
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(listSelectedValue?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(originalValue?.hashValue)
        hasher.combine(value?.hashValue)
    }
}

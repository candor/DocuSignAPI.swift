//
// Workspace.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A DocuSign workspace is a collaboration area for sharing files and data. */
public final class Workspace: Content, Hashable {
    /** The id of the account to bill. */
    public var billableAccountId: String?
    public var callerInformation: WorkspaceUser?
    /** The UTC DateTime when the workspace user authorization was created. */
    public var created: String?
    public var createdByInformation: WorkspaceUser?
    /** The UTC date and time that the comment was last updated.  **Note**: This can only be done by the creator. */
    public var lastModified: String?
    public var lastModifiedByInformation: WorkspaceUser?
    public var settings: WorkspaceSettings?
    /** The status of the item. */
    public var status: String?
    /** The relative URL for accessing the workspace. */
    public var workspaceBaseUrl: String?
    /** Text describing the purpose of the workspace. */
    public var workspaceDescription: String?
    /** The id of the workspace. */
    public var workspaceId: String?
    /** The name of the workspace. */
    public var workspaceName: String?
    /** The relative URI for accessing the workspace. */
    public var workspaceUri: String?

    public init(billableAccountId: String? = nil, callerInformation: WorkspaceUser? = nil, created: String? = nil, createdByInformation: WorkspaceUser? = nil, lastModified: String? = nil, lastModifiedByInformation: WorkspaceUser? = nil, settings: WorkspaceSettings? = nil, status: String? = nil, workspaceBaseUrl: String? = nil, workspaceDescription: String? = nil, workspaceId: String? = nil, workspaceName: String? = nil, workspaceUri: String? = nil) {
        self.billableAccountId = billableAccountId
        self.callerInformation = callerInformation
        self.created = created
        self.createdByInformation = createdByInformation
        self.lastModified = lastModified
        self.lastModifiedByInformation = lastModifiedByInformation
        self.settings = settings
        self.status = status
        self.workspaceBaseUrl = workspaceBaseUrl
        self.workspaceDescription = workspaceDescription
        self.workspaceId = workspaceId
        self.workspaceName = workspaceName
        self.workspaceUri = workspaceUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case billableAccountId
        case callerInformation
        case created
        case createdByInformation
        case lastModified
        case lastModifiedByInformation
        case settings
        case status
        case workspaceBaseUrl
        case workspaceDescription
        case workspaceId
        case workspaceName
        case workspaceUri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(billableAccountId, forKey: .billableAccountId)
        try container.encodeIfPresent(callerInformation, forKey: .callerInformation)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdByInformation, forKey: .createdByInformation)
        try container.encodeIfPresent(lastModified, forKey: .lastModified)
        try container.encodeIfPresent(lastModifiedByInformation, forKey: .lastModifiedByInformation)
        try container.encodeIfPresent(settings, forKey: .settings)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(workspaceBaseUrl, forKey: .workspaceBaseUrl)
        try container.encodeIfPresent(workspaceDescription, forKey: .workspaceDescription)
        try container.encodeIfPresent(workspaceId, forKey: .workspaceId)
        try container.encodeIfPresent(workspaceName, forKey: .workspaceName)
        try container.encodeIfPresent(workspaceUri, forKey: .workspaceUri)
    }

    public static func == (lhs: Workspace, rhs: Workspace) -> Bool {
        lhs.billableAccountId == rhs.billableAccountId &&
            lhs.callerInformation == rhs.callerInformation &&
            lhs.created == rhs.created &&
            lhs.createdByInformation == rhs.createdByInformation &&
            lhs.lastModified == rhs.lastModified &&
            lhs.lastModifiedByInformation == rhs.lastModifiedByInformation &&
            lhs.settings == rhs.settings &&
            lhs.status == rhs.status &&
            lhs.workspaceBaseUrl == rhs.workspaceBaseUrl &&
            lhs.workspaceDescription == rhs.workspaceDescription &&
            lhs.workspaceId == rhs.workspaceId &&
            lhs.workspaceName == rhs.workspaceName &&
            lhs.workspaceUri == rhs.workspaceUri
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(billableAccountId?.hashValue)
        hasher.combine(callerInformation?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(createdByInformation?.hashValue)
        hasher.combine(lastModified?.hashValue)
        hasher.combine(lastModifiedByInformation?.hashValue)
        hasher.combine(settings?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(workspaceBaseUrl?.hashValue)
        hasher.combine(workspaceDescription?.hashValue)
        hasher.combine(workspaceId?.hashValue)
        hasher.combine(workspaceName?.hashValue)
        hasher.combine(workspaceUri?.hashValue)
    }
}

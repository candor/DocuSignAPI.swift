//
// BillingPaymentItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BillingPaymentItem: Content, Hashable {
    /** The total amount of the purchase. */
    public var amount: String?
    /** A sender-defined description of the line item.  */
    public var description: String?
    /**  */
    public var paymentDate: String?
    /**  */
    public var paymentId: String?
    /** When set to **true**, a PDF version of the invoice is available.   To get the PDF, make the call again and change \"Accept:\" in the header to \"Accept: application/pdf\". */
    public var paymentNumber: String?

    public init(amount: String? = nil, description: String? = nil, paymentDate: String? = nil, paymentId: String? = nil, paymentNumber: String? = nil) {
        self.amount = amount
        self.description = description
        self.paymentDate = paymentDate
        self.paymentId = paymentId
        self.paymentNumber = paymentNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case description
        case paymentDate
        case paymentId
        case paymentNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(paymentDate, forKey: .paymentDate)
        try container.encodeIfPresent(paymentId, forKey: .paymentId)
        try container.encodeIfPresent(paymentNumber, forKey: .paymentNumber)
    }

    public static func == (lhs: BillingPaymentItem, rhs: BillingPaymentItem) -> Bool {
        lhs.amount == rhs.amount &&
            lhs.description == rhs.description &&
            lhs.paymentDate == rhs.paymentDate &&
            lhs.paymentId == rhs.paymentId &&
            lhs.paymentNumber == rhs.paymentNumber
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amount?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(paymentDate?.hashValue)
        hasher.combine(paymentId?.hashValue)
        hasher.combine(paymentNumber?.hashValue)
    }
}

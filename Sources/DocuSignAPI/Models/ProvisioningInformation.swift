//
// ProvisioningInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ProvisioningInformation: Content, Hashable {
    /**  */
    public var defaultConnectionId: String?
    /**  */
    public var defaultPlanId: String?
    /** The code that identifies the billing plan groups and plans for the new account. */
    public var distributorCode: String?
    /** The password for the `distributorCode`. */
    public var distributorPassword: String?
    /**  */
    public var passwordRuleText: String?
    /**  */
    public var planPromotionText: String?
    /**  */
    public var purchaseOrderOrPromAllowed: String?

    public init(defaultConnectionId: String? = nil, defaultPlanId: String? = nil, distributorCode: String? = nil, distributorPassword: String? = nil, passwordRuleText: String? = nil, planPromotionText: String? = nil, purchaseOrderOrPromAllowed: String? = nil) {
        self.defaultConnectionId = defaultConnectionId
        self.defaultPlanId = defaultPlanId
        self.distributorCode = distributorCode
        self.distributorPassword = distributorPassword
        self.passwordRuleText = passwordRuleText
        self.planPromotionText = planPromotionText
        self.purchaseOrderOrPromAllowed = purchaseOrderOrPromAllowed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case defaultConnectionId
        case defaultPlanId
        case distributorCode
        case distributorPassword
        case passwordRuleText
        case planPromotionText
        case purchaseOrderOrPromAllowed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(defaultConnectionId, forKey: .defaultConnectionId)
        try container.encodeIfPresent(defaultPlanId, forKey: .defaultPlanId)
        try container.encodeIfPresent(distributorCode, forKey: .distributorCode)
        try container.encodeIfPresent(distributorPassword, forKey: .distributorPassword)
        try container.encodeIfPresent(passwordRuleText, forKey: .passwordRuleText)
        try container.encodeIfPresent(planPromotionText, forKey: .planPromotionText)
        try container.encodeIfPresent(purchaseOrderOrPromAllowed, forKey: .purchaseOrderOrPromAllowed)
    }

    public static func == (lhs: ProvisioningInformation, rhs: ProvisioningInformation) -> Bool {
        lhs.defaultConnectionId == rhs.defaultConnectionId &&
            lhs.defaultPlanId == rhs.defaultPlanId &&
            lhs.distributorCode == rhs.distributorCode &&
            lhs.distributorPassword == rhs.distributorPassword &&
            lhs.passwordRuleText == rhs.passwordRuleText &&
            lhs.planPromotionText == rhs.planPromotionText &&
            lhs.purchaseOrderOrPromAllowed == rhs.purchaseOrderOrPromAllowed
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(defaultConnectionId?.hashValue)
        hasher.combine(defaultPlanId?.hashValue)
        hasher.combine(distributorCode?.hashValue)
        hasher.combine(distributorPassword?.hashValue)
        hasher.combine(passwordRuleText?.hashValue)
        hasher.combine(planPromotionText?.hashValue)
        hasher.combine(purchaseOrderOrPromAllowed?.hashValue)
    }
}

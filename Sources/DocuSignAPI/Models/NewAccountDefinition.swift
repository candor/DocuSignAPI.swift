//
// NewAccountDefinition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class NewAccountDefinition: Content, Hashable {
    /** The account name for the new account. */
    public var accountName: String?
    public var accountSettings: AccountSettingsInformation?
    public var addressInformation: AccountAddress?
    public var creditCardInformation: CreditCardInformation?
    public var directDebitProcessorInformation: DirectDebitProcessorInformation?
    /** The Distributor Code that you received from DocuSign. */
    public var distributorCode: String?
    /** The password for the `distributorCode`. */
    public var distributorPassword: String?
    /** Reserved for DocuSign. */
    public var envelopePartitionId: String?
    public var initialUser: UserInformation?
    /** The payment method used for the billing plan. Valid values are:  - `NotSupported` - `CreditCard` - `PurchaseOrder` - `Premium` - `Freemium` - `FreeTrial` - `AppStore` - `DigitalExternal` - `DirectDebit` */
    public var paymentMethod: String?
    public var paymentProcessorInformation: PaymentProcessorInformation?
    public var planInformation: PlanInformation?
    public var referralInformation: ReferralInformation?
    public var socialAccountInformation: SocialAccountInformation?

    public init(accountName: String? = nil, accountSettings: AccountSettingsInformation? = nil, addressInformation: AccountAddress? = nil, creditCardInformation: CreditCardInformation? = nil, directDebitProcessorInformation: DirectDebitProcessorInformation? = nil, distributorCode: String? = nil, distributorPassword: String? = nil, envelopePartitionId: String? = nil, initialUser: UserInformation? = nil, paymentMethod: String? = nil, paymentProcessorInformation: PaymentProcessorInformation? = nil, planInformation: PlanInformation? = nil, referralInformation: ReferralInformation? = nil, socialAccountInformation: SocialAccountInformation? = nil) {
        self.accountName = accountName
        self.accountSettings = accountSettings
        self.addressInformation = addressInformation
        self.creditCardInformation = creditCardInformation
        self.directDebitProcessorInformation = directDebitProcessorInformation
        self.distributorCode = distributorCode
        self.distributorPassword = distributorPassword
        self.envelopePartitionId = envelopePartitionId
        self.initialUser = initialUser
        self.paymentMethod = paymentMethod
        self.paymentProcessorInformation = paymentProcessorInformation
        self.planInformation = planInformation
        self.referralInformation = referralInformation
        self.socialAccountInformation = socialAccountInformation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountName
        case accountSettings
        case addressInformation
        case creditCardInformation
        case directDebitProcessorInformation
        case distributorCode
        case distributorPassword
        case envelopePartitionId
        case initialUser
        case paymentMethod
        case paymentProcessorInformation
        case planInformation
        case referralInformation
        case socialAccountInformation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(accountSettings, forKey: .accountSettings)
        try container.encodeIfPresent(addressInformation, forKey: .addressInformation)
        try container.encodeIfPresent(creditCardInformation, forKey: .creditCardInformation)
        try container.encodeIfPresent(directDebitProcessorInformation, forKey: .directDebitProcessorInformation)
        try container.encodeIfPresent(distributorCode, forKey: .distributorCode)
        try container.encodeIfPresent(distributorPassword, forKey: .distributorPassword)
        try container.encodeIfPresent(envelopePartitionId, forKey: .envelopePartitionId)
        try container.encodeIfPresent(initialUser, forKey: .initialUser)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(paymentProcessorInformation, forKey: .paymentProcessorInformation)
        try container.encodeIfPresent(planInformation, forKey: .planInformation)
        try container.encodeIfPresent(referralInformation, forKey: .referralInformation)
        try container.encodeIfPresent(socialAccountInformation, forKey: .socialAccountInformation)
    }

    public static func == (lhs: NewAccountDefinition, rhs: NewAccountDefinition) -> Bool {
        lhs.accountName == rhs.accountName &&
            lhs.accountSettings == rhs.accountSettings &&
            lhs.addressInformation == rhs.addressInformation &&
            lhs.creditCardInformation == rhs.creditCardInformation &&
            lhs.directDebitProcessorInformation == rhs.directDebitProcessorInformation &&
            lhs.distributorCode == rhs.distributorCode &&
            lhs.distributorPassword == rhs.distributorPassword &&
            lhs.envelopePartitionId == rhs.envelopePartitionId &&
            lhs.initialUser == rhs.initialUser &&
            lhs.paymentMethod == rhs.paymentMethod &&
            lhs.paymentProcessorInformation == rhs.paymentProcessorInformation &&
            lhs.planInformation == rhs.planInformation &&
            lhs.referralInformation == rhs.referralInformation &&
            lhs.socialAccountInformation == rhs.socialAccountInformation
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountName?.hashValue)
        hasher.combine(accountSettings?.hashValue)
        hasher.combine(addressInformation?.hashValue)
        hasher.combine(creditCardInformation?.hashValue)
        hasher.combine(directDebitProcessorInformation?.hashValue)
        hasher.combine(distributorCode?.hashValue)
        hasher.combine(distributorPassword?.hashValue)
        hasher.combine(envelopePartitionId?.hashValue)
        hasher.combine(initialUser?.hashValue)
        hasher.combine(paymentMethod?.hashValue)
        hasher.combine(paymentProcessorInformation?.hashValue)
        hasher.combine(planInformation?.hashValue)
        hasher.combine(referralInformation?.hashValue)
        hasher.combine(socialAccountInformation?.hashValue)
    }
}

//
// NotaryJurisdiction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Creating, updating, and deleting notary jurisdiction objects. */
public final class NotaryJurisdiction: Content, Hashable {
    /**  */
    public var commissionExpiration: String?
    /**  */
    public var commissionId: String?
    /**  */
    public var county: String?
    public var errorDetails: ErrorDetails?
    public var jurisdiction: Jurisdiction?
    /**  */
    public var registeredName: String?
    /**  */
    public var sealType: String?

    public init(commissionExpiration: String? = nil, commissionId: String? = nil, county: String? = nil, errorDetails: ErrorDetails? = nil, jurisdiction: Jurisdiction? = nil, registeredName: String? = nil, sealType: String? = nil) {
        self.commissionExpiration = commissionExpiration
        self.commissionId = commissionId
        self.county = county
        self.errorDetails = errorDetails
        self.jurisdiction = jurisdiction
        self.registeredName = registeredName
        self.sealType = sealType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case commissionExpiration
        case commissionId
        case county
        case errorDetails
        case jurisdiction
        case registeredName
        case sealType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(commissionExpiration, forKey: .commissionExpiration)
        try container.encodeIfPresent(commissionId, forKey: .commissionId)
        try container.encodeIfPresent(county, forKey: .county)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(jurisdiction, forKey: .jurisdiction)
        try container.encodeIfPresent(registeredName, forKey: .registeredName)
        try container.encodeIfPresent(sealType, forKey: .sealType)
    }

    public static func == (lhs: NotaryJurisdiction, rhs: NotaryJurisdiction) -> Bool {
        lhs.commissionExpiration == rhs.commissionExpiration &&
            lhs.commissionId == rhs.commissionId &&
            lhs.county == rhs.county &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.jurisdiction == rhs.jurisdiction &&
            lhs.registeredName == rhs.registeredName &&
            lhs.sealType == rhs.sealType
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(commissionExpiration?.hashValue)
        hasher.combine(commissionId?.hashValue)
        hasher.combine(county?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(jurisdiction?.hashValue)
        hasher.combine(registeredName?.hashValue)
        hasher.combine(sealType?.hashValue)
    }
}

//
// FolderSharedItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class FolderSharedItem: Content, Hashable {
    public var errorDetails: ErrorDetails?
    /** The id of the folder. */
    public var folderId: String?
    /** The name of the folder. */
    public var name: String?
    public var owner: UserInfo?
    /** The id of the parent folder. */
    public var parentFolderId: String?
    /** The URI for the parent folder. */
    public var parentFolderUri: String?
    /** Indicates how the folder is shared. Valid values are:  - `not_shared` - `shared_to` */
    public var shared: String?
    /** A list of groups that share the folder. */
    public var sharedGroups: [MemberGroupSharedItem]?
    /** A list of users that share the folder. */
    public var sharedUsers: [UserSharedItem]?
    /** A URI containing the user ID. */
    public var uri: String?
    public var user: UserInfo?

    public init(errorDetails: ErrorDetails? = nil, folderId: String? = nil, name: String? = nil, owner: UserInfo? = nil, parentFolderId: String? = nil, parentFolderUri: String? = nil, shared: String? = nil, sharedGroups: [MemberGroupSharedItem]? = nil, sharedUsers: [UserSharedItem]? = nil, uri: String? = nil, user: UserInfo? = nil) {
        self.errorDetails = errorDetails
        self.folderId = folderId
        self.name = name
        self.owner = owner
        self.parentFolderId = parentFolderId
        self.parentFolderUri = parentFolderUri
        self.shared = shared
        self.sharedGroups = sharedGroups
        self.sharedUsers = sharedUsers
        self.uri = uri
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorDetails
        case folderId
        case name
        case owner
        case parentFolderId
        case parentFolderUri
        case shared
        case sharedGroups
        case sharedUsers
        case uri
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(folderId, forKey: .folderId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(parentFolderId, forKey: .parentFolderId)
        try container.encodeIfPresent(parentFolderUri, forKey: .parentFolderUri)
        try container.encodeIfPresent(shared, forKey: .shared)
        try container.encodeIfPresent(sharedGroups, forKey: .sharedGroups)
        try container.encodeIfPresent(sharedUsers, forKey: .sharedUsers)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(user, forKey: .user)
    }

    public static func == (lhs: FolderSharedItem, rhs: FolderSharedItem) -> Bool {
        lhs.errorDetails == rhs.errorDetails &&
            lhs.folderId == rhs.folderId &&
            lhs.name == rhs.name &&
            lhs.owner == rhs.owner &&
            lhs.parentFolderId == rhs.parentFolderId &&
            lhs.parentFolderUri == rhs.parentFolderUri &&
            lhs.shared == rhs.shared &&
            lhs.sharedGroups == rhs.sharedGroups &&
            lhs.sharedUsers == rhs.sharedUsers &&
            lhs.uri == rhs.uri &&
            lhs.user == rhs.user
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(folderId?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(owner?.hashValue)
        hasher.combine(parentFolderId?.hashValue)
        hasher.combine(parentFolderUri?.hashValue)
        hasher.combine(shared?.hashValue)
        hasher.combine(sharedGroups?.hashValue)
        hasher.combine(sharedUsers?.hashValue)
        hasher.combine(uri?.hashValue)
        hasher.combine(user?.hashValue)
    }
}

//
// Jurisdiction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Describes the jurisdiction of a notary. This is read-only object. */
public final class Jurisdiction: Content, Hashable {
    /** If **true**, the seal can be generated by the platform. */
    public var allowSystemCreatedSeal: String?
    /** If **true**, the seal can be uploaded by the user. */
    public var allowUserUploadedSeal: String?
    /** If **true**, the notary's `comissionId` appears in the seal. */
    public var commissionIdInSeal: String?
    /** The county of the jurisdiction. */
    public var county: String?
    /** If **true**, the county name appears in the seal. */
    public var countyInSeal: String?
    /** If **true**, this jurisdiction is enabled. */
    public var enabled: String?
    /** The ID of the jurisdiction. The following jurisdictions are supported:  -  `5 - California` -  `6 - Colorado` -  `9 - Florida` -  `10 - Georgia` -  `12 - Idaho` -  `13 - Illinois` -  `14 - Indiana` -  `15 - Iowa` -  `17 - Kentucky` -  `23 - Minnesota` -  `25 - Missouri` -  `30 - New Jersey` -  `32 - New York` -  `33 - North Carolina` -  `35 - Ohio` -  `37 - Oregon` -  `38 - Pennsylvania` -  `40 - South Carolina` -  `43 - Texas` -  `44 - Utah` -  `47 - Washington` -  `48 - West Virginia` -  `49 - Wisconsin` -  `62 - Florida Commissioner of Deeds`  */
    public var jurisdictionId: String?
    /** The name of the jurisdiction. Typically the state name. */
    public var name: String?
    /** If **true**, the name of the notary appears in the seal. */
    public var notaryPublicInSeal: String?
    /** If **true**, the name of the state appears in the seal. */
    public var stateNameInSeal: String?

    public init(allowSystemCreatedSeal: String? = nil, allowUserUploadedSeal: String? = nil, commissionIdInSeal: String? = nil, county: String? = nil, countyInSeal: String? = nil, enabled: String? = nil, jurisdictionId: String? = nil, name: String? = nil, notaryPublicInSeal: String? = nil, stateNameInSeal: String? = nil) {
        self.allowSystemCreatedSeal = allowSystemCreatedSeal
        self.allowUserUploadedSeal = allowUserUploadedSeal
        self.commissionIdInSeal = commissionIdInSeal
        self.county = county
        self.countyInSeal = countyInSeal
        self.enabled = enabled
        self.jurisdictionId = jurisdictionId
        self.name = name
        self.notaryPublicInSeal = notaryPublicInSeal
        self.stateNameInSeal = stateNameInSeal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowSystemCreatedSeal
        case allowUserUploadedSeal
        case commissionIdInSeal
        case county
        case countyInSeal
        case enabled
        case jurisdictionId
        case name
        case notaryPublicInSeal
        case stateNameInSeal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowSystemCreatedSeal, forKey: .allowSystemCreatedSeal)
        try container.encodeIfPresent(allowUserUploadedSeal, forKey: .allowUserUploadedSeal)
        try container.encodeIfPresent(commissionIdInSeal, forKey: .commissionIdInSeal)
        try container.encodeIfPresent(county, forKey: .county)
        try container.encodeIfPresent(countyInSeal, forKey: .countyInSeal)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(jurisdictionId, forKey: .jurisdictionId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(notaryPublicInSeal, forKey: .notaryPublicInSeal)
        try container.encodeIfPresent(stateNameInSeal, forKey: .stateNameInSeal)
    }

    public static func == (lhs: Jurisdiction, rhs: Jurisdiction) -> Bool {
        lhs.allowSystemCreatedSeal == rhs.allowSystemCreatedSeal &&
            lhs.allowUserUploadedSeal == rhs.allowUserUploadedSeal &&
            lhs.commissionIdInSeal == rhs.commissionIdInSeal &&
            lhs.county == rhs.county &&
            lhs.countyInSeal == rhs.countyInSeal &&
            lhs.enabled == rhs.enabled &&
            lhs.jurisdictionId == rhs.jurisdictionId &&
            lhs.name == rhs.name &&
            lhs.notaryPublicInSeal == rhs.notaryPublicInSeal &&
            lhs.stateNameInSeal == rhs.stateNameInSeal
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(allowSystemCreatedSeal?.hashValue)
        hasher.combine(allowUserUploadedSeal?.hashValue)
        hasher.combine(commissionIdInSeal?.hashValue)
        hasher.combine(county?.hashValue)
        hasher.combine(countyInSeal?.hashValue)
        hasher.combine(enabled?.hashValue)
        hasher.combine(jurisdictionId?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(notaryPublicInSeal?.hashValue)
        hasher.combine(stateNameInSeal?.hashValue)
    }
}

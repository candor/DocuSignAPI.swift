//
// ConnectUserObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ConnectUserObject: Content, Hashable {
    /** The type of custom Connect configuration being accessed. */
    public var configurationtype: String?
    /** The ID of the custom Connect configuration being accessed. */
    public var connectId: String?
    /** Boolean value that indicates whether the custom Connect configuration is enabled or not. */
    public var enabled: String?
    /**  */
    public var hasAccess: String?
    /**  */
    public var senderSearchableItems: [String]?

    public init(configurationtype: String? = nil, connectId: String? = nil, enabled: String? = nil, hasAccess: String? = nil, senderSearchableItems: [String]? = nil) {
        self.configurationtype = configurationtype
        self.connectId = connectId
        self.enabled = enabled
        self.hasAccess = hasAccess
        self.senderSearchableItems = senderSearchableItems
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case configurationtype
        case connectId
        case enabled
        case hasAccess
        case senderSearchableItems
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(configurationtype, forKey: .configurationtype)
        try container.encodeIfPresent(connectId, forKey: .connectId)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(hasAccess, forKey: .hasAccess)
        try container.encodeIfPresent(senderSearchableItems, forKey: .senderSearchableItems)
    }

    public static func == (lhs: ConnectUserObject, rhs: ConnectUserObject) -> Bool {
        lhs.configurationtype == rhs.configurationtype &&
            lhs.connectId == rhs.connectId &&
            lhs.enabled == rhs.enabled &&
            lhs.hasAccess == rhs.hasAccess &&
            lhs.senderSearchableItems == rhs.senderSearchableItems
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(configurationtype?.hashValue)
        hasher.combine(connectId?.hashValue)
        hasher.combine(enabled?.hashValue)
        hasher.combine(hasAccess?.hashValue)
        hasher.combine(senderSearchableItems?.hashValue)
    }
}

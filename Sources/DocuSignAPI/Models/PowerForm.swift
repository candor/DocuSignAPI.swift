//
// PowerForm.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains details about a PowerForm. */
public final class PowerForm: Content, Hashable {
    /** The id of the user who created the PowerForm. */
    public var createdBy: String?
    /** The UTC DateTime when the item was created. */
    public var createdDateTime: String?
    /** The body of the email message sent to the recipients.   Maximum length: 10000 characters. */
    public var emailBody: String?
    /** The subject line of the email message that is sent to all recipients.  For information about adding merge field information to the email subject, see [Template Email Subject Merge Fields](https://developers.docusign.com/esign-rest-api/reference/Templates/Templates/create#template-email-subject-merge-fields).  */
    public var emailSubject: String?
    /** An array containing PowerForm data. */
    public var envelopes: [Envelope]?
    public var errorDetails: ErrorDetails?
    /** The instructions that display on the landing page for the first recipient. These instructions are important if the recipient accesses the PowerForm by a method other than email. If instructions are entered, they display as an introduction after the recipient accesses the PowerForm.  Limit: 2000 characters. */
    public var instructions: String?
    /** When **true**, indicates that the PowerForm is active and can be sent to recipients. This is the default value.  When **false**, the PowerForm cannot be emailed or accessed by a recipient, even if they arrive at the PowerForm URL.   If a recipient attempts to sign an inactive PowerForm, an error message informs the recipient that the document is not active and suggests that they contact the sender.  */
    public var isActive: String?
    /** The UTC DateTime when the PowerForm was last used. */
    public var lastUsed: String?
    /** The length of time before the same recipient can sign the same PowerForm. This property is used in combination with the `limitUseIntervalUnits` property. */
    public var limitUseInterval: String?
    /** When **true**, the `limitUseInterval` is enabled. */
    public var limitUseIntervalEnabled: String?
    /** The units associated with the `limitUseInterval`. Valid values are:  - `minutes` - `hours - `days` - `weeks` - `months`  For example, to limit a recipient to signing once per year, set the `limitUseInterval` to 365 and the `limitUseIntervalUnits` to `days`.  */
    public var limitUseIntervalUnits: String?
    /** When set to **true**, you can set a maximum number of uses for the PowerForm. */
    public var maxUseEnabled: String?
    /** The name of the PowerForm. */
    public var name: String?
    /** The id of the PowerForm. */
    public var powerFormId: String?
    /** The URL for the PowerForm. */
    public var powerFormUrl: String?
    /** An array of recipient objects that provides details about the recipients of the envelope. */
    public var recipients: [PowerFormRecipient]?
    /** The sender's name. */
    public var senderName: String?
    /** The id of the sender. */
    public var senderUserId: String?
    /** The signing mode to use. Valid values are:   - `email`: Verifies the recipient's identity using email authentication before the recipient can sign a document. The recipient enters their email address and then clicks **Begin Signing** to begin the signing process. The system then sends an email message with a validation code for the PowerForm to the recipient. If the recipient does not provide a valid email address, they cannot open and sign the document.   - `direct`: Does not require any verification. After a recipient enters their email address and clicks **Begin Signing**, a new browser tab opens and the recipient can immediately begin the signing process. Because the recipient's identity is not verified by using email authentication, we strongly recommend that you only use the `direct` signing mode when the PowerForm is accessible behind a secure portal where the recipient's identity is already authenticated, or where another form of authentication is specified for the recipient in the DocuSign template (for example, an access code, phone authentication, or ID check).    **Note**: In the account settings, `enablePowerFormDirect` must be **true** to use `direct` as the `signingMode`. */
    public var signingMode: String?
    /** The id of the template used to create the PowerForm. */
    public var templateId: String?
    /** The name of the template used to create the PowerForm. */
    public var templateName: String?
    /** The number of times the PowerForm has been used.  */
    public var timesUsed: String?
    /** The URI for the PowerForm. */
    public var uri: String?
    /** The number of times the PowerForm can still be used. */
    public var usesRemaining: String?

    public init(createdBy: String? = nil, createdDateTime: String? = nil, emailBody: String? = nil, emailSubject: String? = nil, envelopes: [Envelope]? = nil, errorDetails: ErrorDetails? = nil, instructions: String? = nil, isActive: String? = nil, lastUsed: String? = nil, limitUseInterval: String? = nil, limitUseIntervalEnabled: String? = nil, limitUseIntervalUnits: String? = nil, maxUseEnabled: String? = nil, name: String? = nil, powerFormId: String? = nil, powerFormUrl: String? = nil, recipients: [PowerFormRecipient]? = nil, senderName: String? = nil, senderUserId: String? = nil, signingMode: String? = nil, templateId: String? = nil, templateName: String? = nil, timesUsed: String? = nil, uri: String? = nil, usesRemaining: String? = nil) {
        self.createdBy = createdBy
        self.createdDateTime = createdDateTime
        self.emailBody = emailBody
        self.emailSubject = emailSubject
        self.envelopes = envelopes
        self.errorDetails = errorDetails
        self.instructions = instructions
        self.isActive = isActive
        self.lastUsed = lastUsed
        self.limitUseInterval = limitUseInterval
        self.limitUseIntervalEnabled = limitUseIntervalEnabled
        self.limitUseIntervalUnits = limitUseIntervalUnits
        self.maxUseEnabled = maxUseEnabled
        self.name = name
        self.powerFormId = powerFormId
        self.powerFormUrl = powerFormUrl
        self.recipients = recipients
        self.senderName = senderName
        self.senderUserId = senderUserId
        self.signingMode = signingMode
        self.templateId = templateId
        self.templateName = templateName
        self.timesUsed = timesUsed
        self.uri = uri
        self.usesRemaining = usesRemaining
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdBy
        case createdDateTime
        case emailBody
        case emailSubject
        case envelopes
        case errorDetails
        case instructions
        case isActive
        case lastUsed
        case limitUseInterval
        case limitUseIntervalEnabled
        case limitUseIntervalUnits
        case maxUseEnabled
        case name
        case powerFormId
        case powerFormUrl
        case recipients
        case senderName
        case senderUserId
        case signingMode
        case templateId
        case templateName
        case timesUsed
        case uri
        case usesRemaining
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdDateTime, forKey: .createdDateTime)
        try container.encodeIfPresent(emailBody, forKey: .emailBody)
        try container.encodeIfPresent(emailSubject, forKey: .emailSubject)
        try container.encodeIfPresent(envelopes, forKey: .envelopes)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(instructions, forKey: .instructions)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(lastUsed, forKey: .lastUsed)
        try container.encodeIfPresent(limitUseInterval, forKey: .limitUseInterval)
        try container.encodeIfPresent(limitUseIntervalEnabled, forKey: .limitUseIntervalEnabled)
        try container.encodeIfPresent(limitUseIntervalUnits, forKey: .limitUseIntervalUnits)
        try container.encodeIfPresent(maxUseEnabled, forKey: .maxUseEnabled)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(powerFormId, forKey: .powerFormId)
        try container.encodeIfPresent(powerFormUrl, forKey: .powerFormUrl)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(senderName, forKey: .senderName)
        try container.encodeIfPresent(senderUserId, forKey: .senderUserId)
        try container.encodeIfPresent(signingMode, forKey: .signingMode)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(templateName, forKey: .templateName)
        try container.encodeIfPresent(timesUsed, forKey: .timesUsed)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(usesRemaining, forKey: .usesRemaining)
    }

    public static func == (lhs: PowerForm, rhs: PowerForm) -> Bool {
        lhs.createdBy == rhs.createdBy &&
            lhs.createdDateTime == rhs.createdDateTime &&
            lhs.emailBody == rhs.emailBody &&
            lhs.emailSubject == rhs.emailSubject &&
            lhs.envelopes == rhs.envelopes &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.instructions == rhs.instructions &&
            lhs.isActive == rhs.isActive &&
            lhs.lastUsed == rhs.lastUsed &&
            lhs.limitUseInterval == rhs.limitUseInterval &&
            lhs.limitUseIntervalEnabled == rhs.limitUseIntervalEnabled &&
            lhs.limitUseIntervalUnits == rhs.limitUseIntervalUnits &&
            lhs.maxUseEnabled == rhs.maxUseEnabled &&
            lhs.name == rhs.name &&
            lhs.powerFormId == rhs.powerFormId &&
            lhs.powerFormUrl == rhs.powerFormUrl &&
            lhs.recipients == rhs.recipients &&
            lhs.senderName == rhs.senderName &&
            lhs.senderUserId == rhs.senderUserId &&
            lhs.signingMode == rhs.signingMode &&
            lhs.templateId == rhs.templateId &&
            lhs.templateName == rhs.templateName &&
            lhs.timesUsed == rhs.timesUsed &&
            lhs.uri == rhs.uri &&
            lhs.usesRemaining == rhs.usesRemaining
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdBy?.hashValue)
        hasher.combine(createdDateTime?.hashValue)
        hasher.combine(emailBody?.hashValue)
        hasher.combine(emailSubject?.hashValue)
        hasher.combine(envelopes?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(instructions?.hashValue)
        hasher.combine(isActive?.hashValue)
        hasher.combine(lastUsed?.hashValue)
        hasher.combine(limitUseInterval?.hashValue)
        hasher.combine(limitUseIntervalEnabled?.hashValue)
        hasher.combine(limitUseIntervalUnits?.hashValue)
        hasher.combine(maxUseEnabled?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(powerFormId?.hashValue)
        hasher.combine(powerFormUrl?.hashValue)
        hasher.combine(recipients?.hashValue)
        hasher.combine(senderName?.hashValue)
        hasher.combine(senderUserId?.hashValue)
        hasher.combine(signingMode?.hashValue)
        hasher.combine(templateId?.hashValue)
        hasher.combine(templateName?.hashValue)
        hasher.combine(timesUsed?.hashValue)
        hasher.combine(uri?.hashValue)
        hasher.combine(usesRemaining?.hashValue)
    }
}

//
// PathExtendedElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class PathExtendedElement: Content, Hashable {
    /**  */
    public var name: String?
    /**  */
    public var type: String?
    /**  */
    public var typeName: String?

    public init(name: String? = nil, type: String? = nil, typeName: String? = nil) {
        self.name = name
        self.type = type
        self.typeName = typeName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case type
        case typeName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeName, forKey: .typeName)
    }

    public static func == (lhs: PathExtendedElement, rhs: PathExtendedElement) -> Bool {
        lhs.name == rhs.name &&
            lhs.type == rhs.type &&
            lhs.typeName == rhs.typeName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name?.hashValue)
        hasher.combine(type?.hashValue)
        hasher.combine(typeName?.hashValue)
    }
}

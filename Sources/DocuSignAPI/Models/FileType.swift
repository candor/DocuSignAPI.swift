//
// FileType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class FileType: Content, Hashable {
    /**  */
    public var fileExtension: String?
    /** The mime-type of a file type listed in a fileTypes collection. */
    public var mimeType: String?

    public init(fileExtension: String? = nil, mimeType: String? = nil) {
        self.fileExtension = fileExtension
        self.mimeType = mimeType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileExtension
        case mimeType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fileExtension, forKey: .fileExtension)
        try container.encodeIfPresent(mimeType, forKey: .mimeType)
    }

    public static func == (lhs: FileType, rhs: FileType) -> Bool {
        lhs.fileExtension == rhs.fileExtension &&
            lhs.mimeType == rhs.mimeType
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fileExtension?.hashValue)
        hasher.combine(mimeType?.hashValue)
    }
}

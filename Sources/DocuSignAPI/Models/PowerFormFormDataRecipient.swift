//
// PowerFormFormDataRecipient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class PowerFormFormDataRecipient: Content, Hashable {
    /**  */
    public var email: String?
    /**  */
    public var formData: [NameValue]?
    /** The name of the recipient. */
    public var name: String?
    /** The unique id for the recipient. It is used by the tab element to indicate which recipient is to sign the document. */
    public var recipientId: String?

    public init(email: String? = nil, formData: [NameValue]? = nil, name: String? = nil, recipientId: String? = nil) {
        self.email = email
        self.formData = formData
        self.name = name
        self.recipientId = recipientId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case formData
        case name
        case recipientId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(formData, forKey: .formData)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
    }

    public static func == (lhs: PowerFormFormDataRecipient, rhs: PowerFormFormDataRecipient) -> Bool {
        lhs.email == rhs.email &&
            lhs.formData == rhs.formData &&
            lhs.name == rhs.name &&
            lhs.recipientId == rhs.recipientId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(email?.hashValue)
        hasher.combine(formData?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(recipientId?.hashValue)
    }
}

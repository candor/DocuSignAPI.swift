//
// CommissionState.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class CommissionState: Content, Hashable {
    /**  */
    public var anchorAllowWhiteSpaceInCharacters: String?
    public var anchorAllowWhiteSpaceInCharactersMetadata: PropertyMetadata?
    /** This property controls how [anchor tabs][AnchorTabs] are placed. When **true**, the text string in a document must match the case of the `anchorString` property for an anchor tab to be created. The default value is **false**.  For example, when set to **true**, if the anchor string is `DocuSign`, then `DocuSign` will match but `Docusign`, `docusign`, `DoCuSiGn`, etc. will not match. When set to **false**, `DocuSign`, `Docusign`, `docusign`, `DoCuSiGn`, etc. will all match.  This functionality uses the following rules:  - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:    $~><|^+=    For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`  - Strings embedded in other strings are ignored during the matching process.  - In words that have dashes, the parts separated by dashes are treated as distinct words.    Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.  - Letters with accent marks are treated as distinct characters from their unaccented counterparts.  - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.    Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.  - Unlike punctuation, numbers are not ignored when finding anchor words.    Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).  **Note**: You can only specify the value of this property in POST requests.  [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace */
    public var anchorCaseSensitive: String?
    public var anchorCaseSensitiveMetadata: PropertyMetadata?
    /** This property controls how [anchor tabs][AnchorTabs] are aligned in relation to the anchor text. Possible values are :  - `left`: Aligns the left side of the tab with the beginning of the first character of the matching anchor word. This is the default value. - `right`: Aligns the tab’s left side with the last character of the matching anchor word.  **Note**: You can only specify the value of this property in POST requests.  [AnchorTabs]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace  */
    public var anchorHorizontalAlignment: String?
    public var anchorHorizontalAlignmentMetadata: PropertyMetadata?
    /** When set to **true**, this tab is ignored if the `anchorString` is not found in the document. */
    public var anchorIgnoreIfNotPresent: String?
    public var anchorIgnoreIfNotPresentMetadata: PropertyMetadata?
    /** When set to **true**, the text string in a document must match the value of the `anchorString` property in its entirety for an [anchor tab][AnchorTab] to be created. The default value is **false**.  For example, when set to **true**, if the input is `man` then `man` will match but `manpower`, `fireman`, and `penmanship` will not. When set to **false**, if the input is `man` then `man`, `manpower`, `fireman`, and `penmanship` will all match.  This functionality uses the following rules:  - Unless punctuation is specified in the `anchorString`, this functionality ignores punctuation and the following characters:    $~><|^+=    For example, the `anchorString` `water` will match on the string `Fetch a pail of water.`  - Strings embedded in other strings are ignored during the matching process.  - In words that have dashes, the parts separated by dashes are treated as distinct words.    Example: If the anchor string is `forget`, then an anchor tab is placed on the `forget` in `forget-me-not`, even when `anchorMatchWholeWord` is set to **true**.  - Letters with accent marks are treated as distinct characters from their unaccented counterparts.  - For single-character anchor strings, if the two characters appear right next to each other in the document, a single anchor tab is placed for both of them.    Example: If the anchor string is `i`, then only one anchor tab is placed in `skiing`.  - Unlike punctuation, numbers are not ignored when finding anchor words.    Example: If the anchor string is `cat`, then `-cat-` is matched but `1cat2` is not when `anchorMatchWholeWord` is set to **true** (its default value).   **Note**: You can only specify the value of this property in POST requests.  [AnchorTab]: https://developers.docusign.com/esign-rest-api/guides/concepts/tabs#autoplace  */
    public var anchorMatchWholeWord: String?
    public var anchorMatchWholeWordMetadata: PropertyMetadata?
    /** Specifies the string to find in the document and use as the basis for tab placement. */
    public var anchorString: String?
    public var anchorStringMetadata: PropertyMetadata?
    /** Reserved for DocuSign. */
    public var anchorTabProcessorVersion: String?
    public var anchorTabProcessorVersionMetadata: PropertyMetadata?
    /** Specifies units of the `anchorXOffset` and `anchorYOffset`. Valid units are:  - `pixels` - `inches` - `mms` - `cms`  */
    public var anchorUnits: String?
    public var anchorUnitsMetadata: PropertyMetadata?
    /** Specifies the X axis location of the tab in `anchorUnits` relative to the `anchorString`.  */
    public var anchorXOffset: String?
    public var anchorXOffsetMetadata: PropertyMetadata?
    /** Specifies the Y axis location of the tab in `anchorUnits` relative to the `anchorString`.  */
    public var anchorYOffset: String?
    public var anchorYOffsetMetadata: PropertyMetadata?
    /** When set to **true**, the information in the tab is bold. */
    public var bold: String?
    public var boldMetadata: PropertyMetadata?
    /** When set to **true**, the field appears normally while the recipient is adding or modifying the information in the field, but the data is not visible (the characters are hidden by asterisks) to any other signer or the sender.  When an envelope is completed the information is only available to the sender through the Form Data link in the DocuSign Console. The information on the downloaded document remains masked by asterisks.  This setting applies only to text boxes and does not affect list boxes, radio buttons, or check boxes. */
    public var concealValueOnDocument: String?
    public var concealValueOnDocumentMetadata: PropertyMetadata?
    /** For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility. */
    public var conditionalParentLabel: String?
    public var conditionalParentLabelMetadata: PropertyMetadata?
    /** For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.  */
    public var conditionalParentValue: String?
    public var conditionalParentValueMetadata: PropertyMetadata?
    /** The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties. */
    public var customTabId: String?
    public var customTabIdMetadata: PropertyMetadata?
    /** When set to **true**, disables the auto sizing of single line text boxes in the signing screen when the signer enters data. If disabled users will only be able enter as much data as the text box can hold. By default this is false. This property only affects single line text boxes. */
    public var disableAutoSize: String?
    public var disableAutoSizeMetadata: PropertyMetadata?
    /** The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab. */
    public var documentId: String?
    public var documentIdMetadata: PropertyMetadata?
    public var errorDetails: ErrorDetails?
    /** The font to be used for the tab value. Supported fonts include:  - Default - Arial - ArialNarrow - Calibri - CourierNew - Garamond - Georgia - Helvetica - LucidaConsole - MSGothic - MSMincho - OCR-A - Tahoma - TimesNewRoman - Trebuchet - Verdana  */
    public var font: String?
    /** The font color to use for the information in the tab. Possible values are:   - Black - BrightBlue - BrightRed - DarkGreen - DarkRed - Gold - Green - NavyBlue - Purple - White  */
    public var fontColor: String?
    public var fontColorMetadata: PropertyMetadata?
    public var fontMetadata: PropertyMetadata?
    /** The font size used for the information in the tab. Possible values are:  - Size7 - Size8 - Size9 - Size10 - Size11 - Size12 - Size14 - Size16 - Size18 - Size20 - Size22 - Size24 - Size26 - Size28 - Size36 - Size48 - Size72 */
    public var fontSize: String?
    public var fontSizeMetadata: PropertyMetadata?
    /** An integer specifying the order in which the guided form HTML should render. The order is relative to the `formPageLabel`, the group by which to place the guided form HTML block. */
    public var formOrder: String?
    public var formOrderMetadata: PropertyMetadata?
    /** A string specifying the group in which to place the guided form HTML. Each group displays as a separate guided forms page in the signing experience. */
    public var formPageLabel: String?
    public var formPageLabelMetadata: PropertyMetadata?
    /** An integer specifying the order in which to present the guided form pages. */
    public var formPageNumber: String?
    public var formPageNumberMetadata: PropertyMetadata?
    /** The height of the tab in pixels. */
    public var height: String?
    public var heightMetadata: PropertyMetadata?
    /** When set to **true**, the information in the tab is italic. */
    public var italic: String?
    public var italicMetadata: PropertyMetadata?
    public var localePolicy: LocalePolicyTab?
    /** When set to **true**, the signer cannot change the data of the custom tab. */
    public var locked: String?
    public var lockedMetadata: PropertyMetadata?
    /** An optional value that describes the maximum length of the property when the property is a string. */
    public var maxLength: String?
    public var maxLengthMetadata: PropertyMetadata?
    public var mergeField: MergeField?
    /**  */
    public var mergeFieldXml: String?
    /**  */
    public var name: String?
    public var nameMetadata: PropertyMetadata?
    /** The initial value of the tab when it was sent to the recipient.  */
    public var originalValue: String?
    public var originalValueMetadata: PropertyMetadata?
    /** The page number being accessed. */
    public var pageNumber: String?
    public var pageNumberMetadata: PropertyMetadata?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only. */
    public var recipientIdGuid: String?
    public var recipientIdGuidMetadata: PropertyMetadata?
    public var recipientIdMetadata: PropertyMetadata?
    /** When set to **true**, the signer is required to fill out this tab. */
    public var required: String?
    public var requiredMetadata: PropertyMetadata?
    public var smartContractInformation: SmartContractInformation?
    /** The status of the item. */
    public var status: String?
    public var statusMetadata: PropertyMetadata?
    /** An array of tab group labels that uniquely identify tab groups. To assign a tab to a `tabGroup`, you assign the `TabGroupLabel` to the `Tab.TabGroupLabels` array. */
    public var tabGroupLabels: [String]?
    public var tabGroupLabelsMetadata: PropertyMetadata?
    /** The unique identifier for the tab. */
    public var tabId: String?
    public var tabIdMetadata: PropertyMetadata?
    /** The label associated with the tab. This value may be an empty string. If no value is provided, the tab type is used as the value.  Maximum Length: 500 characters.  */
    public var tabLabel: String?
    public var tabLabelMetadata: PropertyMetadata?
    /** A positive integer that sets the order the tab is navigated to during signing.  Tabs on a page are navigated to in ascending order, starting with the lowest number and moving to the highest. If two or more tabs have the same `tabOrder` value, the normal auto-navigation setting behavior for the envelope is used. */
    public var tabOrder: String?
    public var tabOrderMetadata: PropertyMetadata?
    /** Indicates the type of tab (for example, `signHere` or `initialHere`). */
    public var tabType: String?
    public var tabTypeMetadata: PropertyMetadata?
    /** When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.  */
    public var templateLocked: String?
    public var templateLockedMetadata: PropertyMetadata?
    /** When set to **true**, the sender may not remove the recipient. Used only when working with template recipients. */
    public var templateRequired: String?
    public var templateRequiredMetadata: PropertyMetadata?
    /** The text of a tooltip that appears when a user hovers over a form field or tab. */
    public var tooltip: String?
    public var toolTipMetadata: PropertyMetadata?
    /** When set to **true**, the information in the tab is underlined. */
    public var underline: String?
    public var underlineMetadata: PropertyMetadata?
    /** Specifies the value of the tab.  */
    public var value: String?
    public var valueMetadata: PropertyMetadata?
    /** The width of the tab in pixels. */
    public var width: String?
    public var widthMetadata: PropertyMetadata?
    /** This property indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position. Required. May be zero.  */
    public var xPosition: String?
    public var xPositionMetadata: PropertyMetadata?
    /** This property indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position. Required. May be zero.  */
    public var yPosition: String?
    public var yPositionMetadata: PropertyMetadata?

    public init(anchorAllowWhiteSpaceInCharacters: String? = nil, anchorAllowWhiteSpaceInCharactersMetadata: PropertyMetadata? = nil, anchorCaseSensitive: String? = nil, anchorCaseSensitiveMetadata: PropertyMetadata? = nil, anchorHorizontalAlignment: String? = nil, anchorHorizontalAlignmentMetadata: PropertyMetadata? = nil, anchorIgnoreIfNotPresent: String? = nil, anchorIgnoreIfNotPresentMetadata: PropertyMetadata? = nil, anchorMatchWholeWord: String? = nil, anchorMatchWholeWordMetadata: PropertyMetadata? = nil, anchorString: String? = nil, anchorStringMetadata: PropertyMetadata? = nil, anchorTabProcessorVersion: String? = nil, anchorTabProcessorVersionMetadata: PropertyMetadata? = nil, anchorUnits: String? = nil, anchorUnitsMetadata: PropertyMetadata? = nil, anchorXOffset: String? = nil, anchorXOffsetMetadata: PropertyMetadata? = nil, anchorYOffset: String? = nil, anchorYOffsetMetadata: PropertyMetadata? = nil, bold: String? = nil, boldMetadata: PropertyMetadata? = nil, concealValueOnDocument: String? = nil, concealValueOnDocumentMetadata: PropertyMetadata? = nil, conditionalParentLabel: String? = nil, conditionalParentLabelMetadata: PropertyMetadata? = nil, conditionalParentValue: String? = nil, conditionalParentValueMetadata: PropertyMetadata? = nil, customTabId: String? = nil, customTabIdMetadata: PropertyMetadata? = nil, disableAutoSize: String? = nil, disableAutoSizeMetadata: PropertyMetadata? = nil, documentId: String? = nil, documentIdMetadata: PropertyMetadata? = nil, errorDetails: ErrorDetails? = nil, font: String? = nil, fontColor: String? = nil, fontColorMetadata: PropertyMetadata? = nil, fontMetadata: PropertyMetadata? = nil, fontSize: String? = nil, fontSizeMetadata: PropertyMetadata? = nil, formOrder: String? = nil, formOrderMetadata: PropertyMetadata? = nil, formPageLabel: String? = nil, formPageLabelMetadata: PropertyMetadata? = nil, formPageNumber: String? = nil, formPageNumberMetadata: PropertyMetadata? = nil, height: String? = nil, heightMetadata: PropertyMetadata? = nil, italic: String? = nil, italicMetadata: PropertyMetadata? = nil, localePolicy: LocalePolicyTab? = nil, locked: String? = nil, lockedMetadata: PropertyMetadata? = nil, maxLength: String? = nil, maxLengthMetadata: PropertyMetadata? = nil, mergeField: MergeField? = nil, mergeFieldXml: String? = nil, name: String? = nil, nameMetadata: PropertyMetadata? = nil, originalValue: String? = nil, originalValueMetadata: PropertyMetadata? = nil, pageNumber: String? = nil, pageNumberMetadata: PropertyMetadata? = nil, recipientId: String? = nil, recipientIdGuid: String? = nil, recipientIdGuidMetadata: PropertyMetadata? = nil, recipientIdMetadata: PropertyMetadata? = nil, required: String? = nil, requiredMetadata: PropertyMetadata? = nil, smartContractInformation: SmartContractInformation? = nil, status: String? = nil, statusMetadata: PropertyMetadata? = nil, tabGroupLabels: [String]? = nil, tabGroupLabelsMetadata: PropertyMetadata? = nil, tabId: String? = nil, tabIdMetadata: PropertyMetadata? = nil, tabLabel: String? = nil, tabLabelMetadata: PropertyMetadata? = nil, tabOrder: String? = nil, tabOrderMetadata: PropertyMetadata? = nil, tabType: String? = nil, tabTypeMetadata: PropertyMetadata? = nil, templateLocked: String? = nil, templateLockedMetadata: PropertyMetadata? = nil, templateRequired: String? = nil, templateRequiredMetadata: PropertyMetadata? = nil, tooltip: String? = nil, toolTipMetadata: PropertyMetadata? = nil, underline: String? = nil, underlineMetadata: PropertyMetadata? = nil, value: String? = nil, valueMetadata: PropertyMetadata? = nil, width: String? = nil, widthMetadata: PropertyMetadata? = nil, xPosition: String? = nil, xPositionMetadata: PropertyMetadata? = nil, yPosition: String? = nil, yPositionMetadata: PropertyMetadata? = nil) {
        self.anchorAllowWhiteSpaceInCharacters = anchorAllowWhiteSpaceInCharacters
        self.anchorAllowWhiteSpaceInCharactersMetadata = anchorAllowWhiteSpaceInCharactersMetadata
        self.anchorCaseSensitive = anchorCaseSensitive
        self.anchorCaseSensitiveMetadata = anchorCaseSensitiveMetadata
        self.anchorHorizontalAlignment = anchorHorizontalAlignment
        self.anchorHorizontalAlignmentMetadata = anchorHorizontalAlignmentMetadata
        self.anchorIgnoreIfNotPresent = anchorIgnoreIfNotPresent
        self.anchorIgnoreIfNotPresentMetadata = anchorIgnoreIfNotPresentMetadata
        self.anchorMatchWholeWord = anchorMatchWholeWord
        self.anchorMatchWholeWordMetadata = anchorMatchWholeWordMetadata
        self.anchorString = anchorString
        self.anchorStringMetadata = anchorStringMetadata
        self.anchorTabProcessorVersion = anchorTabProcessorVersion
        self.anchorTabProcessorVersionMetadata = anchorTabProcessorVersionMetadata
        self.anchorUnits = anchorUnits
        self.anchorUnitsMetadata = anchorUnitsMetadata
        self.anchorXOffset = anchorXOffset
        self.anchorXOffsetMetadata = anchorXOffsetMetadata
        self.anchorYOffset = anchorYOffset
        self.anchorYOffsetMetadata = anchorYOffsetMetadata
        self.bold = bold
        self.boldMetadata = boldMetadata
        self.concealValueOnDocument = concealValueOnDocument
        self.concealValueOnDocumentMetadata = concealValueOnDocumentMetadata
        self.conditionalParentLabel = conditionalParentLabel
        self.conditionalParentLabelMetadata = conditionalParentLabelMetadata
        self.conditionalParentValue = conditionalParentValue
        self.conditionalParentValueMetadata = conditionalParentValueMetadata
        self.customTabId = customTabId
        self.customTabIdMetadata = customTabIdMetadata
        self.disableAutoSize = disableAutoSize
        self.disableAutoSizeMetadata = disableAutoSizeMetadata
        self.documentId = documentId
        self.documentIdMetadata = documentIdMetadata
        self.errorDetails = errorDetails
        self.font = font
        self.fontColor = fontColor
        self.fontColorMetadata = fontColorMetadata
        self.fontMetadata = fontMetadata
        self.fontSize = fontSize
        self.fontSizeMetadata = fontSizeMetadata
        self.formOrder = formOrder
        self.formOrderMetadata = formOrderMetadata
        self.formPageLabel = formPageLabel
        self.formPageLabelMetadata = formPageLabelMetadata
        self.formPageNumber = formPageNumber
        self.formPageNumberMetadata = formPageNumberMetadata
        self.height = height
        self.heightMetadata = heightMetadata
        self.italic = italic
        self.italicMetadata = italicMetadata
        self.localePolicy = localePolicy
        self.locked = locked
        self.lockedMetadata = lockedMetadata
        self.maxLength = maxLength
        self.maxLengthMetadata = maxLengthMetadata
        self.mergeField = mergeField
        self.mergeFieldXml = mergeFieldXml
        self.name = name
        self.nameMetadata = nameMetadata
        self.originalValue = originalValue
        self.originalValueMetadata = originalValueMetadata
        self.pageNumber = pageNumber
        self.pageNumberMetadata = pageNumberMetadata
        self.recipientId = recipientId
        self.recipientIdGuid = recipientIdGuid
        self.recipientIdGuidMetadata = recipientIdGuidMetadata
        self.recipientIdMetadata = recipientIdMetadata
        self.required = required
        self.requiredMetadata = requiredMetadata
        self.smartContractInformation = smartContractInformation
        self.status = status
        self.statusMetadata = statusMetadata
        self.tabGroupLabels = tabGroupLabels
        self.tabGroupLabelsMetadata = tabGroupLabelsMetadata
        self.tabId = tabId
        self.tabIdMetadata = tabIdMetadata
        self.tabLabel = tabLabel
        self.tabLabelMetadata = tabLabelMetadata
        self.tabOrder = tabOrder
        self.tabOrderMetadata = tabOrderMetadata
        self.tabType = tabType
        self.tabTypeMetadata = tabTypeMetadata
        self.templateLocked = templateLocked
        self.templateLockedMetadata = templateLockedMetadata
        self.templateRequired = templateRequired
        self.templateRequiredMetadata = templateRequiredMetadata
        self.tooltip = tooltip
        self.toolTipMetadata = toolTipMetadata
        self.underline = underline
        self.underlineMetadata = underlineMetadata
        self.value = value
        self.valueMetadata = valueMetadata
        self.width = width
        self.widthMetadata = widthMetadata
        self.xPosition = xPosition
        self.xPositionMetadata = xPositionMetadata
        self.yPosition = yPosition
        self.yPositionMetadata = yPositionMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case anchorAllowWhiteSpaceInCharacters
        case anchorAllowWhiteSpaceInCharactersMetadata
        case anchorCaseSensitive
        case anchorCaseSensitiveMetadata
        case anchorHorizontalAlignment
        case anchorHorizontalAlignmentMetadata
        case anchorIgnoreIfNotPresent
        case anchorIgnoreIfNotPresentMetadata
        case anchorMatchWholeWord
        case anchorMatchWholeWordMetadata
        case anchorString
        case anchorStringMetadata
        case anchorTabProcessorVersion
        case anchorTabProcessorVersionMetadata
        case anchorUnits
        case anchorUnitsMetadata
        case anchorXOffset
        case anchorXOffsetMetadata
        case anchorYOffset
        case anchorYOffsetMetadata
        case bold
        case boldMetadata
        case concealValueOnDocument
        case concealValueOnDocumentMetadata
        case conditionalParentLabel
        case conditionalParentLabelMetadata
        case conditionalParentValue
        case conditionalParentValueMetadata
        case customTabId
        case customTabIdMetadata
        case disableAutoSize
        case disableAutoSizeMetadata
        case documentId
        case documentIdMetadata
        case errorDetails
        case font
        case fontColor
        case fontColorMetadata
        case fontMetadata
        case fontSize
        case fontSizeMetadata
        case formOrder
        case formOrderMetadata
        case formPageLabel
        case formPageLabelMetadata
        case formPageNumber
        case formPageNumberMetadata
        case height
        case heightMetadata
        case italic
        case italicMetadata
        case localePolicy
        case locked
        case lockedMetadata
        case maxLength
        case maxLengthMetadata
        case mergeField
        case mergeFieldXml
        case name
        case nameMetadata
        case originalValue
        case originalValueMetadata
        case pageNumber
        case pageNumberMetadata
        case recipientId
        case recipientIdGuid
        case recipientIdGuidMetadata
        case recipientIdMetadata
        case required
        case requiredMetadata
        case smartContractInformation
        case status
        case statusMetadata
        case tabGroupLabels
        case tabGroupLabelsMetadata
        case tabId
        case tabIdMetadata
        case tabLabel
        case tabLabelMetadata
        case tabOrder
        case tabOrderMetadata
        case tabType
        case tabTypeMetadata
        case templateLocked
        case templateLockedMetadata
        case templateRequired
        case templateRequiredMetadata
        case tooltip
        case toolTipMetadata
        case underline
        case underlineMetadata
        case value
        case valueMetadata
        case width
        case widthMetadata
        case xPosition
        case xPositionMetadata
        case yPosition
        case yPositionMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(anchorAllowWhiteSpaceInCharacters, forKey: .anchorAllowWhiteSpaceInCharacters)
        try container.encodeIfPresent(anchorAllowWhiteSpaceInCharactersMetadata, forKey: .anchorAllowWhiteSpaceInCharactersMetadata)
        try container.encodeIfPresent(anchorCaseSensitive, forKey: .anchorCaseSensitive)
        try container.encodeIfPresent(anchorCaseSensitiveMetadata, forKey: .anchorCaseSensitiveMetadata)
        try container.encodeIfPresent(anchorHorizontalAlignment, forKey: .anchorHorizontalAlignment)
        try container.encodeIfPresent(anchorHorizontalAlignmentMetadata, forKey: .anchorHorizontalAlignmentMetadata)
        try container.encodeIfPresent(anchorIgnoreIfNotPresent, forKey: .anchorIgnoreIfNotPresent)
        try container.encodeIfPresent(anchorIgnoreIfNotPresentMetadata, forKey: .anchorIgnoreIfNotPresentMetadata)
        try container.encodeIfPresent(anchorMatchWholeWord, forKey: .anchorMatchWholeWord)
        try container.encodeIfPresent(anchorMatchWholeWordMetadata, forKey: .anchorMatchWholeWordMetadata)
        try container.encodeIfPresent(anchorString, forKey: .anchorString)
        try container.encodeIfPresent(anchorStringMetadata, forKey: .anchorStringMetadata)
        try container.encodeIfPresent(anchorTabProcessorVersion, forKey: .anchorTabProcessorVersion)
        try container.encodeIfPresent(anchorTabProcessorVersionMetadata, forKey: .anchorTabProcessorVersionMetadata)
        try container.encodeIfPresent(anchorUnits, forKey: .anchorUnits)
        try container.encodeIfPresent(anchorUnitsMetadata, forKey: .anchorUnitsMetadata)
        try container.encodeIfPresent(anchorXOffset, forKey: .anchorXOffset)
        try container.encodeIfPresent(anchorXOffsetMetadata, forKey: .anchorXOffsetMetadata)
        try container.encodeIfPresent(anchorYOffset, forKey: .anchorYOffset)
        try container.encodeIfPresent(anchorYOffsetMetadata, forKey: .anchorYOffsetMetadata)
        try container.encodeIfPresent(bold, forKey: .bold)
        try container.encodeIfPresent(boldMetadata, forKey: .boldMetadata)
        try container.encodeIfPresent(concealValueOnDocument, forKey: .concealValueOnDocument)
        try container.encodeIfPresent(concealValueOnDocumentMetadata, forKey: .concealValueOnDocumentMetadata)
        try container.encodeIfPresent(conditionalParentLabel, forKey: .conditionalParentLabel)
        try container.encodeIfPresent(conditionalParentLabelMetadata, forKey: .conditionalParentLabelMetadata)
        try container.encodeIfPresent(conditionalParentValue, forKey: .conditionalParentValue)
        try container.encodeIfPresent(conditionalParentValueMetadata, forKey: .conditionalParentValueMetadata)
        try container.encodeIfPresent(customTabId, forKey: .customTabId)
        try container.encodeIfPresent(customTabIdMetadata, forKey: .customTabIdMetadata)
        try container.encodeIfPresent(disableAutoSize, forKey: .disableAutoSize)
        try container.encodeIfPresent(disableAutoSizeMetadata, forKey: .disableAutoSizeMetadata)
        try container.encodeIfPresent(documentId, forKey: .documentId)
        try container.encodeIfPresent(documentIdMetadata, forKey: .documentIdMetadata)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(font, forKey: .font)
        try container.encodeIfPresent(fontColor, forKey: .fontColor)
        try container.encodeIfPresent(fontColorMetadata, forKey: .fontColorMetadata)
        try container.encodeIfPresent(fontMetadata, forKey: .fontMetadata)
        try container.encodeIfPresent(fontSize, forKey: .fontSize)
        try container.encodeIfPresent(fontSizeMetadata, forKey: .fontSizeMetadata)
        try container.encodeIfPresent(formOrder, forKey: .formOrder)
        try container.encodeIfPresent(formOrderMetadata, forKey: .formOrderMetadata)
        try container.encodeIfPresent(formPageLabel, forKey: .formPageLabel)
        try container.encodeIfPresent(formPageLabelMetadata, forKey: .formPageLabelMetadata)
        try container.encodeIfPresent(formPageNumber, forKey: .formPageNumber)
        try container.encodeIfPresent(formPageNumberMetadata, forKey: .formPageNumberMetadata)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(heightMetadata, forKey: .heightMetadata)
        try container.encodeIfPresent(italic, forKey: .italic)
        try container.encodeIfPresent(italicMetadata, forKey: .italicMetadata)
        try container.encodeIfPresent(localePolicy, forKey: .localePolicy)
        try container.encodeIfPresent(locked, forKey: .locked)
        try container.encodeIfPresent(lockedMetadata, forKey: .lockedMetadata)
        try container.encodeIfPresent(maxLength, forKey: .maxLength)
        try container.encodeIfPresent(maxLengthMetadata, forKey: .maxLengthMetadata)
        try container.encodeIfPresent(mergeField, forKey: .mergeField)
        try container.encodeIfPresent(mergeFieldXml, forKey: .mergeFieldXml)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(nameMetadata, forKey: .nameMetadata)
        try container.encodeIfPresent(originalValue, forKey: .originalValue)
        try container.encodeIfPresent(originalValueMetadata, forKey: .originalValueMetadata)
        try container.encodeIfPresent(pageNumber, forKey: .pageNumber)
        try container.encodeIfPresent(pageNumberMetadata, forKey: .pageNumberMetadata)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientIdGuid, forKey: .recipientIdGuid)
        try container.encodeIfPresent(recipientIdGuidMetadata, forKey: .recipientIdGuidMetadata)
        try container.encodeIfPresent(recipientIdMetadata, forKey: .recipientIdMetadata)
        try container.encodeIfPresent(required, forKey: .required)
        try container.encodeIfPresent(requiredMetadata, forKey: .requiredMetadata)
        try container.encodeIfPresent(smartContractInformation, forKey: .smartContractInformation)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusMetadata, forKey: .statusMetadata)
        try container.encodeIfPresent(tabGroupLabels, forKey: .tabGroupLabels)
        try container.encodeIfPresent(tabGroupLabelsMetadata, forKey: .tabGroupLabelsMetadata)
        try container.encodeIfPresent(tabId, forKey: .tabId)
        try container.encodeIfPresent(tabIdMetadata, forKey: .tabIdMetadata)
        try container.encodeIfPresent(tabLabel, forKey: .tabLabel)
        try container.encodeIfPresent(tabLabelMetadata, forKey: .tabLabelMetadata)
        try container.encodeIfPresent(tabOrder, forKey: .tabOrder)
        try container.encodeIfPresent(tabOrderMetadata, forKey: .tabOrderMetadata)
        try container.encodeIfPresent(tabType, forKey: .tabType)
        try container.encodeIfPresent(tabTypeMetadata, forKey: .tabTypeMetadata)
        try container.encodeIfPresent(templateLocked, forKey: .templateLocked)
        try container.encodeIfPresent(templateLockedMetadata, forKey: .templateLockedMetadata)
        try container.encodeIfPresent(templateRequired, forKey: .templateRequired)
        try container.encodeIfPresent(templateRequiredMetadata, forKey: .templateRequiredMetadata)
        try container.encodeIfPresent(tooltip, forKey: .tooltip)
        try container.encodeIfPresent(toolTipMetadata, forKey: .toolTipMetadata)
        try container.encodeIfPresent(underline, forKey: .underline)
        try container.encodeIfPresent(underlineMetadata, forKey: .underlineMetadata)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(valueMetadata, forKey: .valueMetadata)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(widthMetadata, forKey: .widthMetadata)
        try container.encodeIfPresent(xPosition, forKey: .xPosition)
        try container.encodeIfPresent(xPositionMetadata, forKey: .xPositionMetadata)
        try container.encodeIfPresent(yPosition, forKey: .yPosition)
        try container.encodeIfPresent(yPositionMetadata, forKey: .yPositionMetadata)
    }

    public static func == (lhs: CommissionState, rhs: CommissionState) -> Bool {
        lhs.anchorAllowWhiteSpaceInCharacters == rhs.anchorAllowWhiteSpaceInCharacters &&
            lhs.anchorAllowWhiteSpaceInCharactersMetadata == rhs.anchorAllowWhiteSpaceInCharactersMetadata &&
            lhs.anchorCaseSensitive == rhs.anchorCaseSensitive &&
            lhs.anchorCaseSensitiveMetadata == rhs.anchorCaseSensitiveMetadata &&
            lhs.anchorHorizontalAlignment == rhs.anchorHorizontalAlignment &&
            lhs.anchorHorizontalAlignmentMetadata == rhs.anchorHorizontalAlignmentMetadata &&
            lhs.anchorIgnoreIfNotPresent == rhs.anchorIgnoreIfNotPresent &&
            lhs.anchorIgnoreIfNotPresentMetadata == rhs.anchorIgnoreIfNotPresentMetadata &&
            lhs.anchorMatchWholeWord == rhs.anchorMatchWholeWord &&
            lhs.anchorMatchWholeWordMetadata == rhs.anchorMatchWholeWordMetadata &&
            lhs.anchorString == rhs.anchorString &&
            lhs.anchorStringMetadata == rhs.anchorStringMetadata &&
            lhs.anchorTabProcessorVersion == rhs.anchorTabProcessorVersion &&
            lhs.anchorTabProcessorVersionMetadata == rhs.anchorTabProcessorVersionMetadata &&
            lhs.anchorUnits == rhs.anchorUnits &&
            lhs.anchorUnitsMetadata == rhs.anchorUnitsMetadata &&
            lhs.anchorXOffset == rhs.anchorXOffset &&
            lhs.anchorXOffsetMetadata == rhs.anchorXOffsetMetadata &&
            lhs.anchorYOffset == rhs.anchorYOffset &&
            lhs.anchorYOffsetMetadata == rhs.anchorYOffsetMetadata &&
            lhs.bold == rhs.bold &&
            lhs.boldMetadata == rhs.boldMetadata &&
            lhs.concealValueOnDocument == rhs.concealValueOnDocument &&
            lhs.concealValueOnDocumentMetadata == rhs.concealValueOnDocumentMetadata &&
            lhs.conditionalParentLabel == rhs.conditionalParentLabel &&
            lhs.conditionalParentLabelMetadata == rhs.conditionalParentLabelMetadata &&
            lhs.conditionalParentValue == rhs.conditionalParentValue &&
            lhs.conditionalParentValueMetadata == rhs.conditionalParentValueMetadata &&
            lhs.customTabId == rhs.customTabId &&
            lhs.customTabIdMetadata == rhs.customTabIdMetadata &&
            lhs.disableAutoSize == rhs.disableAutoSize &&
            lhs.disableAutoSizeMetadata == rhs.disableAutoSizeMetadata &&
            lhs.documentId == rhs.documentId &&
            lhs.documentIdMetadata == rhs.documentIdMetadata &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.font == rhs.font &&
            lhs.fontColor == rhs.fontColor &&
            lhs.fontColorMetadata == rhs.fontColorMetadata &&
            lhs.fontMetadata == rhs.fontMetadata &&
            lhs.fontSize == rhs.fontSize &&
            lhs.fontSizeMetadata == rhs.fontSizeMetadata &&
            lhs.formOrder == rhs.formOrder &&
            lhs.formOrderMetadata == rhs.formOrderMetadata &&
            lhs.formPageLabel == rhs.formPageLabel &&
            lhs.formPageLabelMetadata == rhs.formPageLabelMetadata &&
            lhs.formPageNumber == rhs.formPageNumber &&
            lhs.formPageNumberMetadata == rhs.formPageNumberMetadata &&
            lhs.height == rhs.height &&
            lhs.heightMetadata == rhs.heightMetadata &&
            lhs.italic == rhs.italic &&
            lhs.italicMetadata == rhs.italicMetadata &&
            lhs.localePolicy == rhs.localePolicy &&
            lhs.locked == rhs.locked &&
            lhs.lockedMetadata == rhs.lockedMetadata &&
            lhs.maxLength == rhs.maxLength &&
            lhs.maxLengthMetadata == rhs.maxLengthMetadata &&
            lhs.mergeField == rhs.mergeField &&
            lhs.mergeFieldXml == rhs.mergeFieldXml &&
            lhs.name == rhs.name &&
            lhs.nameMetadata == rhs.nameMetadata &&
            lhs.originalValue == rhs.originalValue &&
            lhs.originalValueMetadata == rhs.originalValueMetadata &&
            lhs.pageNumber == rhs.pageNumber &&
            lhs.pageNumberMetadata == rhs.pageNumberMetadata &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientIdGuid == rhs.recipientIdGuid &&
            lhs.recipientIdGuidMetadata == rhs.recipientIdGuidMetadata &&
            lhs.recipientIdMetadata == rhs.recipientIdMetadata &&
            lhs.required == rhs.required &&
            lhs.requiredMetadata == rhs.requiredMetadata &&
            lhs.smartContractInformation == rhs.smartContractInformation &&
            lhs.status == rhs.status &&
            lhs.statusMetadata == rhs.statusMetadata &&
            lhs.tabGroupLabels == rhs.tabGroupLabels &&
            lhs.tabGroupLabelsMetadata == rhs.tabGroupLabelsMetadata &&
            lhs.tabId == rhs.tabId &&
            lhs.tabIdMetadata == rhs.tabIdMetadata &&
            lhs.tabLabel == rhs.tabLabel &&
            lhs.tabLabelMetadata == rhs.tabLabelMetadata &&
            lhs.tabOrder == rhs.tabOrder &&
            lhs.tabOrderMetadata == rhs.tabOrderMetadata &&
            lhs.tabType == rhs.tabType &&
            lhs.tabTypeMetadata == rhs.tabTypeMetadata &&
            lhs.templateLocked == rhs.templateLocked &&
            lhs.templateLockedMetadata == rhs.templateLockedMetadata &&
            lhs.templateRequired == rhs.templateRequired &&
            lhs.templateRequiredMetadata == rhs.templateRequiredMetadata &&
            lhs.tooltip == rhs.tooltip &&
            lhs.toolTipMetadata == rhs.toolTipMetadata &&
            lhs.underline == rhs.underline &&
            lhs.underlineMetadata == rhs.underlineMetadata &&
            lhs.value == rhs.value &&
            lhs.valueMetadata == rhs.valueMetadata &&
            lhs.width == rhs.width &&
            lhs.widthMetadata == rhs.widthMetadata &&
            lhs.xPosition == rhs.xPosition &&
            lhs.xPositionMetadata == rhs.xPositionMetadata &&
            lhs.yPosition == rhs.yPosition &&
            lhs.yPositionMetadata == rhs.yPositionMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(anchorAllowWhiteSpaceInCharacters?.hashValue)
        hasher.combine(anchorAllowWhiteSpaceInCharactersMetadata?.hashValue)
        hasher.combine(anchorCaseSensitive?.hashValue)
        hasher.combine(anchorCaseSensitiveMetadata?.hashValue)
        hasher.combine(anchorHorizontalAlignment?.hashValue)
        hasher.combine(anchorHorizontalAlignmentMetadata?.hashValue)
        hasher.combine(anchorIgnoreIfNotPresent?.hashValue)
        hasher.combine(anchorIgnoreIfNotPresentMetadata?.hashValue)
        hasher.combine(anchorMatchWholeWord?.hashValue)
        hasher.combine(anchorMatchWholeWordMetadata?.hashValue)
        hasher.combine(anchorString?.hashValue)
        hasher.combine(anchorStringMetadata?.hashValue)
        hasher.combine(anchorTabProcessorVersion?.hashValue)
        hasher.combine(anchorTabProcessorVersionMetadata?.hashValue)
        hasher.combine(anchorUnits?.hashValue)
        hasher.combine(anchorUnitsMetadata?.hashValue)
        hasher.combine(anchorXOffset?.hashValue)
        hasher.combine(anchorXOffsetMetadata?.hashValue)
        hasher.combine(anchorYOffset?.hashValue)
        hasher.combine(anchorYOffsetMetadata?.hashValue)
        hasher.combine(bold?.hashValue)
        hasher.combine(boldMetadata?.hashValue)
        hasher.combine(concealValueOnDocument?.hashValue)
        hasher.combine(concealValueOnDocumentMetadata?.hashValue)
        hasher.combine(conditionalParentLabel?.hashValue)
        hasher.combine(conditionalParentLabelMetadata?.hashValue)
        hasher.combine(conditionalParentValue?.hashValue)
        hasher.combine(conditionalParentValueMetadata?.hashValue)
        hasher.combine(customTabId?.hashValue)
        hasher.combine(customTabIdMetadata?.hashValue)
        hasher.combine(disableAutoSize?.hashValue)
        hasher.combine(disableAutoSizeMetadata?.hashValue)
        hasher.combine(documentId?.hashValue)
        hasher.combine(documentIdMetadata?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(font?.hashValue)
        hasher.combine(fontColor?.hashValue)
        hasher.combine(fontColorMetadata?.hashValue)
        hasher.combine(fontMetadata?.hashValue)
        hasher.combine(fontSize?.hashValue)
        hasher.combine(fontSizeMetadata?.hashValue)
        hasher.combine(formOrder?.hashValue)
        hasher.combine(formOrderMetadata?.hashValue)
        hasher.combine(formPageLabel?.hashValue)
        hasher.combine(formPageLabelMetadata?.hashValue)
        hasher.combine(formPageNumber?.hashValue)
        hasher.combine(formPageNumberMetadata?.hashValue)
        hasher.combine(height?.hashValue)
        hasher.combine(heightMetadata?.hashValue)
        hasher.combine(italic?.hashValue)
        hasher.combine(italicMetadata?.hashValue)
        hasher.combine(localePolicy?.hashValue)
        hasher.combine(locked?.hashValue)
        hasher.combine(lockedMetadata?.hashValue)
        hasher.combine(maxLength?.hashValue)
        hasher.combine(maxLengthMetadata?.hashValue)
        hasher.combine(mergeField?.hashValue)
        hasher.combine(mergeFieldXml?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(nameMetadata?.hashValue)
        hasher.combine(originalValue?.hashValue)
        hasher.combine(originalValueMetadata?.hashValue)
        hasher.combine(pageNumber?.hashValue)
        hasher.combine(pageNumberMetadata?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientIdGuid?.hashValue)
        hasher.combine(recipientIdGuidMetadata?.hashValue)
        hasher.combine(recipientIdMetadata?.hashValue)
        hasher.combine(required?.hashValue)
        hasher.combine(requiredMetadata?.hashValue)
        hasher.combine(smartContractInformation?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(statusMetadata?.hashValue)
        hasher.combine(tabGroupLabels?.hashValue)
        hasher.combine(tabGroupLabelsMetadata?.hashValue)
        hasher.combine(tabId?.hashValue)
        hasher.combine(tabIdMetadata?.hashValue)
        hasher.combine(tabLabel?.hashValue)
        hasher.combine(tabLabelMetadata?.hashValue)
        hasher.combine(tabOrder?.hashValue)
        hasher.combine(tabOrderMetadata?.hashValue)
        hasher.combine(tabType?.hashValue)
        hasher.combine(tabTypeMetadata?.hashValue)
        hasher.combine(templateLocked?.hashValue)
        hasher.combine(templateLockedMetadata?.hashValue)
        hasher.combine(templateRequired?.hashValue)
        hasher.combine(templateRequiredMetadata?.hashValue)
        hasher.combine(tooltip?.hashValue)
        hasher.combine(toolTipMetadata?.hashValue)
        hasher.combine(underline?.hashValue)
        hasher.combine(underlineMetadata?.hashValue)
        hasher.combine(value?.hashValue)
        hasher.combine(valueMetadata?.hashValue)
        hasher.combine(width?.hashValue)
        hasher.combine(widthMetadata?.hashValue)
        hasher.combine(xPosition?.hashValue)
        hasher.combine(xPositionMetadata?.hashValue)
        hasher.combine(yPosition?.hashValue)
        hasher.combine(yPositionMetadata?.hashValue)
    }
}

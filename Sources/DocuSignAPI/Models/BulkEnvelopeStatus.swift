//
// BulkEnvelopeStatus.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BulkEnvelopeStatus: Content, Hashable {
    /** Identifier used to query the status of an individual bulk recipient batch. */
    public var batchId: String?
    /** The total number of items in the batch being queried. */
    public var batchSize: String?
    /** A list of bulk envelope objects. */
    public var bulkEnvelopes: [BulkEnvelope]?
    /** URI at which you can retrieve the batch envelopes. */
    public var bulkEnvelopesBatchUri: String?
    /** The last index position in the result set.  */
    public var endPosition: String?
    /** The number of entries with a status of `failed`.  */
    public var failed: String?
    /** The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.  */
    public var nextUri: String?
    /** The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.  */
    public var previousUri: String?
    /** The number of entries with a status of `queued`. */
    public var queued: String?
    /** The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`. */
    public var resultSetSize: String?
    /** The number of entries with a status of `sent`. */
    public var sent: String?
    /** The starting index position of the current result set. */
    public var startPosition: String?
    /** The date on which the bulk envelope was created. */
    public var submittedDate: String?
    /** The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`. */
    public var totalSetSize: String?

    public init(batchId: String? = nil, batchSize: String? = nil, bulkEnvelopes: [BulkEnvelope]? = nil, bulkEnvelopesBatchUri: String? = nil, endPosition: String? = nil, failed: String? = nil, nextUri: String? = nil, previousUri: String? = nil, queued: String? = nil, resultSetSize: String? = nil, sent: String? = nil, startPosition: String? = nil, submittedDate: String? = nil, totalSetSize: String? = nil) {
        self.batchId = batchId
        self.batchSize = batchSize
        self.bulkEnvelopes = bulkEnvelopes
        self.bulkEnvelopesBatchUri = bulkEnvelopesBatchUri
        self.endPosition = endPosition
        self.failed = failed
        self.nextUri = nextUri
        self.previousUri = previousUri
        self.queued = queued
        self.resultSetSize = resultSetSize
        self.sent = sent
        self.startPosition = startPosition
        self.submittedDate = submittedDate
        self.totalSetSize = totalSetSize
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchId
        case batchSize
        case bulkEnvelopes
        case bulkEnvelopesBatchUri
        case endPosition
        case failed
        case nextUri
        case previousUri
        case queued
        case resultSetSize
        case sent
        case startPosition
        case submittedDate
        case totalSetSize
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(batchSize, forKey: .batchSize)
        try container.encodeIfPresent(bulkEnvelopes, forKey: .bulkEnvelopes)
        try container.encodeIfPresent(bulkEnvelopesBatchUri, forKey: .bulkEnvelopesBatchUri)
        try container.encodeIfPresent(endPosition, forKey: .endPosition)
        try container.encodeIfPresent(failed, forKey: .failed)
        try container.encodeIfPresent(nextUri, forKey: .nextUri)
        try container.encodeIfPresent(previousUri, forKey: .previousUri)
        try container.encodeIfPresent(queued, forKey: .queued)
        try container.encodeIfPresent(resultSetSize, forKey: .resultSetSize)
        try container.encodeIfPresent(sent, forKey: .sent)
        try container.encodeIfPresent(startPosition, forKey: .startPosition)
        try container.encodeIfPresent(submittedDate, forKey: .submittedDate)
        try container.encodeIfPresent(totalSetSize, forKey: .totalSetSize)
    }

    public static func == (lhs: BulkEnvelopeStatus, rhs: BulkEnvelopeStatus) -> Bool {
        lhs.batchId == rhs.batchId &&
            lhs.batchSize == rhs.batchSize &&
            lhs.bulkEnvelopes == rhs.bulkEnvelopes &&
            lhs.bulkEnvelopesBatchUri == rhs.bulkEnvelopesBatchUri &&
            lhs.endPosition == rhs.endPosition &&
            lhs.failed == rhs.failed &&
            lhs.nextUri == rhs.nextUri &&
            lhs.previousUri == rhs.previousUri &&
            lhs.queued == rhs.queued &&
            lhs.resultSetSize == rhs.resultSetSize &&
            lhs.sent == rhs.sent &&
            lhs.startPosition == rhs.startPosition &&
            lhs.submittedDate == rhs.submittedDate &&
            lhs.totalSetSize == rhs.totalSetSize
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(batchId?.hashValue)
        hasher.combine(batchSize?.hashValue)
        hasher.combine(bulkEnvelopes?.hashValue)
        hasher.combine(bulkEnvelopesBatchUri?.hashValue)
        hasher.combine(endPosition?.hashValue)
        hasher.combine(failed?.hashValue)
        hasher.combine(nextUri?.hashValue)
        hasher.combine(previousUri?.hashValue)
        hasher.combine(queued?.hashValue)
        hasher.combine(resultSetSize?.hashValue)
        hasher.combine(sent?.hashValue)
        hasher.combine(startPosition?.hashValue)
        hasher.combine(submittedDate?.hashValue)
        hasher.combine(totalSetSize?.hashValue)
    }
}

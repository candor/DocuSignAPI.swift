//
// CommentPublish.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class CommentPublish: Content, Hashable {
    /** A unique ID for the Salesforce object. */
    public var id: String?
    /** An array of userIds that are mentioned directly in the body of a comment. */
    public var mentions: [String]?
    /** Specifies the text that is shown in the dropdown list.  */
    public var text: String?
    /**  */
    public var threadAnchorKeys: [String: String]?
    /** The unique identifier for the comment thread. */
    public var threadId: String?
    /**  */
    public var visibleTo: [String]?

    public init(id: String? = nil, mentions: [String]? = nil, text: String? = nil, threadAnchorKeys: [String: String]? = nil, threadId: String? = nil, visibleTo: [String]? = nil) {
        self.id = id
        self.mentions = mentions
        self.text = text
        self.threadAnchorKeys = threadAnchorKeys
        self.threadId = threadId
        self.visibleTo = visibleTo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case mentions
        case text
        case threadAnchorKeys
        case threadId
        case visibleTo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(mentions, forKey: .mentions)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(threadAnchorKeys, forKey: .threadAnchorKeys)
        try container.encodeIfPresent(threadId, forKey: .threadId)
        try container.encodeIfPresent(visibleTo, forKey: .visibleTo)
    }

    public static func == (lhs: CommentPublish, rhs: CommentPublish) -> Bool {
        lhs.id == rhs.id &&
            lhs.mentions == rhs.mentions &&
            lhs.text == rhs.text &&
            lhs.threadAnchorKeys == rhs.threadAnchorKeys &&
            lhs.threadId == rhs.threadId &&
            lhs.visibleTo == rhs.visibleTo
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id?.hashValue)
        hasher.combine(mentions?.hashValue)
        hasher.combine(text?.hashValue)
        hasher.combine(threadAnchorKeys?.hashValue)
        hasher.combine(threadId?.hashValue)
        hasher.combine(visibleTo?.hashValue)
    }
}

//
// BrandsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BrandsResponse: Content, Hashable {
    /** A list of brands. */
    public var brands: [Brand]?
    /** The brand that envelope recipients see when a brand is not explicitly set. */
    public var recipientBrandIdDefault: String?
    /** The brand that envelope senders see when a brand is not explicitly set. */
    public var senderBrandIdDefault: String?

    public init(brands: [Brand]? = nil, recipientBrandIdDefault: String? = nil, senderBrandIdDefault: String? = nil) {
        self.brands = brands
        self.recipientBrandIdDefault = recipientBrandIdDefault
        self.senderBrandIdDefault = senderBrandIdDefault
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case brands
        case recipientBrandIdDefault
        case senderBrandIdDefault
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(brands, forKey: .brands)
        try container.encodeIfPresent(recipientBrandIdDefault, forKey: .recipientBrandIdDefault)
        try container.encodeIfPresent(senderBrandIdDefault, forKey: .senderBrandIdDefault)
    }

    public static func == (lhs: BrandsResponse, rhs: BrandsResponse) -> Bool {
        lhs.brands == rhs.brands &&
            lhs.recipientBrandIdDefault == rhs.recipientBrandIdDefault &&
            lhs.senderBrandIdDefault == rhs.senderBrandIdDefault
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(brands?.hashValue)
        hasher.combine(recipientBrandIdDefault?.hashValue)
        hasher.combine(senderBrandIdDefault?.hashValue)
    }
}

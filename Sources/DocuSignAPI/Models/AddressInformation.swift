//
// AddressInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains address information. */
public final class AddressInformation: Content, Hashable {
    /** The first line of the user's address. Maximum length: 100 characters. */
    public var address1: String?
    /** The second line of the user's address. Maximum length: 100 characters. */
    public var address2: String?
    /** The user's city. Maximum length: 40 characters. */
    public var city: String?
    /** The user's country. Maximum length: 50 characters. */
    public var country: String?
    /** A fax number associated with the address, if one is available. */
    public var fax: String?
    /** A phone number associated with the address. */
    public var phone: String?
    /** The user's postal code. Maximum length: 20 characters. */
    public var postalCode: String?
    /** The user's state or province. Maximum length: 40 characters. */
    public var stateOrProvince: String?
    /**  */
    public var zipPlus4: String?

    public init(address1: String? = nil, address2: String? = nil, city: String? = nil, country: String? = nil, fax: String? = nil, phone: String? = nil, postalCode: String? = nil, stateOrProvince: String? = nil, zipPlus4: String? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.country = country
        self.fax = fax
        self.phone = phone
        self.postalCode = postalCode
        self.stateOrProvince = stateOrProvince
        self.zipPlus4 = zipPlus4
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address1
        case address2
        case city
        case country
        case fax
        case phone
        case postalCode
        case stateOrProvince
        case zipPlus4
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(fax, forKey: .fax)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(stateOrProvince, forKey: .stateOrProvince)
        try container.encodeIfPresent(zipPlus4, forKey: .zipPlus4)
    }

    public static func == (lhs: AddressInformation, rhs: AddressInformation) -> Bool {
        lhs.address1 == rhs.address1 &&
            lhs.address2 == rhs.address2 &&
            lhs.city == rhs.city &&
            lhs.country == rhs.country &&
            lhs.fax == rhs.fax &&
            lhs.phone == rhs.phone &&
            lhs.postalCode == rhs.postalCode &&
            lhs.stateOrProvince == rhs.stateOrProvince &&
            lhs.zipPlus4 == rhs.zipPlus4
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address1?.hashValue)
        hasher.combine(address2?.hashValue)
        hasher.combine(city?.hashValue)
        hasher.combine(country?.hashValue)
        hasher.combine(fax?.hashValue)
        hasher.combine(phone?.hashValue)
        hasher.combine(postalCode?.hashValue)
        hasher.combine(stateOrProvince?.hashValue)
        hasher.combine(zipPlus4?.hashValue)
    }
}

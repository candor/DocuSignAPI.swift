//
// Reminders.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A complex element that specifies reminder settings for the envelope. */
public final class Reminders: Content, Hashable {
    /** An integer specifying the number of days after the recipient receives the envelope that reminder emails are sent to the recipient. */
    public var reminderDelay: String?
    /** When set to **true**, the envelope expires and is no longer available for signing after the specified number of days. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used. */
    public var reminderEnabled: String?
    /** An integer specifying the interval in days between reminder emails. */
    public var reminderFrequency: String?

    public init(reminderDelay: String? = nil, reminderEnabled: String? = nil, reminderFrequency: String? = nil) {
        self.reminderDelay = reminderDelay
        self.reminderEnabled = reminderEnabled
        self.reminderFrequency = reminderFrequency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case reminderDelay
        case reminderEnabled
        case reminderFrequency
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(reminderDelay, forKey: .reminderDelay)
        try container.encodeIfPresent(reminderEnabled, forKey: .reminderEnabled)
        try container.encodeIfPresent(reminderFrequency, forKey: .reminderFrequency)
    }

    public static func == (lhs: Reminders, rhs: Reminders) -> Bool {
        lhs.reminderDelay == rhs.reminderDelay &&
            lhs.reminderEnabled == rhs.reminderEnabled &&
            lhs.reminderFrequency == rhs.reminderFrequency
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(reminderDelay?.hashValue)
        hasher.combine(reminderEnabled?.hashValue)
        hasher.combine(reminderFrequency?.hashValue)
    }
}

//
// UserAccountManagementGranularInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Describes which account management capabilities a user has. */
public final class UserAccountManagementGranularInformation: Content, Hashable {
    /** **True** if the user can manage account security settings. */
    public var canManageAccountSecuritySettings: String?
    public var canManageAccountSecuritySettingsMetadata: SettingsMetadata?
    /** **True** if the user can manage account settings. */
    public var canManageAccountSettings: String?
    public var canManageAccountSettingsMetadata: SettingsMetadata?
    /** **True** if the user can manage administrators. */
    public var canManageAdmins: String?
    public var canManageAdminsMetadata: SettingsMetadata?
    /**  */
    public var canManageEnvelopeTransfer: String?
    public var canManageEnvelopeTransferMetadata: SettingsMetadata?
    /** **True** if the user can manage reporting. */
    public var canManageReporting: String?
    public var canManageReportingMetadata: SettingsMetadata?
    /** **True** if the user can manage sharing. */
    public var canManageSharing: String?
    public var canManageSharingMetadata: SettingsMetadata?
    /** **True** if the user can manage signing groups. */
    public var canManageSigningGroups: String?
    public var canManageSigningGroupsMetadata: SettingsMetadata?
    /** **True** if the user can manage users. */
    public var canManageUsers: String?
    public var canManageUsersMetadata: SettingsMetadata?
    /**  */
    public var canViewUsers: String?

    public init(canManageAccountSecuritySettings: String? = nil, canManageAccountSecuritySettingsMetadata: SettingsMetadata? = nil, canManageAccountSettings: String? = nil, canManageAccountSettingsMetadata: SettingsMetadata? = nil, canManageAdmins: String? = nil, canManageAdminsMetadata: SettingsMetadata? = nil, canManageEnvelopeTransfer: String? = nil, canManageEnvelopeTransferMetadata: SettingsMetadata? = nil, canManageReporting: String? = nil, canManageReportingMetadata: SettingsMetadata? = nil, canManageSharing: String? = nil, canManageSharingMetadata: SettingsMetadata? = nil, canManageSigningGroups: String? = nil, canManageSigningGroupsMetadata: SettingsMetadata? = nil, canManageUsers: String? = nil, canManageUsersMetadata: SettingsMetadata? = nil, canViewUsers: String? = nil) {
        self.canManageAccountSecuritySettings = canManageAccountSecuritySettings
        self.canManageAccountSecuritySettingsMetadata = canManageAccountSecuritySettingsMetadata
        self.canManageAccountSettings = canManageAccountSettings
        self.canManageAccountSettingsMetadata = canManageAccountSettingsMetadata
        self.canManageAdmins = canManageAdmins
        self.canManageAdminsMetadata = canManageAdminsMetadata
        self.canManageEnvelopeTransfer = canManageEnvelopeTransfer
        self.canManageEnvelopeTransferMetadata = canManageEnvelopeTransferMetadata
        self.canManageReporting = canManageReporting
        self.canManageReportingMetadata = canManageReportingMetadata
        self.canManageSharing = canManageSharing
        self.canManageSharingMetadata = canManageSharingMetadata
        self.canManageSigningGroups = canManageSigningGroups
        self.canManageSigningGroupsMetadata = canManageSigningGroupsMetadata
        self.canManageUsers = canManageUsers
        self.canManageUsersMetadata = canManageUsersMetadata
        self.canViewUsers = canViewUsers
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canManageAccountSecuritySettings
        case canManageAccountSecuritySettingsMetadata
        case canManageAccountSettings
        case canManageAccountSettingsMetadata
        case canManageAdmins
        case canManageAdminsMetadata
        case canManageEnvelopeTransfer
        case canManageEnvelopeTransferMetadata
        case canManageReporting
        case canManageReportingMetadata
        case canManageSharing
        case canManageSharingMetadata
        case canManageSigningGroups
        case canManageSigningGroupsMetadata
        case canManageUsers
        case canManageUsersMetadata
        case canViewUsers
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(canManageAccountSecuritySettings, forKey: .canManageAccountSecuritySettings)
        try container.encodeIfPresent(canManageAccountSecuritySettingsMetadata, forKey: .canManageAccountSecuritySettingsMetadata)
        try container.encodeIfPresent(canManageAccountSettings, forKey: .canManageAccountSettings)
        try container.encodeIfPresent(canManageAccountSettingsMetadata, forKey: .canManageAccountSettingsMetadata)
        try container.encodeIfPresent(canManageAdmins, forKey: .canManageAdmins)
        try container.encodeIfPresent(canManageAdminsMetadata, forKey: .canManageAdminsMetadata)
        try container.encodeIfPresent(canManageEnvelopeTransfer, forKey: .canManageEnvelopeTransfer)
        try container.encodeIfPresent(canManageEnvelopeTransferMetadata, forKey: .canManageEnvelopeTransferMetadata)
        try container.encodeIfPresent(canManageReporting, forKey: .canManageReporting)
        try container.encodeIfPresent(canManageReportingMetadata, forKey: .canManageReportingMetadata)
        try container.encodeIfPresent(canManageSharing, forKey: .canManageSharing)
        try container.encodeIfPresent(canManageSharingMetadata, forKey: .canManageSharingMetadata)
        try container.encodeIfPresent(canManageSigningGroups, forKey: .canManageSigningGroups)
        try container.encodeIfPresent(canManageSigningGroupsMetadata, forKey: .canManageSigningGroupsMetadata)
        try container.encodeIfPresent(canManageUsers, forKey: .canManageUsers)
        try container.encodeIfPresent(canManageUsersMetadata, forKey: .canManageUsersMetadata)
        try container.encodeIfPresent(canViewUsers, forKey: .canViewUsers)
    }

    public static func == (lhs: UserAccountManagementGranularInformation, rhs: UserAccountManagementGranularInformation) -> Bool {
        lhs.canManageAccountSecuritySettings == rhs.canManageAccountSecuritySettings &&
            lhs.canManageAccountSecuritySettingsMetadata == rhs.canManageAccountSecuritySettingsMetadata &&
            lhs.canManageAccountSettings == rhs.canManageAccountSettings &&
            lhs.canManageAccountSettingsMetadata == rhs.canManageAccountSettingsMetadata &&
            lhs.canManageAdmins == rhs.canManageAdmins &&
            lhs.canManageAdminsMetadata == rhs.canManageAdminsMetadata &&
            lhs.canManageEnvelopeTransfer == rhs.canManageEnvelopeTransfer &&
            lhs.canManageEnvelopeTransferMetadata == rhs.canManageEnvelopeTransferMetadata &&
            lhs.canManageReporting == rhs.canManageReporting &&
            lhs.canManageReportingMetadata == rhs.canManageReportingMetadata &&
            lhs.canManageSharing == rhs.canManageSharing &&
            lhs.canManageSharingMetadata == rhs.canManageSharingMetadata &&
            lhs.canManageSigningGroups == rhs.canManageSigningGroups &&
            lhs.canManageSigningGroupsMetadata == rhs.canManageSigningGroupsMetadata &&
            lhs.canManageUsers == rhs.canManageUsers &&
            lhs.canManageUsersMetadata == rhs.canManageUsersMetadata &&
            lhs.canViewUsers == rhs.canViewUsers
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(canManageAccountSecuritySettings?.hashValue)
        hasher.combine(canManageAccountSecuritySettingsMetadata?.hashValue)
        hasher.combine(canManageAccountSettings?.hashValue)
        hasher.combine(canManageAccountSettingsMetadata?.hashValue)
        hasher.combine(canManageAdmins?.hashValue)
        hasher.combine(canManageAdminsMetadata?.hashValue)
        hasher.combine(canManageEnvelopeTransfer?.hashValue)
        hasher.combine(canManageEnvelopeTransferMetadata?.hashValue)
        hasher.combine(canManageReporting?.hashValue)
        hasher.combine(canManageReportingMetadata?.hashValue)
        hasher.combine(canManageSharing?.hashValue)
        hasher.combine(canManageSharingMetadata?.hashValue)
        hasher.combine(canManageSigningGroups?.hashValue)
        hasher.combine(canManageSigningGroupsMetadata?.hashValue)
        hasher.combine(canManageUsers?.hashValue)
        hasher.combine(canManageUsersMetadata?.hashValue)
        hasher.combine(canViewUsers?.hashValue)
    }
}

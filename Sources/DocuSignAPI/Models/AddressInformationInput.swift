//
// AddressInformationInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class AddressInformationInput: Content, Hashable {
    public var addressInformation: AddressInformation?
    /** Specifies the display level for the recipient. Valid values are: * `ReadOnly` * `Editable` * `DoNotDisplay` */
    public var displayLevelCode: String?
    /** A Boolean value that specifies whether the information must be returned in the response. */
    public var receiveInResponse: String?

    public init(addressInformation: AddressInformation? = nil, displayLevelCode: String? = nil, receiveInResponse: String? = nil) {
        self.addressInformation = addressInformation
        self.displayLevelCode = displayLevelCode
        self.receiveInResponse = receiveInResponse
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addressInformation
        case displayLevelCode
        case receiveInResponse
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(addressInformation, forKey: .addressInformation)
        try container.encodeIfPresent(displayLevelCode, forKey: .displayLevelCode)
        try container.encodeIfPresent(receiveInResponse, forKey: .receiveInResponse)
    }

    public static func == (lhs: AddressInformationInput, rhs: AddressInformationInput) -> Bool {
        lhs.addressInformation == rhs.addressInformation &&
            lhs.displayLevelCode == rhs.displayLevelCode &&
            lhs.receiveInResponse == rhs.receiveInResponse
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressInformation?.hashValue)
        hasher.combine(displayLevelCode?.hashValue)
        hasher.combine(receiveInResponse?.hashValue)
    }
}

//
// MemberSharedItems.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Information about shared items. */
public final class MemberSharedItems: Content, Hashable {
    /** List of information about shared envelopes. */
    public var envelopes: [SharedItem]?
    public var errorDetails: ErrorDetails?
    /** List of information about shared folders. */
    public var folders: [FolderSharedItem]?
    /** List of information about shared templates. */
    public var templates: [TemplateSharedItem]?
    public var user: UserInfo?

    public init(envelopes: [SharedItem]? = nil, errorDetails: ErrorDetails? = nil, folders: [FolderSharedItem]? = nil, templates: [TemplateSharedItem]? = nil, user: UserInfo? = nil) {
        self.envelopes = envelopes
        self.errorDetails = errorDetails
        self.folders = folders
        self.templates = templates
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case envelopes
        case errorDetails
        case folders
        case templates
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(envelopes, forKey: .envelopes)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(folders, forKey: .folders)
        try container.encodeIfPresent(templates, forKey: .templates)
        try container.encodeIfPresent(user, forKey: .user)
    }

    public static func == (lhs: MemberSharedItems, rhs: MemberSharedItems) -> Bool {
        lhs.envelopes == rhs.envelopes &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.folders == rhs.folders &&
            lhs.templates == rhs.templates &&
            lhs.user == rhs.user
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(envelopes?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(folders?.hashValue)
        hasher.combine(templates?.hashValue)
        hasher.combine(user?.hashValue)
    }
}

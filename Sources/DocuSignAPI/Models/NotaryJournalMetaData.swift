//
// NotaryJournalMetaData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class NotaryJournalMetaData: Content, Hashable {
    /**  */
    public var comment: String?
    /**  */
    public var credibleWitnesses: [NotaryJournalCredibleWitness]?
    /**  */
    public var signatureImage: String?
    /**  */
    public var signerIdType: String?

    public init(comment: String? = nil, credibleWitnesses: [NotaryJournalCredibleWitness]? = nil, signatureImage: String? = nil, signerIdType: String? = nil) {
        self.comment = comment
        self.credibleWitnesses = credibleWitnesses
        self.signatureImage = signatureImage
        self.signerIdType = signerIdType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case comment
        case credibleWitnesses
        case signatureImage
        case signerIdType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(credibleWitnesses, forKey: .credibleWitnesses)
        try container.encodeIfPresent(signatureImage, forKey: .signatureImage)
        try container.encodeIfPresent(signerIdType, forKey: .signerIdType)
    }

    public static func == (lhs: NotaryJournalMetaData, rhs: NotaryJournalMetaData) -> Bool {
        lhs.comment == rhs.comment &&
            lhs.credibleWitnesses == rhs.credibleWitnesses &&
            lhs.signatureImage == rhs.signatureImage &&
            lhs.signerIdType == rhs.signerIdType
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(comment?.hashValue)
        hasher.combine(credibleWitnesses?.hashValue)
        hasher.combine(signatureImage?.hashValue)
        hasher.combine(signerIdType?.hashValue)
    }
}

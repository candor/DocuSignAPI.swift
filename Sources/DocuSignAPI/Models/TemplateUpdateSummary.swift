//
// TemplateUpdateSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class TemplateUpdateSummary: Content, Hashable {
    public var bulkEnvelopeStatus: BulkEnvelopeStatus?
    /** The envelope ID of the envelope status that failed to post. */
    public var envelopeId: String?
    public var errorDetails: ErrorDetails?
    /**  */
    public var listCustomFieldUpdateResults: [ListCustomField]?
    public var lockInformation: EnvelopeLocks?
    /** Shows the current purge state for the envelope. The possible values are:  * `unpurged`: There has been no successful request to purge documents. * `documents_queued`: The envelope documents have been added to the purge queue, but have not been purged. * `documents_dequeued`: The envelope documents have been taken out of the purge queue. * `documents_and_metadata_queued`: The envelope documents and metadata have been added to the purge queue, but have not yet been purged. * `documents_purged`: The envelope documents have been successfully purged. * `documents_and_metadata_purged`: The envelope documents and metadata have been successfully purged.   */
    public var purgeState: String?
    /** An array of `recipientUpdateResults` objects that contain details about the recipients. */
    public var recipientUpdateResults: [RecipientUpdateResponse]?
    public var tabUpdateResults: EnvelopeRecipientTabs?
    /**  */
    public var textCustomFieldUpdateResults: [TextCustomField]?

    public init(bulkEnvelopeStatus: BulkEnvelopeStatus? = nil, envelopeId: String? = nil, errorDetails: ErrorDetails? = nil, listCustomFieldUpdateResults: [ListCustomField]? = nil, lockInformation: EnvelopeLocks? = nil, purgeState: String? = nil, recipientUpdateResults: [RecipientUpdateResponse]? = nil, tabUpdateResults: EnvelopeRecipientTabs? = nil, textCustomFieldUpdateResults: [TextCustomField]? = nil) {
        self.bulkEnvelopeStatus = bulkEnvelopeStatus
        self.envelopeId = envelopeId
        self.errorDetails = errorDetails
        self.listCustomFieldUpdateResults = listCustomFieldUpdateResults
        self.lockInformation = lockInformation
        self.purgeState = purgeState
        self.recipientUpdateResults = recipientUpdateResults
        self.tabUpdateResults = tabUpdateResults
        self.textCustomFieldUpdateResults = textCustomFieldUpdateResults
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bulkEnvelopeStatus
        case envelopeId
        case errorDetails
        case listCustomFieldUpdateResults
        case lockInformation
        case purgeState
        case recipientUpdateResults
        case tabUpdateResults
        case textCustomFieldUpdateResults
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bulkEnvelopeStatus, forKey: .bulkEnvelopeStatus)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(listCustomFieldUpdateResults, forKey: .listCustomFieldUpdateResults)
        try container.encodeIfPresent(lockInformation, forKey: .lockInformation)
        try container.encodeIfPresent(purgeState, forKey: .purgeState)
        try container.encodeIfPresent(recipientUpdateResults, forKey: .recipientUpdateResults)
        try container.encodeIfPresent(tabUpdateResults, forKey: .tabUpdateResults)
        try container.encodeIfPresent(textCustomFieldUpdateResults, forKey: .textCustomFieldUpdateResults)
    }

    public static func == (lhs: TemplateUpdateSummary, rhs: TemplateUpdateSummary) -> Bool {
        lhs.bulkEnvelopeStatus == rhs.bulkEnvelopeStatus &&
            lhs.envelopeId == rhs.envelopeId &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.listCustomFieldUpdateResults == rhs.listCustomFieldUpdateResults &&
            lhs.lockInformation == rhs.lockInformation &&
            lhs.purgeState == rhs.purgeState &&
            lhs.recipientUpdateResults == rhs.recipientUpdateResults &&
            lhs.tabUpdateResults == rhs.tabUpdateResults &&
            lhs.textCustomFieldUpdateResults == rhs.textCustomFieldUpdateResults
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bulkEnvelopeStatus?.hashValue)
        hasher.combine(envelopeId?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(listCustomFieldUpdateResults?.hashValue)
        hasher.combine(lockInformation?.hashValue)
        hasher.combine(purgeState?.hashValue)
        hasher.combine(recipientUpdateResults?.hashValue)
        hasher.combine(tabUpdateResults?.hashValue)
        hasher.combine(textCustomFieldUpdateResults?.hashValue)
    }
}

//
// CorrectViewRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** The request body for the EnvelopeViews::createCorrect method. */
public final class CorrectViewRequest: Content, Hashable {
    /** (Optional) The URL to which the user should be redirected after the correct/send view session has ended. DocuSign redirects to this URL and includes an event parameter that your app can use.  Maximum Length: 500 characters. If the `returnUrl` exceeds this limit, the user is redirected to a truncated URL.  The event parameters returned are:  * `send` (user corrected and sent the envelope) * `save` (user saved the envelope) * `cancel` (user canceled the transaction.) * `error` (there was an error when performing the correct or send) * `sessionEnd` (the session ended before the user completed a different action)  **Note**: Include `https://` in the URL or the redirect might not succeed on some browsers. */
    public var returnUrl: String?
    /** Specifies whether the window is displayed with or without dressing. */
    public var suppressNavigation: String?
    /**  */
    public var viewUrl: String?

    public init(returnUrl: String? = nil, suppressNavigation: String? = nil, viewUrl: String? = nil) {
        self.returnUrl = returnUrl
        self.suppressNavigation = suppressNavigation
        self.viewUrl = viewUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case returnUrl
        case suppressNavigation
        case viewUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(returnUrl, forKey: .returnUrl)
        try container.encodeIfPresent(suppressNavigation, forKey: .suppressNavigation)
        try container.encodeIfPresent(viewUrl, forKey: .viewUrl)
    }

    public static func == (lhs: CorrectViewRequest, rhs: CorrectViewRequest) -> Bool {
        lhs.returnUrl == rhs.returnUrl &&
            lhs.suppressNavigation == rhs.suppressNavigation &&
            lhs.viewUrl == rhs.viewUrl
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(returnUrl?.hashValue)
        hasher.combine(suppressNavigation?.hashValue)
        hasher.combine(viewUrl?.hashValue)
    }
}

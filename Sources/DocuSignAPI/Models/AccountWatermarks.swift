//
// AccountWatermarks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class AccountWatermarks: Content, Hashable {
    /**  */
    public var displayAngle: String?
    /**  */
    public var enabled: String?
    /** The font to be used for the tab value. Supported fonts include:  - Default - Arial - ArialNarrow - Calibri - CourierNew - Garamond - Georgia - Helvetica - LucidaConsole - MSGothic - MSMincho - OCR-A - Tahoma - TimesNewRoman - Trebuchet - Verdana  */
    public var font: String?
    /** The font color to use for the information in the tab. Possible values are:   - Black - BrightBlue - BrightRed - DarkGreen - DarkRed - Gold - Green - NavyBlue - Purple - White  */
    public var fontColor: String?
    /** The font size used for the information in the tab. Possible values are:  - Size7 - Size8 - Size9 - Size10 - Size11 - Size12 - Size14 - Size16 - Size18 - Size20 - Size22 - Size24 - Size26 - Size28 - Size36 - Size48 - Size72 */
    public var fontSize: String?
    /** A unique ID for the Salesforce object. */
    public var id: String?
    /**  */
    public var imageBase64: String?
    /**  */
    public var transparency: String?
    /**  */
    public var watermarkText: String?

    public init(displayAngle: String? = nil, enabled: String? = nil, font: String? = nil, fontColor: String? = nil, fontSize: String? = nil, id: String? = nil, imageBase64: String? = nil, transparency: String? = nil, watermarkText: String? = nil) {
        self.displayAngle = displayAngle
        self.enabled = enabled
        self.font = font
        self.fontColor = fontColor
        self.fontSize = fontSize
        self.id = id
        self.imageBase64 = imageBase64
        self.transparency = transparency
        self.watermarkText = watermarkText
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case displayAngle
        case enabled
        case font
        case fontColor
        case fontSize
        case id
        case imageBase64
        case transparency
        case watermarkText
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(displayAngle, forKey: .displayAngle)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(font, forKey: .font)
        try container.encodeIfPresent(fontColor, forKey: .fontColor)
        try container.encodeIfPresent(fontSize, forKey: .fontSize)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(imageBase64, forKey: .imageBase64)
        try container.encodeIfPresent(transparency, forKey: .transparency)
        try container.encodeIfPresent(watermarkText, forKey: .watermarkText)
    }

    public static func == (lhs: AccountWatermarks, rhs: AccountWatermarks) -> Bool {
        lhs.displayAngle == rhs.displayAngle &&
            lhs.enabled == rhs.enabled &&
            lhs.font == rhs.font &&
            lhs.fontColor == rhs.fontColor &&
            lhs.fontSize == rhs.fontSize &&
            lhs.id == rhs.id &&
            lhs.imageBase64 == rhs.imageBase64 &&
            lhs.transparency == rhs.transparency &&
            lhs.watermarkText == rhs.watermarkText
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(displayAngle?.hashValue)
        hasher.combine(enabled?.hashValue)
        hasher.combine(font?.hashValue)
        hasher.combine(fontColor?.hashValue)
        hasher.combine(fontSize?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(imageBase64?.hashValue)
        hasher.combine(transparency?.hashValue)
        hasher.combine(watermarkText?.hashValue)
    }
}

//
// BulkSendTestResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** This object contains the results of a bulk send test. */
public final class BulkSendTestResponse: Content, Hashable {
    /** When **true**, the envelope or template is compatible with the bulk send list and can be sent by using the [BulkSend::createBulkSendRequest][BulkSendRequest] method.  **Note**: This property is only returned in responses and ignored in requests.  [BulkSendRequest]: /esign-rest-api/reference/BulkEnvelopes/BulkSend/createBulkSendRequest */
    public var canBeSent: Bool?
    /** Human-readable details about any validation errors that occurred. */
    public var validationErrorDetails: [String]?
    /** A list of validation errors that were encountered during the bulk send test.  **Note**: This information is intended to be parsed by machine. */
    public var validationErrors: [String]?

    public init(canBeSent: Bool? = nil, validationErrorDetails: [String]? = nil, validationErrors: [String]? = nil) {
        self.canBeSent = canBeSent
        self.validationErrorDetails = validationErrorDetails
        self.validationErrors = validationErrors
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canBeSent
        case validationErrorDetails
        case validationErrors
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(canBeSent, forKey: .canBeSent)
        try container.encodeIfPresent(validationErrorDetails, forKey: .validationErrorDetails)
        try container.encodeIfPresent(validationErrors, forKey: .validationErrors)
    }

    public static func == (lhs: BulkSendTestResponse, rhs: BulkSendTestResponse) -> Bool {
        lhs.canBeSent == rhs.canBeSent &&
            lhs.validationErrorDetails == rhs.validationErrorDetails &&
            lhs.validationErrors == rhs.validationErrors
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(canBeSent?.hashValue)
        hasher.combine(validationErrorDetails?.hashValue)
        hasher.combine(validationErrors?.hashValue)
    }
}

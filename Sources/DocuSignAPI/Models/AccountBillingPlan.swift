//
// AccountBillingPlan.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains information about an account billing plan. */
public final class AccountBillingPlan: Content, Hashable {
    /** Reserved for DocuSign. */
    public var addOns: [AddOn]?
    /** Reserved for DocuSign. */
    public var canCancelRenewal: String?
    /** When set to **true**, specifies that you can upgrade the account through the API. For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response. */
    public var canUpgrade: String?
    /** Specifies the ISO currency code to use for the account. */
    public var currencyCode: String?
    public var downgradePlanInformation: DowngradePlanUpdateResponse?
    /** When set to **true**, customer support is provided as part of the account plan. */
    public var enableSupport: String?
    /** The number of seats (users) included in the plan. */
    public var includedSeats: String?
    /** Reserved for DocuSign. */
    public var incrementalSeats: String?
    /** When **true**, the account has been downgraded from a premium account type. Otherwise **false**. */
    public var isDowngrade: String?
    /** Any other percentage discount for the plan.  Example: `\"0.00\"` */
    public var otherDiscountPercent: String?
    /** The payment cycle associated with the plan. The possible values are:   - `Monthly` - `Annually`  */
    public var paymentCycle: String?
    /** The payment method used for the billing plan. Valid values are:  - `NotSupported` - `CreditCard` - `PurchaseOrder` - `Premium` - `Freemium` - `FreeTrial` - `AppStore` - `DigitalExternal` - `DirectDebit` */
    public var paymentMethod: String?
    /** The per-seat price associated with the plan.  Example: `\"456.0000\"` */
    public var perSeatPrice: String?
    /** Identifies the type of plan. Examples include:  - `business` - `corporate` - `enterprise`  - `free` */
    public var planClassification: String?
    /** Reserved for DocuSign. */
    public var planFeatureSets: [FeatureSet]?
    /** DocuSign's id for the account plan. */
    public var planId: String?
    /** The name of the billing plan used for the account.  Examples:   - `Personal - Annual` - `Unlimited Envelope Subscription - Annual Billing` */
    public var planName: String?
    /** The renewal status for the account. Valid values are:  * `auto`: The account automatically renews. * `queued_for_close`: The account will be closed at the `billingPeriodEndDate`. * `queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`.  **Note**: For GET methods, you must set the `include_metadata` query parameter to **true** for this property to appear in the response. */
    public var renewalStatus: String?
    /**    */
    public var seatDiscounts: [SeatDiscount]?
    /** The support incident fee charged for each support incident.  Example: `\"$0.00\"` */
    public var supportIncidentFee: String?
    /** The support plan fee charged for this plan.  Example: `\"$0.00\"` */
    public var supportPlanFee: String?

    public init(addOns: [AddOn]? = nil, canCancelRenewal: String? = nil, canUpgrade: String? = nil, currencyCode: String? = nil, downgradePlanInformation: DowngradePlanUpdateResponse? = nil, enableSupport: String? = nil, includedSeats: String? = nil, incrementalSeats: String? = nil, isDowngrade: String? = nil, otherDiscountPercent: String? = nil, paymentCycle: String? = nil, paymentMethod: String? = nil, perSeatPrice: String? = nil, planClassification: String? = nil, planFeatureSets: [FeatureSet]? = nil, planId: String? = nil, planName: String? = nil, renewalStatus: String? = nil, seatDiscounts: [SeatDiscount]? = nil, supportIncidentFee: String? = nil, supportPlanFee: String? = nil) {
        self.addOns = addOns
        self.canCancelRenewal = canCancelRenewal
        self.canUpgrade = canUpgrade
        self.currencyCode = currencyCode
        self.downgradePlanInformation = downgradePlanInformation
        self.enableSupport = enableSupport
        self.includedSeats = includedSeats
        self.incrementalSeats = incrementalSeats
        self.isDowngrade = isDowngrade
        self.otherDiscountPercent = otherDiscountPercent
        self.paymentCycle = paymentCycle
        self.paymentMethod = paymentMethod
        self.perSeatPrice = perSeatPrice
        self.planClassification = planClassification
        self.planFeatureSets = planFeatureSets
        self.planId = planId
        self.planName = planName
        self.renewalStatus = renewalStatus
        self.seatDiscounts = seatDiscounts
        self.supportIncidentFee = supportIncidentFee
        self.supportPlanFee = supportPlanFee
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addOns
        case canCancelRenewal
        case canUpgrade
        case currencyCode
        case downgradePlanInformation
        case enableSupport
        case includedSeats
        case incrementalSeats
        case isDowngrade
        case otherDiscountPercent
        case paymentCycle
        case paymentMethod
        case perSeatPrice
        case planClassification
        case planFeatureSets
        case planId
        case planName
        case renewalStatus
        case seatDiscounts
        case supportIncidentFee
        case supportPlanFee
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(addOns, forKey: .addOns)
        try container.encodeIfPresent(canCancelRenewal, forKey: .canCancelRenewal)
        try container.encodeIfPresent(canUpgrade, forKey: .canUpgrade)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(downgradePlanInformation, forKey: .downgradePlanInformation)
        try container.encodeIfPresent(enableSupport, forKey: .enableSupport)
        try container.encodeIfPresent(includedSeats, forKey: .includedSeats)
        try container.encodeIfPresent(incrementalSeats, forKey: .incrementalSeats)
        try container.encodeIfPresent(isDowngrade, forKey: .isDowngrade)
        try container.encodeIfPresent(otherDiscountPercent, forKey: .otherDiscountPercent)
        try container.encodeIfPresent(paymentCycle, forKey: .paymentCycle)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(perSeatPrice, forKey: .perSeatPrice)
        try container.encodeIfPresent(planClassification, forKey: .planClassification)
        try container.encodeIfPresent(planFeatureSets, forKey: .planFeatureSets)
        try container.encodeIfPresent(planId, forKey: .planId)
        try container.encodeIfPresent(planName, forKey: .planName)
        try container.encodeIfPresent(renewalStatus, forKey: .renewalStatus)
        try container.encodeIfPresent(seatDiscounts, forKey: .seatDiscounts)
        try container.encodeIfPresent(supportIncidentFee, forKey: .supportIncidentFee)
        try container.encodeIfPresent(supportPlanFee, forKey: .supportPlanFee)
    }

    public static func == (lhs: AccountBillingPlan, rhs: AccountBillingPlan) -> Bool {
        lhs.addOns == rhs.addOns &&
            lhs.canCancelRenewal == rhs.canCancelRenewal &&
            lhs.canUpgrade == rhs.canUpgrade &&
            lhs.currencyCode == rhs.currencyCode &&
            lhs.downgradePlanInformation == rhs.downgradePlanInformation &&
            lhs.enableSupport == rhs.enableSupport &&
            lhs.includedSeats == rhs.includedSeats &&
            lhs.incrementalSeats == rhs.incrementalSeats &&
            lhs.isDowngrade == rhs.isDowngrade &&
            lhs.otherDiscountPercent == rhs.otherDiscountPercent &&
            lhs.paymentCycle == rhs.paymentCycle &&
            lhs.paymentMethod == rhs.paymentMethod &&
            lhs.perSeatPrice == rhs.perSeatPrice &&
            lhs.planClassification == rhs.planClassification &&
            lhs.planFeatureSets == rhs.planFeatureSets &&
            lhs.planId == rhs.planId &&
            lhs.planName == rhs.planName &&
            lhs.renewalStatus == rhs.renewalStatus &&
            lhs.seatDiscounts == rhs.seatDiscounts &&
            lhs.supportIncidentFee == rhs.supportIncidentFee &&
            lhs.supportPlanFee == rhs.supportPlanFee
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addOns?.hashValue)
        hasher.combine(canCancelRenewal?.hashValue)
        hasher.combine(canUpgrade?.hashValue)
        hasher.combine(currencyCode?.hashValue)
        hasher.combine(downgradePlanInformation?.hashValue)
        hasher.combine(enableSupport?.hashValue)
        hasher.combine(includedSeats?.hashValue)
        hasher.combine(incrementalSeats?.hashValue)
        hasher.combine(isDowngrade?.hashValue)
        hasher.combine(otherDiscountPercent?.hashValue)
        hasher.combine(paymentCycle?.hashValue)
        hasher.combine(paymentMethod?.hashValue)
        hasher.combine(perSeatPrice?.hashValue)
        hasher.combine(planClassification?.hashValue)
        hasher.combine(planFeatureSets?.hashValue)
        hasher.combine(planId?.hashValue)
        hasher.combine(planName?.hashValue)
        hasher.combine(renewalStatus?.hashValue)
        hasher.combine(seatDiscounts?.hashValue)
        hasher.combine(supportIncidentFee?.hashValue)
        hasher.combine(supportPlanFee?.hashValue)
    }
}

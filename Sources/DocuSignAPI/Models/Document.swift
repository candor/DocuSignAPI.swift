//
// Document.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A document object. */
public final class Document: Content, Hashable {
    /** Reserved for DocuSign. */
    public var applyAnchorTabs: String?
    /** This string sets the display and behavior properties of the document during signing. The possible values are:  * `modal`<br>   The document is shown as a supplement action strip   and can be viewed, downloaded, or printed in a modal window.   This is the recommended value for supplemental documents.   * `download`<br>   The document is shown as a supplement action strip   and can be viewed, downloaded, or printed in a new browser window.   * `inline`<br>   The document is shown in the normal signing window.   This value is not used with supplemental documents,   but is the default value for all other documents.  */
    public var display: String?
    /** The document's bytes. This field can be used to include a base64 version of the document bytes within an envelope definition instead of sending the document using a multi-part HTTP request. The maximum document size is smaller if this field is used due to the overhead of the base64 encoding. */
    public var documentBase64: String?
    /**  */
    public var documentFields: [NameValue]?
    /** Specifies the document ID of this document. This value is used by tabs to determine which document they appear in. */
    public var documentId: String?
    /** When set to **true**, the document is been already encrypted by the sender for use with the DocuSign Key Manager Security Appliance.   */
    public var encryptedWithKeyManager: String?
    /** The file extension type of the document. Non-PDF documents are converted to PDF.  If the document is not a PDF, `fileExtension` is required.  If you try to upload a non-PDF document without a `fileExtension`, you will receive an \"unable to load document\" error message.     */
    public var fileExtension: String?
    /**  */
    public var fileFormatHint: String?
    public var htmlDefinition: DocumentHtmlDefinition?
    /** When set to **true**, the document is included in the combined document download (`documentsCombinedUri`).  The default value is **true**.  */
    public var includeInDownload: String?
    /** Matchboxes define areas in a document for document matching when you are creating envelopes. They are only used when you upload and edit a template.   A matchbox consists of 5 elements:  * pageNumber - The document page number  on which the matchbox will appear.  * xPosition - The x position of the matchbox on a page.  * yPosition - The y position of the matchbox on a page. * width - The width of the matchbox.  * height - The height of the matchbox.   */
    public var matchBoxes: [MatchBox]?
    /** The name of the document. */
    public var name: String?
    /** (Optional) The order in which to sort the results.  Valid values are:    * `asc`: Ascending order. * `desc`: Descending order.  */
    public var order: String?
    /** An array of page objects. */
    public var pages: String?
    /** The user's encrypted password hash. */
    public var password: String?
    /**  */
    public var pdfFormFieldOption: String?
    /** The file id from the cloud storage service where the document is located. This information is returned using [CloudStorage::listFolders](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/listFolders) or [CloudStorage::list](https://developers.docusign.com/esign-rest-api/reference/CloudStorage/CloudStorage/list).  */
    public var remoteUrl: String?
    /** Sets how the signer interacts with the supplemental document. The possible values are:   * `no_interaction`<br>   No recipient action is required.   * `view`<br>   The recipient is required to view the document.   * `accept`<br>   The recipient is required to accept the document by selecting accept during signing, but is not required to view the document.   * `view_accept`<br>   The recipient is required to view and accept the document.     */
    public var signerMustAcknowledge: String?
    /**  */
    public var signerMustAcknowledgeUseAccountDefault: Bool?
    public var tabs: EnvelopeRecipientTabs?
    /** When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.  */
    public var templateLocked: String?
    /** When set to **true**, the sender may not remove the recipient. Used only when working with template recipients. */
    public var templateRequired: String?
    /** When set to **true**, PDF form field data is transformed into document tab values when the PDF form field name matches the DocuSign custom tab tabLabel. The resulting PDF form data is also returned in the PDF meta data when requesting the document PDF.  */
    public var transformPdfFields: String?
    /** A URI containing the user ID. */
    public var uri: String?

    public init(applyAnchorTabs: String? = nil, display: String? = nil, documentBase64: String? = nil, documentFields: [NameValue]? = nil, documentId: String? = nil, encryptedWithKeyManager: String? = nil, fileExtension: String? = nil, fileFormatHint: String? = nil, htmlDefinition: DocumentHtmlDefinition? = nil, includeInDownload: String? = nil, matchBoxes: [MatchBox]? = nil, name: String? = nil, order: String? = nil, pages: String? = nil, password: String? = nil, pdfFormFieldOption: String? = nil, remoteUrl: String? = nil, signerMustAcknowledge: String? = nil, signerMustAcknowledgeUseAccountDefault: Bool? = nil, tabs: EnvelopeRecipientTabs? = nil, templateLocked: String? = nil, templateRequired: String? = nil, transformPdfFields: String? = nil, uri: String? = nil) {
        self.applyAnchorTabs = applyAnchorTabs
        self.display = display
        self.documentBase64 = documentBase64
        self.documentFields = documentFields
        self.documentId = documentId
        self.encryptedWithKeyManager = encryptedWithKeyManager
        self.fileExtension = fileExtension
        self.fileFormatHint = fileFormatHint
        self.htmlDefinition = htmlDefinition
        self.includeInDownload = includeInDownload
        self.matchBoxes = matchBoxes
        self.name = name
        self.order = order
        self.pages = pages
        self.password = password
        self.pdfFormFieldOption = pdfFormFieldOption
        self.remoteUrl = remoteUrl
        self.signerMustAcknowledge = signerMustAcknowledge
        self.signerMustAcknowledgeUseAccountDefault = signerMustAcknowledgeUseAccountDefault
        self.tabs = tabs
        self.templateLocked = templateLocked
        self.templateRequired = templateRequired
        self.transformPdfFields = transformPdfFields
        self.uri = uri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case applyAnchorTabs
        case display
        case documentBase64
        case documentFields
        case documentId
        case encryptedWithKeyManager
        case fileExtension
        case fileFormatHint
        case htmlDefinition
        case includeInDownload
        case matchBoxes
        case name
        case order
        case pages
        case password
        case pdfFormFieldOption
        case remoteUrl
        case signerMustAcknowledge
        case signerMustAcknowledgeUseAccountDefault
        case tabs
        case templateLocked
        case templateRequired
        case transformPdfFields
        case uri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(applyAnchorTabs, forKey: .applyAnchorTabs)
        try container.encodeIfPresent(display, forKey: .display)
        try container.encodeIfPresent(documentBase64, forKey: .documentBase64)
        try container.encodeIfPresent(documentFields, forKey: .documentFields)
        try container.encodeIfPresent(documentId, forKey: .documentId)
        try container.encodeIfPresent(encryptedWithKeyManager, forKey: .encryptedWithKeyManager)
        try container.encodeIfPresent(fileExtension, forKey: .fileExtension)
        try container.encodeIfPresent(fileFormatHint, forKey: .fileFormatHint)
        try container.encodeIfPresent(htmlDefinition, forKey: .htmlDefinition)
        try container.encodeIfPresent(includeInDownload, forKey: .includeInDownload)
        try container.encodeIfPresent(matchBoxes, forKey: .matchBoxes)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(pages, forKey: .pages)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(pdfFormFieldOption, forKey: .pdfFormFieldOption)
        try container.encodeIfPresent(remoteUrl, forKey: .remoteUrl)
        try container.encodeIfPresent(signerMustAcknowledge, forKey: .signerMustAcknowledge)
        try container.encodeIfPresent(signerMustAcknowledgeUseAccountDefault, forKey: .signerMustAcknowledgeUseAccountDefault)
        try container.encodeIfPresent(tabs, forKey: .tabs)
        try container.encodeIfPresent(templateLocked, forKey: .templateLocked)
        try container.encodeIfPresent(templateRequired, forKey: .templateRequired)
        try container.encodeIfPresent(transformPdfFields, forKey: .transformPdfFields)
        try container.encodeIfPresent(uri, forKey: .uri)
    }

    public static func == (lhs: Document, rhs: Document) -> Bool {
        lhs.applyAnchorTabs == rhs.applyAnchorTabs &&
            lhs.display == rhs.display &&
            lhs.documentBase64 == rhs.documentBase64 &&
            lhs.documentFields == rhs.documentFields &&
            lhs.documentId == rhs.documentId &&
            lhs.encryptedWithKeyManager == rhs.encryptedWithKeyManager &&
            lhs.fileExtension == rhs.fileExtension &&
            lhs.fileFormatHint == rhs.fileFormatHint &&
            lhs.htmlDefinition == rhs.htmlDefinition &&
            lhs.includeInDownload == rhs.includeInDownload &&
            lhs.matchBoxes == rhs.matchBoxes &&
            lhs.name == rhs.name &&
            lhs.order == rhs.order &&
            lhs.pages == rhs.pages &&
            lhs.password == rhs.password &&
            lhs.pdfFormFieldOption == rhs.pdfFormFieldOption &&
            lhs.remoteUrl == rhs.remoteUrl &&
            lhs.signerMustAcknowledge == rhs.signerMustAcknowledge &&
            lhs.signerMustAcknowledgeUseAccountDefault == rhs.signerMustAcknowledgeUseAccountDefault &&
            lhs.tabs == rhs.tabs &&
            lhs.templateLocked == rhs.templateLocked &&
            lhs.templateRequired == rhs.templateRequired &&
            lhs.transformPdfFields == rhs.transformPdfFields &&
            lhs.uri == rhs.uri
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(applyAnchorTabs?.hashValue)
        hasher.combine(display?.hashValue)
        hasher.combine(documentBase64?.hashValue)
        hasher.combine(documentFields?.hashValue)
        hasher.combine(documentId?.hashValue)
        hasher.combine(encryptedWithKeyManager?.hashValue)
        hasher.combine(fileExtension?.hashValue)
        hasher.combine(fileFormatHint?.hashValue)
        hasher.combine(htmlDefinition?.hashValue)
        hasher.combine(includeInDownload?.hashValue)
        hasher.combine(matchBoxes?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(order?.hashValue)
        hasher.combine(pages?.hashValue)
        hasher.combine(password?.hashValue)
        hasher.combine(pdfFormFieldOption?.hashValue)
        hasher.combine(remoteUrl?.hashValue)
        hasher.combine(signerMustAcknowledge?.hashValue)
        hasher.combine(signerMustAcknowledgeUseAccountDefault?.hashValue)
        hasher.combine(tabs?.hashValue)
        hasher.combine(templateLocked?.hashValue)
        hasher.combine(templateRequired?.hashValue)
        hasher.combine(transformPdfFields?.hashValue)
        hasher.combine(uri?.hashValue)
    }
}

//
// BillingPlanPreview.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Information used to provide a preview of a billing plan. */
public final class BillingPlanPreview: Content, Hashable {
    /** Specifies the ISO currency code for the account. */
    public var currencyCode: String?
    public var invoice: BillingInvoice?
    /** When set to **true**, the billing plan is prorated. */
    public var isProrated: String?
    /**  */
    public var subtotalAmount: String?
    /**  */
    public var taxAmount: String?
    /**  */
    public var totalAmount: String?

    public init(currencyCode: String? = nil, invoice: BillingInvoice? = nil, isProrated: String? = nil, subtotalAmount: String? = nil, taxAmount: String? = nil, totalAmount: String? = nil) {
        self.currencyCode = currencyCode
        self.invoice = invoice
        self.isProrated = isProrated
        self.subtotalAmount = subtotalAmount
        self.taxAmount = taxAmount
        self.totalAmount = totalAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currencyCode
        case invoice
        case isProrated
        case subtotalAmount
        case taxAmount
        case totalAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(invoice, forKey: .invoice)
        try container.encodeIfPresent(isProrated, forKey: .isProrated)
        try container.encodeIfPresent(subtotalAmount, forKey: .subtotalAmount)
        try container.encodeIfPresent(taxAmount, forKey: .taxAmount)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
    }

    public static func == (lhs: BillingPlanPreview, rhs: BillingPlanPreview) -> Bool {
        lhs.currencyCode == rhs.currencyCode &&
            lhs.invoice == rhs.invoice &&
            lhs.isProrated == rhs.isProrated &&
            lhs.subtotalAmount == rhs.subtotalAmount &&
            lhs.taxAmount == rhs.taxAmount &&
            lhs.totalAmount == rhs.totalAmount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currencyCode?.hashValue)
        hasher.combine(invoice?.hashValue)
        hasher.combine(isProrated?.hashValue)
        hasher.combine(subtotalAmount?.hashValue)
        hasher.combine(taxAmount?.hashValue)
        hasher.combine(totalAmount?.hashValue)
    }
}

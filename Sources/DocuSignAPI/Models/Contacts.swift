//
// Contacts.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** The &#x60;Contacts&#x60; resource enables you to manage the contact in an account&#39;s address book. */
public final class Contacts: Content, Hashable {
    /** The cloud service that provided the contact. Valid values are:  - `rooms` - `docusignCore` (default)  <!-- Future:  - `Box` - `GoogleDrive` - `Dropbox` - `SalesForce` - `SkyDrive`  --> */
    public var cloudProvider: String?
    /** The id of the container at the cloud provider. For example, this might be the room id for a DocuSign Transaction Room. */
    public var cloudProviderContainerId: String?
    /** The id of a contact person in the account's address book. */
    public var contactId: String?
    /** A list of the contact's phone numbers.  **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:  - Sending an envelope by using SMS - Using phone authentication  You must ask the user who added the contact for the phone number and then manually enter it into the authentication box. */
    public var contactPhoneNumbers: [ContactPhoneNumber]?
    /** The URI for retrieving information about the contact. */
    public var contactUri: String?
    /** The email address or addresses associated with the contact. */
    public var emails: [String]?
    public var errorDetails: ErrorDetails?
    /** When **true**, the current user is the owner of the contact. */
    public var isOwner: Bool?
    /** The name of the contact. */
    public var name: String?
    /** The name of the contact's organization. */
    public var organization: String?
    /** When set to **true**, the contact is shared. For more information, see [Shared Contacts](https://support.docusign.com/guides/ndse-user-guide-manage-contacts).  **Note**: The phone numbers associated with shared contacts do not display to users other than the user who added the contact. Additionally, in the following scenarios, the phone number of a shared contact does not populate automatically for anyone other than the user who added the contact:  - Sending an envelope by using SMS - Using phone authentication  You must ask the user who added the contact for the phone number and then manually enter it into the authentication box. */
    public var shared: String?
    /** If the contact belongs to a signing group, this property contains the `signingGroupId`. */
    public var signingGroup: String?
    /** The name of the signing group that the contact belongs to. */
    public var signingGroupName: String?

    public init(cloudProvider: String? = nil, cloudProviderContainerId: String? = nil, contactId: String? = nil, contactPhoneNumbers: [ContactPhoneNumber]? = nil, contactUri: String? = nil, emails: [String]? = nil, errorDetails: ErrorDetails? = nil, isOwner: Bool? = nil, name: String? = nil, organization: String? = nil, shared: String? = nil, signingGroup: String? = nil, signingGroupName: String? = nil) {
        self.cloudProvider = cloudProvider
        self.cloudProviderContainerId = cloudProviderContainerId
        self.contactId = contactId
        self.contactPhoneNumbers = contactPhoneNumbers
        self.contactUri = contactUri
        self.emails = emails
        self.errorDetails = errorDetails
        self.isOwner = isOwner
        self.name = name
        self.organization = organization
        self.shared = shared
        self.signingGroup = signingGroup
        self.signingGroupName = signingGroupName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cloudProvider
        case cloudProviderContainerId
        case contactId
        case contactPhoneNumbers
        case contactUri
        case emails
        case errorDetails
        case isOwner
        case name
        case organization
        case shared
        case signingGroup
        case signingGroupName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cloudProvider, forKey: .cloudProvider)
        try container.encodeIfPresent(cloudProviderContainerId, forKey: .cloudProviderContainerId)
        try container.encodeIfPresent(contactId, forKey: .contactId)
        try container.encodeIfPresent(contactPhoneNumbers, forKey: .contactPhoneNumbers)
        try container.encodeIfPresent(contactUri, forKey: .contactUri)
        try container.encodeIfPresent(emails, forKey: .emails)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(isOwner, forKey: .isOwner)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(organization, forKey: .organization)
        try container.encodeIfPresent(shared, forKey: .shared)
        try container.encodeIfPresent(signingGroup, forKey: .signingGroup)
        try container.encodeIfPresent(signingGroupName, forKey: .signingGroupName)
    }

    public static func == (lhs: Contacts, rhs: Contacts) -> Bool {
        lhs.cloudProvider == rhs.cloudProvider &&
            lhs.cloudProviderContainerId == rhs.cloudProviderContainerId &&
            lhs.contactId == rhs.contactId &&
            lhs.contactPhoneNumbers == rhs.contactPhoneNumbers &&
            lhs.contactUri == rhs.contactUri &&
            lhs.emails == rhs.emails &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.isOwner == rhs.isOwner &&
            lhs.name == rhs.name &&
            lhs.organization == rhs.organization &&
            lhs.shared == rhs.shared &&
            lhs.signingGroup == rhs.signingGroup &&
            lhs.signingGroupName == rhs.signingGroupName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(cloudProvider?.hashValue)
        hasher.combine(cloudProviderContainerId?.hashValue)
        hasher.combine(contactId?.hashValue)
        hasher.combine(contactPhoneNumbers?.hashValue)
        hasher.combine(contactUri?.hashValue)
        hasher.combine(emails?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(isOwner?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(organization?.hashValue)
        hasher.combine(shared?.hashValue)
        hasher.combine(signingGroup?.hashValue)
        hasher.combine(signingGroupName?.hashValue)
    }
}

//
// BillingPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BillingPrice: Content, Hashable {
    /** Reserved: TBD */
    public var beginQuantity: String?
    /**  */
    public var endQuantity: String?
    /** Reserved: TBD */
    public var unitPrice: String?

    public init(beginQuantity: String? = nil, endQuantity: String? = nil, unitPrice: String? = nil) {
        self.beginQuantity = beginQuantity
        self.endQuantity = endQuantity
        self.unitPrice = unitPrice
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case beginQuantity
        case endQuantity
        case unitPrice
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(beginQuantity, forKey: .beginQuantity)
        try container.encodeIfPresent(endQuantity, forKey: .endQuantity)
        try container.encodeIfPresent(unitPrice, forKey: .unitPrice)
    }

    public static func == (lhs: BillingPrice, rhs: BillingPrice) -> Bool {
        lhs.beginQuantity == rhs.beginQuantity &&
            lhs.endQuantity == rhs.endQuantity &&
            lhs.unitPrice == rhs.unitPrice
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(beginQuantity?.hashValue)
        hasher.combine(endQuantity?.hashValue)
        hasher.combine(unitPrice?.hashValue)
    }
}

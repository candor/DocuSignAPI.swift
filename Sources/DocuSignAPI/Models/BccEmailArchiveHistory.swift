//
// BccEmailArchiveHistory.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains details about the history of the BCC email archive configuration. */
public final class BccEmailArchiveHistory: Content, Hashable {
    /** The id of the account that owns the BCC email archive configuration. */
    public var accountId: String?
    /** The action taken on the BCC email archive configuration.  Examples:   - `CREATED`: The BCC email archive configuration has been created. - `UPDATED`: The BCC email address has been activated by clicking on the activation link in the activation email message. - `CLOSED`: The BCC email address has been marked as closed is no longer used for archiving. */
    public var action: String?
    /** The BCC email address used to archive the emails that DocuSign generates.   Example: customer_bcc@example.com */
    public var email: String?
    /** The UTC DateTime when the BCC email address was last modified. */
    public var modified: String?
    public var modifiedBy: UserInfo?
    /** The status of the BCC email address. Possible values are:  - `activation_sent`: An activation link has been sent to the BCC email address. - `active`: The BCC email address is actively used for archiving. - `closed`: The BCC email address is no longer used for archiving. */
    public var status: String?

    public init(accountId: String? = nil, action: String? = nil, email: String? = nil, modified: String? = nil, modifiedBy: UserInfo? = nil, status: String? = nil) {
        self.accountId = accountId
        self.action = action
        self.email = email
        self.modified = modified
        self.modifiedBy = modifiedBy
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId
        case action
        case email
        case modified
        case modifiedBy
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(modified, forKey: .modified)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encodeIfPresent(status, forKey: .status)
    }

    public static func == (lhs: BccEmailArchiveHistory, rhs: BccEmailArchiveHistory) -> Bool {
        lhs.accountId == rhs.accountId &&
            lhs.action == rhs.action &&
            lhs.email == rhs.email &&
            lhs.modified == rhs.modified &&
            lhs.modifiedBy == rhs.modifiedBy &&
            lhs.status == rhs.status
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountId?.hashValue)
        hasher.combine(action?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(modified?.hashValue)
        hasher.combine(modifiedBy?.hashValue)
        hasher.combine(status?.hashValue)
    }
}

//
// RecipientSignatureInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Allows the sender to pre-specify the signature name, signature initials and signature font used in the signature stamp for the recipient.  Used only with recipient types In Person Signers and Signers. */
public final class RecipientSignatureInformation: Content, Hashable {
    /** The font type to use for the signature if the signature is not drawn. The following font styles  are supported. The quotes are to indicate that these values are strings, not `enums`.  - `\"1_DocuSign\"` - `\"2_DocuSign\"` - `\"3_DocuSign\"` - `\"4_DocuSign\"` - `\"5_DocuSign\"` - `\"6_DocuSign\"` - `\"7_DocuSign\"` - `\"8_DocuSign\"` - `\"Mistral\"` - `\"Rage Italic\"`  */
    public var fontStyle: String?
    /** Specifies the user's signature in initials format. */
    public var signatureInitials: String?
    /** Specifies the user's signature name. */
    public var signatureName: String?

    public init(fontStyle: String? = nil, signatureInitials: String? = nil, signatureName: String? = nil) {
        self.fontStyle = fontStyle
        self.signatureInitials = signatureInitials
        self.signatureName = signatureName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fontStyle
        case signatureInitials
        case signatureName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fontStyle, forKey: .fontStyle)
        try container.encodeIfPresent(signatureInitials, forKey: .signatureInitials)
        try container.encodeIfPresent(signatureName, forKey: .signatureName)
    }

    public static func == (lhs: RecipientSignatureInformation, rhs: RecipientSignatureInformation) -> Bool {
        lhs.fontStyle == rhs.fontStyle &&
            lhs.signatureInitials == rhs.signatureInitials &&
            lhs.signatureName == rhs.signatureName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fontStyle?.hashValue)
        hasher.combine(signatureInitials?.hashValue)
        hasher.combine(signatureName?.hashValue)
    }
}

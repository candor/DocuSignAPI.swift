//
// RecipientDomain.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class RecipientDomain: Content, Hashable {
    /**  */
    public var active: String?
    /**  */
    public var domainCode: String?
    /**  */
    public var domainName: String?
    /**  */
    public var recipientDomainId: String?

    public init(active: String? = nil, domainCode: String? = nil, domainName: String? = nil, recipientDomainId: String? = nil) {
        self.active = active
        self.domainCode = domainCode
        self.domainName = domainName
        self.recipientDomainId = recipientDomainId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case domainCode
        case domainName
        case recipientDomainId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(domainCode, forKey: .domainCode)
        try container.encodeIfPresent(domainName, forKey: .domainName)
        try container.encodeIfPresent(recipientDomainId, forKey: .recipientDomainId)
    }

    public static func == (lhs: RecipientDomain, rhs: RecipientDomain) -> Bool {
        lhs.active == rhs.active &&
            lhs.domainCode == rhs.domainCode &&
            lhs.domainName == rhs.domainName &&
            lhs.recipientDomainId == rhs.recipientDomainId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(active?.hashValue)
        hasher.combine(domainCode?.hashValue)
        hasher.combine(domainName?.hashValue)
        hasher.combine(recipientDomainId?.hashValue)
    }
}

//
// ReportInProductRunResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ReportInProductRunResponse: Content, Hashable {
    /** The last index position in the result set.  */
    public var endPosition: String?
    /**  */
    public var exceededMaxResults: String?
    /**  */
    public var lastWarehouseRefreshDateTime: String?
    /** The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`. */
    public var resultSetSize: String?
    /**  */
    public var rows: [ReportInProductRunResponseRow]?
    /** The starting index position of the current result set. */
    public var startPosition: String?
    /** The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`. */
    public var totalSetSize: String?

    public init(endPosition: String? = nil, exceededMaxResults: String? = nil, lastWarehouseRefreshDateTime: String? = nil, resultSetSize: String? = nil, rows: [ReportInProductRunResponseRow]? = nil, startPosition: String? = nil, totalSetSize: String? = nil) {
        self.endPosition = endPosition
        self.exceededMaxResults = exceededMaxResults
        self.lastWarehouseRefreshDateTime = lastWarehouseRefreshDateTime
        self.resultSetSize = resultSetSize
        self.rows = rows
        self.startPosition = startPosition
        self.totalSetSize = totalSetSize
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case endPosition
        case exceededMaxResults
        case lastWarehouseRefreshDateTime
        case resultSetSize
        case rows
        case startPosition
        case totalSetSize
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(endPosition, forKey: .endPosition)
        try container.encodeIfPresent(exceededMaxResults, forKey: .exceededMaxResults)
        try container.encodeIfPresent(lastWarehouseRefreshDateTime, forKey: .lastWarehouseRefreshDateTime)
        try container.encodeIfPresent(resultSetSize, forKey: .resultSetSize)
        try container.encodeIfPresent(rows, forKey: .rows)
        try container.encodeIfPresent(startPosition, forKey: .startPosition)
        try container.encodeIfPresent(totalSetSize, forKey: .totalSetSize)
    }

    public static func == (lhs: ReportInProductRunResponse, rhs: ReportInProductRunResponse) -> Bool {
        lhs.endPosition == rhs.endPosition &&
            lhs.exceededMaxResults == rhs.exceededMaxResults &&
            lhs.lastWarehouseRefreshDateTime == rhs.lastWarehouseRefreshDateTime &&
            lhs.resultSetSize == rhs.resultSetSize &&
            lhs.rows == rhs.rows &&
            lhs.startPosition == rhs.startPosition &&
            lhs.totalSetSize == rhs.totalSetSize
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endPosition?.hashValue)
        hasher.combine(exceededMaxResults?.hashValue)
        hasher.combine(lastWarehouseRefreshDateTime?.hashValue)
        hasher.combine(resultSetSize?.hashValue)
        hasher.combine(rows?.hashValue)
        hasher.combine(startPosition?.hashValue)
        hasher.combine(totalSetSize?.hashValue)
    }
}

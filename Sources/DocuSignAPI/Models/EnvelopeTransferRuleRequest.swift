//
// EnvelopeTransferRuleRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** This object contains details about the envelope transfer rule that you want to create. */
public final class EnvelopeTransferRuleRequest: Content, Hashable {
    /** When set to **true**, the original owner is added as a carbon copy recipient after envelope transfer. The default value is **false**. */
    public var carbonCopyOriginalOwner: String?
    /** When set to **true**, the envelope transfer rule is active. */
    public var enabled: String?
    /** The id of the envelope transfer rule. The system generates this id when the rule is first created. */
    public var envelopeTransferRuleId: String?
    /** The type of envelope event that triggers the transfer. Valid values are:  - `sent` - `before sent`  - `completed` */
    public var eventType: String?
    /** Information about the group that triggers the transfer. */
    public var fromGroups: [Group]?
    /** Information about the user who triggers the transfer. */
    public var fromUsers: [UserInformation]?
    /** The UTC DateTime when the envelope transfer rule was last modified. This property is read only. */
    public var modifiedDate: String?
    public var modifiedUser: UserInformation?
    public var toFolder: Folder?
    public var toUser: UserInformation?

    public init(carbonCopyOriginalOwner: String? = nil, enabled: String? = nil, envelopeTransferRuleId: String? = nil, eventType: String? = nil, fromGroups: [Group]? = nil, fromUsers: [UserInformation]? = nil, modifiedDate: String? = nil, modifiedUser: UserInformation? = nil, toFolder: Folder? = nil, toUser: UserInformation? = nil) {
        self.carbonCopyOriginalOwner = carbonCopyOriginalOwner
        self.enabled = enabled
        self.envelopeTransferRuleId = envelopeTransferRuleId
        self.eventType = eventType
        self.fromGroups = fromGroups
        self.fromUsers = fromUsers
        self.modifiedDate = modifiedDate
        self.modifiedUser = modifiedUser
        self.toFolder = toFolder
        self.toUser = toUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case carbonCopyOriginalOwner
        case enabled
        case envelopeTransferRuleId
        case eventType
        case fromGroups
        case fromUsers
        case modifiedDate
        case modifiedUser
        case toFolder
        case toUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(carbonCopyOriginalOwner, forKey: .carbonCopyOriginalOwner)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(envelopeTransferRuleId, forKey: .envelopeTransferRuleId)
        try container.encodeIfPresent(eventType, forKey: .eventType)
        try container.encodeIfPresent(fromGroups, forKey: .fromGroups)
        try container.encodeIfPresent(fromUsers, forKey: .fromUsers)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedUser, forKey: .modifiedUser)
        try container.encodeIfPresent(toFolder, forKey: .toFolder)
        try container.encodeIfPresent(toUser, forKey: .toUser)
    }

    public static func == (lhs: EnvelopeTransferRuleRequest, rhs: EnvelopeTransferRuleRequest) -> Bool {
        lhs.carbonCopyOriginalOwner == rhs.carbonCopyOriginalOwner &&
            lhs.enabled == rhs.enabled &&
            lhs.envelopeTransferRuleId == rhs.envelopeTransferRuleId &&
            lhs.eventType == rhs.eventType &&
            lhs.fromGroups == rhs.fromGroups &&
            lhs.fromUsers == rhs.fromUsers &&
            lhs.modifiedDate == rhs.modifiedDate &&
            lhs.modifiedUser == rhs.modifiedUser &&
            lhs.toFolder == rhs.toFolder &&
            lhs.toUser == rhs.toUser
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(carbonCopyOriginalOwner?.hashValue)
        hasher.combine(enabled?.hashValue)
        hasher.combine(envelopeTransferRuleId?.hashValue)
        hasher.combine(eventType?.hashValue)
        hasher.combine(fromGroups?.hashValue)
        hasher.combine(fromUsers?.hashValue)
        hasher.combine(modifiedDate?.hashValue)
        hasher.combine(modifiedUser?.hashValue)
        hasher.combine(toFolder?.hashValue)
        hasher.combine(toUser?.hashValue)
    }
}

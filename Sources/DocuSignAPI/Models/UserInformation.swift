//
// UserInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** User information. */
public final class UserInformation: Content, Hashable {
    /** Access code provided to the user to activate the account. */
    public var activationAccessCode: String?
    /** The name of the user's company. */
    public var company: String?
    /** Object representing the user's custom Connect configuration. */
    public var connectConfigurations: [ConnectUserObject]?
    /** The three-letter code for the user's country. */
    public var countryCode: String?
    /** The UTC DateTime when the item was created. */
    public var createdDateTime: String?
    /** The name/value pair information for the user custom setting. */
    public var customSettings: [NameValue]?
    /** The default account ID associated with the user. */
    public var defaultAccountId: String?
    /** The user's email address. */
    public var email: String?
    /** Boolean value that specifies whether the user is enabled for updates from DocuSign Connect. */
    public var enableConnectForUser: String?
    public var errorDetails: ErrorDetails?
    /** The user's first name.  Maximum Length: 50 characters. */
    public var firstName: String?
    public var forgottenPasswordInfo: ForgottenPasswordInformation?
    /** A list of the group information for groups to add the user to. Use [UserGroups::listGroups](https://developers.docusign.com/esign-rest-api/reference/UserGroups/Groups/list) to get information about groups.  When setting a user's group, only the `groupId` is required.  */
    public var groupList: [Group]?
    public var homeAddress: AddressInformation?
    /** The URI for retrieving the image of the user's initials. */
    public var initialsImageUri: String?
    /** Determines if the feature set is actively set as part of the plan. */
    public var isAdmin: String?
    /** When set to **true**, National Association of Realtors (NAR) signature logos are enabled for the user. */
    public var isNAREnabled: String?
    /** The user's job title. */
    public var jobTitle: String?
    /** The date and time when the user last logged in to the system. */
    public var lastLogin: String?
    /** The user's last name.  Maximum Length: 50 characters. */
    public var lastName: String?
    /** Boolean value that indicates whether the user is currently logged in or not. */
    public var loginStatus: String?
    /** The user's middle name.  Limit: 50 characters. */
    public var middleName: String?
    /** The user's encrypted password hash. */
    public var password: String?
    /** If password expiration is enabled, the date-time when the user's password expires. */
    public var passwordExpiration: String?
    /** The ID of the permission profile. Possible values include:  - `2301416` (for the `DocuSign Viewer` profile) - `2301415` (for the `DocuSign Sender` profile) - `2301414` (for the `Account Administrator` profile)  In addition, any custom permission profiles associated with your account will have an automatically generated `permissionProfileId`. */
    public var permissionProfileId: String?
    /** The name of the account permission profile.   Example: `Account Administrator` */
    public var permissionProfileName: String?
    /** The URL for retrieving the user's profile image. */
    public var profileImageUri: String?
    /** When set to **true**, specifies that an activation email be sent to the user. */
    public var sendActivationEmail: String?
    /** When set to **true**, specifies that an additional activation email be sent if user's log on fails before the account is activated. */
    public var sendActivationOnInvalidLogin: String?
    /** An endpoint URI that you can use to retrieve the user's signature image. */
    public var signatureImageUri: String?
    /**  */
    public var subscribe: String?
    /** The suffix for the user's name, such as Jr, IV, PhD, etc.  Limit: 50 characters.  */
    public var suffixName: String?
    /** The title of the user. */
    public var title: String?
    /** A URI containing the user ID. */
    public var uri: String?
    /** The date and time that the user was added to the account. */
    public var userAddedToAccountDateTime: String?
    /** The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.  */
    public var userId: String?
    /** The name of the user. */
    public var userName: String?
    /** The date and time that the user's profile was last modified. */
    public var userProfileLastModifiedDate: String?
    public var userSettings: UserSettingsInformation?
    /** Status of the user's account. One of:  - `ActivationRequired` - `ActivationSent` - `Active` - `Closed` - `Disabled`  */
    public var userStatus: String?
    /** The type of user, for example `CompanyUser`. */
    public var userType: String?
    public var workAddress: AddressInformation?

    public init(activationAccessCode: String? = nil, company: String? = nil, connectConfigurations: [ConnectUserObject]? = nil, countryCode: String? = nil, createdDateTime: String? = nil, customSettings: [NameValue]? = nil, defaultAccountId: String? = nil, email: String? = nil, enableConnectForUser: String? = nil, errorDetails: ErrorDetails? = nil, firstName: String? = nil, forgottenPasswordInfo: ForgottenPasswordInformation? = nil, groupList: [Group]? = nil, homeAddress: AddressInformation? = nil, initialsImageUri: String? = nil, isAdmin: String? = nil, isNAREnabled: String? = nil, jobTitle: String? = nil, lastLogin: String? = nil, lastName: String? = nil, loginStatus: String? = nil, middleName: String? = nil, password: String? = nil, passwordExpiration: String? = nil, permissionProfileId: String? = nil, permissionProfileName: String? = nil, profileImageUri: String? = nil, sendActivationEmail: String? = nil, sendActivationOnInvalidLogin: String? = nil, signatureImageUri: String? = nil, subscribe: String? = nil, suffixName: String? = nil, title: String? = nil, uri: String? = nil, userAddedToAccountDateTime: String? = nil, userId: String? = nil, userName: String? = nil, userProfileLastModifiedDate: String? = nil, userSettings: UserSettingsInformation? = nil, userStatus: String? = nil, userType: String? = nil, workAddress: AddressInformation? = nil) {
        self.activationAccessCode = activationAccessCode
        self.company = company
        self.connectConfigurations = connectConfigurations
        self.countryCode = countryCode
        self.createdDateTime = createdDateTime
        self.customSettings = customSettings
        self.defaultAccountId = defaultAccountId
        self.email = email
        self.enableConnectForUser = enableConnectForUser
        self.errorDetails = errorDetails
        self.firstName = firstName
        self.forgottenPasswordInfo = forgottenPasswordInfo
        self.groupList = groupList
        self.homeAddress = homeAddress
        self.initialsImageUri = initialsImageUri
        self.isAdmin = isAdmin
        self.isNAREnabled = isNAREnabled
        self.jobTitle = jobTitle
        self.lastLogin = lastLogin
        self.lastName = lastName
        self.loginStatus = loginStatus
        self.middleName = middleName
        self.password = password
        self.passwordExpiration = passwordExpiration
        self.permissionProfileId = permissionProfileId
        self.permissionProfileName = permissionProfileName
        self.profileImageUri = profileImageUri
        self.sendActivationEmail = sendActivationEmail
        self.sendActivationOnInvalidLogin = sendActivationOnInvalidLogin
        self.signatureImageUri = signatureImageUri
        self.subscribe = subscribe
        self.suffixName = suffixName
        self.title = title
        self.uri = uri
        self.userAddedToAccountDateTime = userAddedToAccountDateTime
        self.userId = userId
        self.userName = userName
        self.userProfileLastModifiedDate = userProfileLastModifiedDate
        self.userSettings = userSettings
        self.userStatus = userStatus
        self.userType = userType
        self.workAddress = workAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activationAccessCode
        case company
        case connectConfigurations
        case countryCode
        case createdDateTime
        case customSettings
        case defaultAccountId
        case email
        case enableConnectForUser
        case errorDetails
        case firstName
        case forgottenPasswordInfo
        case groupList
        case homeAddress
        case initialsImageUri
        case isAdmin
        case isNAREnabled
        case jobTitle
        case lastLogin
        case lastName
        case loginStatus
        case middleName
        case password
        case passwordExpiration
        case permissionProfileId
        case permissionProfileName
        case profileImageUri
        case sendActivationEmail
        case sendActivationOnInvalidLogin
        case signatureImageUri
        case subscribe
        case suffixName
        case title
        case uri
        case userAddedToAccountDateTime
        case userId
        case userName
        case userProfileLastModifiedDate
        case userSettings
        case userStatus
        case userType
        case workAddress
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activationAccessCode, forKey: .activationAccessCode)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(connectConfigurations, forKey: .connectConfigurations)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(createdDateTime, forKey: .createdDateTime)
        try container.encodeIfPresent(customSettings, forKey: .customSettings)
        try container.encodeIfPresent(defaultAccountId, forKey: .defaultAccountId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(enableConnectForUser, forKey: .enableConnectForUser)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(forgottenPasswordInfo, forKey: .forgottenPasswordInfo)
        try container.encodeIfPresent(groupList, forKey: .groupList)
        try container.encodeIfPresent(homeAddress, forKey: .homeAddress)
        try container.encodeIfPresent(initialsImageUri, forKey: .initialsImageUri)
        try container.encodeIfPresent(isAdmin, forKey: .isAdmin)
        try container.encodeIfPresent(isNAREnabled, forKey: .isNAREnabled)
        try container.encodeIfPresent(jobTitle, forKey: .jobTitle)
        try container.encodeIfPresent(lastLogin, forKey: .lastLogin)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(loginStatus, forKey: .loginStatus)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(passwordExpiration, forKey: .passwordExpiration)
        try container.encodeIfPresent(permissionProfileId, forKey: .permissionProfileId)
        try container.encodeIfPresent(permissionProfileName, forKey: .permissionProfileName)
        try container.encodeIfPresent(profileImageUri, forKey: .profileImageUri)
        try container.encodeIfPresent(sendActivationEmail, forKey: .sendActivationEmail)
        try container.encodeIfPresent(sendActivationOnInvalidLogin, forKey: .sendActivationOnInvalidLogin)
        try container.encodeIfPresent(signatureImageUri, forKey: .signatureImageUri)
        try container.encodeIfPresent(subscribe, forKey: .subscribe)
        try container.encodeIfPresent(suffixName, forKey: .suffixName)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(userAddedToAccountDateTime, forKey: .userAddedToAccountDateTime)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(userProfileLastModifiedDate, forKey: .userProfileLastModifiedDate)
        try container.encodeIfPresent(userSettings, forKey: .userSettings)
        try container.encodeIfPresent(userStatus, forKey: .userStatus)
        try container.encodeIfPresent(userType, forKey: .userType)
        try container.encodeIfPresent(workAddress, forKey: .workAddress)
    }

    public static func == (lhs: UserInformation, rhs: UserInformation) -> Bool {
        lhs.activationAccessCode == rhs.activationAccessCode &&
            lhs.company == rhs.company &&
            lhs.connectConfigurations == rhs.connectConfigurations &&
            lhs.countryCode == rhs.countryCode &&
            lhs.createdDateTime == rhs.createdDateTime &&
            lhs.customSettings == rhs.customSettings &&
            lhs.defaultAccountId == rhs.defaultAccountId &&
            lhs.email == rhs.email &&
            lhs.enableConnectForUser == rhs.enableConnectForUser &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.firstName == rhs.firstName &&
            lhs.forgottenPasswordInfo == rhs.forgottenPasswordInfo &&
            lhs.groupList == rhs.groupList &&
            lhs.homeAddress == rhs.homeAddress &&
            lhs.initialsImageUri == rhs.initialsImageUri &&
            lhs.isAdmin == rhs.isAdmin &&
            lhs.isNAREnabled == rhs.isNAREnabled &&
            lhs.jobTitle == rhs.jobTitle &&
            lhs.lastLogin == rhs.lastLogin &&
            lhs.lastName == rhs.lastName &&
            lhs.loginStatus == rhs.loginStatus &&
            lhs.middleName == rhs.middleName &&
            lhs.password == rhs.password &&
            lhs.passwordExpiration == rhs.passwordExpiration &&
            lhs.permissionProfileId == rhs.permissionProfileId &&
            lhs.permissionProfileName == rhs.permissionProfileName &&
            lhs.profileImageUri == rhs.profileImageUri &&
            lhs.sendActivationEmail == rhs.sendActivationEmail &&
            lhs.sendActivationOnInvalidLogin == rhs.sendActivationOnInvalidLogin &&
            lhs.signatureImageUri == rhs.signatureImageUri &&
            lhs.subscribe == rhs.subscribe &&
            lhs.suffixName == rhs.suffixName &&
            lhs.title == rhs.title &&
            lhs.uri == rhs.uri &&
            lhs.userAddedToAccountDateTime == rhs.userAddedToAccountDateTime &&
            lhs.userId == rhs.userId &&
            lhs.userName == rhs.userName &&
            lhs.userProfileLastModifiedDate == rhs.userProfileLastModifiedDate &&
            lhs.userSettings == rhs.userSettings &&
            lhs.userStatus == rhs.userStatus &&
            lhs.userType == rhs.userType &&
            lhs.workAddress == rhs.workAddress
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(activationAccessCode?.hashValue)
        hasher.combine(company?.hashValue)
        hasher.combine(connectConfigurations?.hashValue)
        hasher.combine(countryCode?.hashValue)
        hasher.combine(createdDateTime?.hashValue)
        hasher.combine(customSettings?.hashValue)
        hasher.combine(defaultAccountId?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(enableConnectForUser?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(firstName?.hashValue)
        hasher.combine(forgottenPasswordInfo?.hashValue)
        hasher.combine(groupList?.hashValue)
        hasher.combine(homeAddress?.hashValue)
        hasher.combine(initialsImageUri?.hashValue)
        hasher.combine(isAdmin?.hashValue)
        hasher.combine(isNAREnabled?.hashValue)
        hasher.combine(jobTitle?.hashValue)
        hasher.combine(lastLogin?.hashValue)
        hasher.combine(lastName?.hashValue)
        hasher.combine(loginStatus?.hashValue)
        hasher.combine(middleName?.hashValue)
        hasher.combine(password?.hashValue)
        hasher.combine(passwordExpiration?.hashValue)
        hasher.combine(permissionProfileId?.hashValue)
        hasher.combine(permissionProfileName?.hashValue)
        hasher.combine(profileImageUri?.hashValue)
        hasher.combine(sendActivationEmail?.hashValue)
        hasher.combine(sendActivationOnInvalidLogin?.hashValue)
        hasher.combine(signatureImageUri?.hashValue)
        hasher.combine(subscribe?.hashValue)
        hasher.combine(suffixName?.hashValue)
        hasher.combine(title?.hashValue)
        hasher.combine(uri?.hashValue)
        hasher.combine(userAddedToAccountDateTime?.hashValue)
        hasher.combine(userId?.hashValue)
        hasher.combine(userName?.hashValue)
        hasher.combine(userProfileLastModifiedDate?.hashValue)
        hasher.combine(userSettings?.hashValue)
        hasher.combine(userStatus?.hashValue)
        hasher.combine(userType?.hashValue)
        hasher.combine(workAddress?.hashValue)
    }
}

//
// ConditionalRecipientRuleCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ConditionalRecipientRuleCondition: Content, Hashable {
    /**  */
    public var filters: [ConditionalRecipientRuleFilter]?
    /** An integer that specifies the order in which rules are processed. Lower values are processed before higher values. */
    public var order: String?
    /**  */
    public var recipientLabel: String?

    public init(filters: [ConditionalRecipientRuleFilter]? = nil, order: String? = nil, recipientLabel: String? = nil) {
        self.filters = filters
        self.order = order
        self.recipientLabel = recipientLabel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filters
        case order
        case recipientLabel
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(filters, forKey: .filters)
        try container.encodeIfPresent(order, forKey: .order)
        try container.encodeIfPresent(recipientLabel, forKey: .recipientLabel)
    }

    public static func == (lhs: ConditionalRecipientRuleCondition, rhs: ConditionalRecipientRuleCondition) -> Bool {
        lhs.filters == rhs.filters &&
            lhs.order == rhs.order &&
            lhs.recipientLabel == rhs.recipientLabel
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(filters?.hashValue)
        hasher.combine(order?.hashValue)
        hasher.combine(recipientLabel?.hashValue)
    }
}

//
// DowngradePlanUpdateResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class DowngradePlanUpdateResponse: Content, Hashable {
    /** The type of payment method used for the account. Valid values are:  - `credit_card` -  */
    public var accountPaymentMethod: String?
    /**  */
    public var downgradeEffectiveDate: String?
    /**  */
    public var downgradePaymentCycle: String?
    /**  */
    public var downgradePlanId: String?
    /**  */
    public var downgradePlanName: String?
    /**  */
    public var downgradeRequestStatus: String?
    /**  */
    public var message: String?

    public init(accountPaymentMethod: String? = nil, downgradeEffectiveDate: String? = nil, downgradePaymentCycle: String? = nil, downgradePlanId: String? = nil, downgradePlanName: String? = nil, downgradeRequestStatus: String? = nil, message: String? = nil) {
        self.accountPaymentMethod = accountPaymentMethod
        self.downgradeEffectiveDate = downgradeEffectiveDate
        self.downgradePaymentCycle = downgradePaymentCycle
        self.downgradePlanId = downgradePlanId
        self.downgradePlanName = downgradePlanName
        self.downgradeRequestStatus = downgradeRequestStatus
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountPaymentMethod
        case downgradeEffectiveDate
        case downgradePaymentCycle
        case downgradePlanId
        case downgradePlanName
        case downgradeRequestStatus
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountPaymentMethod, forKey: .accountPaymentMethod)
        try container.encodeIfPresent(downgradeEffectiveDate, forKey: .downgradeEffectiveDate)
        try container.encodeIfPresent(downgradePaymentCycle, forKey: .downgradePaymentCycle)
        try container.encodeIfPresent(downgradePlanId, forKey: .downgradePlanId)
        try container.encodeIfPresent(downgradePlanName, forKey: .downgradePlanName)
        try container.encodeIfPresent(downgradeRequestStatus, forKey: .downgradeRequestStatus)
        try container.encodeIfPresent(message, forKey: .message)
    }

    public static func == (lhs: DowngradePlanUpdateResponse, rhs: DowngradePlanUpdateResponse) -> Bool {
        lhs.accountPaymentMethod == rhs.accountPaymentMethod &&
            lhs.downgradeEffectiveDate == rhs.downgradeEffectiveDate &&
            lhs.downgradePaymentCycle == rhs.downgradePaymentCycle &&
            lhs.downgradePlanId == rhs.downgradePlanId &&
            lhs.downgradePlanName == rhs.downgradePlanName &&
            lhs.downgradeRequestStatus == rhs.downgradeRequestStatus &&
            lhs.message == rhs.message
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountPaymentMethod?.hashValue)
        hasher.combine(downgradeEffectiveDate?.hashValue)
        hasher.combine(downgradePaymentCycle?.hashValue)
        hasher.combine(downgradePlanId?.hashValue)
        hasher.combine(downgradePlanName?.hashValue)
        hasher.combine(downgradeRequestStatus?.hashValue)
        hasher.combine(message?.hashValue)
    }
}

//
// ConditionalRecipientRuleFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ConditionalRecipientRuleFilter: Content, Hashable {
    /**  */
    public var `operator`: String?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** Must be set to \"api\". */
    public var scope: String?
    /** The unique identifier for the tab. */
    public var tabId: String?
    /** The label associated with the tab. This value may be an empty string. If no value is provided, the tab type is used as the value.  Maximum Length: 500 characters.  */
    public var tabLabel: String?
    /** Specifies the value of the tab.  */
    public var value: String?

    public init(operator: String? = nil, recipientId: String? = nil, scope: String? = nil, tabId: String? = nil, tabLabel: String? = nil, value: String? = nil) {
        self.operator = `operator`
        self.recipientId = recipientId
        self.scope = scope
        self.tabId = tabId
        self.tabLabel = tabLabel
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case `operator`
        case recipientId
        case scope
        case tabId
        case tabLabel
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(`operator`, forKey: .operator)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(tabId, forKey: .tabId)
        try container.encodeIfPresent(tabLabel, forKey: .tabLabel)
        try container.encodeIfPresent(value, forKey: .value)
    }

    public static func == (lhs: ConditionalRecipientRuleFilter, rhs: ConditionalRecipientRuleFilter) -> Bool {
        lhs.operator == rhs.operator &&
            lhs.recipientId == rhs.recipientId &&
            lhs.scope == rhs.scope &&
            lhs.tabId == rhs.tabId &&
            lhs.tabLabel == rhs.tabLabel &&
            lhs.value == rhs.value
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`operator`?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(scope?.hashValue)
        hasher.combine(tabId?.hashValue)
        hasher.combine(tabLabel?.hashValue)
        hasher.combine(value?.hashValue)
    }
}

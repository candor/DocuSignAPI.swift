//
// TextCustomField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** This object represents a free text custom field where envelope creators and senders can enter custom data. */
public final class TextCustomField: Content, Hashable {
    /** If you are using merge fields, this property specifies the type of the merge field. The only supported value is `salesforce`. */
    public var configurationType: String?
    public var errorDetails: ErrorDetails?
    /** The id of the custom field. */
    public var fieldId: String?
    /** The name of the custom field. */
    public var name: String?
    /** When set to **true**, senders are required to enter or select information for the field before they can send the envelope. */
    public var required: String?
    /** When set to **true**, the field displays in the **Envelope Custom Fields** section when a user creates or sends an envelope. */
    public var show: String?
    /** The value of the custom field. The user who creates or sends the envelope provides this value. Maximum length: 100 characters. */
    public var value: String?

    public init(configurationType: String? = nil, errorDetails: ErrorDetails? = nil, fieldId: String? = nil, name: String? = nil, required: String? = nil, show: String? = nil, value: String? = nil) {
        self.configurationType = configurationType
        self.errorDetails = errorDetails
        self.fieldId = fieldId
        self.name = name
        self.required = required
        self.show = show
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case configurationType
        case errorDetails
        case fieldId
        case name
        case required
        case show
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(configurationType, forKey: .configurationType)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(fieldId, forKey: .fieldId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(required, forKey: .required)
        try container.encodeIfPresent(show, forKey: .show)
        try container.encodeIfPresent(value, forKey: .value)
    }

    public static func == (lhs: TextCustomField, rhs: TextCustomField) -> Bool {
        lhs.configurationType == rhs.configurationType &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.fieldId == rhs.fieldId &&
            lhs.name == rhs.name &&
            lhs.required == rhs.required &&
            lhs.show == rhs.show &&
            lhs.value == rhs.value
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(configurationType?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(fieldId?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(required?.hashValue)
        hasher.combine(show?.hashValue)
        hasher.combine(value?.hashValue)
    }
}

//
// SealSign.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Specifies one or more electronic seals to apply on documents. An electronic seal recipient is a legal entity rather than an actual person. Electronic Seals can be used by organizations and governments to show evidence of origin and integrity of documents. Even though electronic seals can be represented by a tab in a document, they do not require user interaction and apply automatically in the order specified by the sender. The sender is therefore the person authorizing usage of the electronic seal in the flow.  Example:   &#x60;&#x60;&#x60;json \&quot;recipients\&quot;: {       \&quot;seals\&quot;: [         {           \&quot;recipientId\&quot;: \&quot;1\&quot;,           \&quot;routingOrder\&quot; : 1,           \&quot;recipientSignatureProviders\&quot;: [             {               \&quot;sealName\&quot;: \&quot;52e9d968-xxxx-xxxx-xxxx-4682bc45c106\&quot;             }        ]      }    ]  },     .     .     . &#x60;&#x60;&#x60; For more information about Electronic Seals, see [Apply Electronic Seals to Your Documents](https://support.docusign.com/en/guides/ndse-user-guide-apply-electronic-seals).  */
public final class SealSign: Content, Hashable {
    /** Not applicable. */
    public var accessCode: String?
    public var accessCodeMetadata: PropertyMetadata?
    /** Not applicable. */
    public var addAccessCodeToEmail: String?
    /**  */
    public var allowSystemOverrideForLockedRecipient: String?
    /** Not applicable. */
    public var clientUserId: String?
    /** Not applicable. */
    public var completedCount: String?
    /** Not applicable. */
    public var customFields: [String]?
    /** Not applicable. */
    public var declinedDateTime: String?
    /** Not applicable. */
    public var declinedReason: String?
    /** Not applicable. */
    public var deliveredDateTime: String?
    /** Reserved for DocuSign. */
    public var deliveryMethod: String?
    public var deliveryMethodMetadata: PropertyMetadata?
    /**  */
    public var designatorId: String?
    /**  */
    public var designatorIdGuid: String?
    /** Not applicable. */
    public var documentVisibility: [DocumentVisibility]?
    public var emailNotification: RecipientEmailNotification?
    /** Not applicable. */
    public var embeddedRecipientStartURL: String?
    public var errorDetails: ErrorDetails?
    /** Reserved for DocuSign. */
    public var faxNumber: String?
    public var faxNumberMetadata: PropertyMetadata?
    /** Not applicable. */
    public var idCheckConfigurationName: String?
    public var idCheckConfigurationNameMetadata: PropertyMetadata?
    public var idCheckInformationInput: IdCheckInformationInput?
    public var identityVerification: RecipientIdentityVerification?
    /** Not applicable. */
    public var inheritEmailNotificationConfiguration: String?
    /** Reserved for DocuSign. */
    public var lockedRecipientPhoneAuthEditable: String?
    /** Reserved for DocuSign. */
    public var lockedRecipientSmsEditable: String?
    /** Not applicable. */
    public var name: String?
    /** Not applicable. */
    public var note: String?
    public var noteMetadata: PropertyMetadata?
    public var phoneAuthentication: RecipientPhoneAuthentication?
    /** Not applicable. */
    public var recipientAttachments: [RecipientAttachment]?
    public var recipientAuthenticationStatus: AuthenticationStatus?
    /** Metadata about the features that are supported for the recipient type. Read only. */
    public var recipientFeatureMetadata: [FeatureAvailableMetadata]?
    /** (Required) The `recipientId` used when the envelope or template was created.   This is a local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only. */
    public var recipientIdGuid: String?
    /** (Required) Indicates which electronic seal to apply on documents when creating an envelope. */
    public var recipientSignatureProviders: [RecipientSignatureProvider]?
    /** The recipient type, as specified by the following values: - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order. - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order. - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents. - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients. - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer. - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order. - `seal`: Electronic seal recipients represent legal entities. - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope. - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope. */
    public var recipientType: String?
    public var recipientTypeMetadata: PropertyMetadata?
    /** Not applicable. */
    public var requireIdLookup: String?
    public var requireIdLookupMetadata: PropertyMetadata?
    /** Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients. */
    public var roleName: String?
    /** (Optional, default: 1)  Specifies the routing order of the electronic seal in the envelope. The routing order assigned to your electronic seal cannot be shared with another recipient. It is recommended that you set a routing order for your electronic seals.  */
    public var routingOrder: String?
    public var routingOrderMetadata: PropertyMetadata?
    /** Not applicable. */
    public var sentDateTime: String?
    /** Not applicable. */
    public var signedDateTime: String?
    public var smsAuthentication: RecipientSMSAuthentication?
    /** Deprecated. */
    public var socialAuthentications: [SocialAuthentication]?
    /** The recipient's status. Read only.   Possible values:  - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account. - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope. - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`). - `declined`: The recipient declined to sign the document(s) in the envelope. - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope. - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step. - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope. - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`. */
    public var status: String?
    /** The code associated with the recipient's status. Read only. */
    public var statusCode: String?
    /** Not applicable. */
    public var suppressEmails: String?
    public var tabs: EnvelopeRecipientTabs?
    /** When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.  */
    public var templateLocked: String?
    /** When set to **true**, the sender may not remove the recipient. Used only when working with template recipients. */
    public var templateRequired: String?
    /** Not applicable. */
    public var totalTabCount: String?
    /** Not applicable. */
    public var userId: String?

    public init(accessCode: String? = nil, accessCodeMetadata: PropertyMetadata? = nil, addAccessCodeToEmail: String? = nil, allowSystemOverrideForLockedRecipient: String? = nil, clientUserId: String? = nil, completedCount: String? = nil, customFields: [String]? = nil, declinedDateTime: String? = nil, declinedReason: String? = nil, deliveredDateTime: String? = nil, deliveryMethod: String? = nil, deliveryMethodMetadata: PropertyMetadata? = nil, designatorId: String? = nil, designatorIdGuid: String? = nil, documentVisibility: [DocumentVisibility]? = nil, emailNotification: RecipientEmailNotification? = nil, embeddedRecipientStartURL: String? = nil, errorDetails: ErrorDetails? = nil, faxNumber: String? = nil, faxNumberMetadata: PropertyMetadata? = nil, idCheckConfigurationName: String? = nil, idCheckConfigurationNameMetadata: PropertyMetadata? = nil, idCheckInformationInput: IdCheckInformationInput? = nil, identityVerification: RecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: String? = nil, lockedRecipientPhoneAuthEditable: String? = nil, lockedRecipientSmsEditable: String? = nil, name: String? = nil, note: String? = nil, noteMetadata: PropertyMetadata? = nil, phoneAuthentication: RecipientPhoneAuthentication? = nil, recipientAttachments: [RecipientAttachment]? = nil, recipientAuthenticationStatus: AuthenticationStatus? = nil, recipientFeatureMetadata: [FeatureAvailableMetadata]? = nil, recipientId: String? = nil, recipientIdGuid: String? = nil, recipientSignatureProviders: [RecipientSignatureProvider]? = nil, recipientType: String? = nil, recipientTypeMetadata: PropertyMetadata? = nil, requireIdLookup: String? = nil, requireIdLookupMetadata: PropertyMetadata? = nil, roleName: String? = nil, routingOrder: String? = nil, routingOrderMetadata: PropertyMetadata? = nil, sentDateTime: String? = nil, signedDateTime: String? = nil, smsAuthentication: RecipientSMSAuthentication? = nil, socialAuthentications: [SocialAuthentication]? = nil, status: String? = nil, statusCode: String? = nil, suppressEmails: String? = nil, tabs: EnvelopeRecipientTabs? = nil, templateLocked: String? = nil, templateRequired: String? = nil, totalTabCount: String? = nil, userId: String? = nil) {
        self.accessCode = accessCode
        self.accessCodeMetadata = accessCodeMetadata
        self.addAccessCodeToEmail = addAccessCodeToEmail
        self.allowSystemOverrideForLockedRecipient = allowSystemOverrideForLockedRecipient
        self.clientUserId = clientUserId
        self.completedCount = completedCount
        self.customFields = customFields
        self.declinedDateTime = declinedDateTime
        self.declinedReason = declinedReason
        self.deliveredDateTime = deliveredDateTime
        self.deliveryMethod = deliveryMethod
        self.deliveryMethodMetadata = deliveryMethodMetadata
        self.designatorId = designatorId
        self.designatorIdGuid = designatorIdGuid
        self.documentVisibility = documentVisibility
        self.emailNotification = emailNotification
        self.embeddedRecipientStartURL = embeddedRecipientStartURL
        self.errorDetails = errorDetails
        self.faxNumber = faxNumber
        self.faxNumberMetadata = faxNumberMetadata
        self.idCheckConfigurationName = idCheckConfigurationName
        self.idCheckConfigurationNameMetadata = idCheckConfigurationNameMetadata
        self.idCheckInformationInput = idCheckInformationInput
        self.identityVerification = identityVerification
        self.inheritEmailNotificationConfiguration = inheritEmailNotificationConfiguration
        self.lockedRecipientPhoneAuthEditable = lockedRecipientPhoneAuthEditable
        self.lockedRecipientSmsEditable = lockedRecipientSmsEditable
        self.name = name
        self.note = note
        self.noteMetadata = noteMetadata
        self.phoneAuthentication = phoneAuthentication
        self.recipientAttachments = recipientAttachments
        self.recipientAuthenticationStatus = recipientAuthenticationStatus
        self.recipientFeatureMetadata = recipientFeatureMetadata
        self.recipientId = recipientId
        self.recipientIdGuid = recipientIdGuid
        self.recipientSignatureProviders = recipientSignatureProviders
        self.recipientType = recipientType
        self.recipientTypeMetadata = recipientTypeMetadata
        self.requireIdLookup = requireIdLookup
        self.requireIdLookupMetadata = requireIdLookupMetadata
        self.roleName = roleName
        self.routingOrder = routingOrder
        self.routingOrderMetadata = routingOrderMetadata
        self.sentDateTime = sentDateTime
        self.signedDateTime = signedDateTime
        self.smsAuthentication = smsAuthentication
        self.socialAuthentications = socialAuthentications
        self.status = status
        self.statusCode = statusCode
        self.suppressEmails = suppressEmails
        self.tabs = tabs
        self.templateLocked = templateLocked
        self.templateRequired = templateRequired
        self.totalTabCount = totalTabCount
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCode
        case accessCodeMetadata
        case addAccessCodeToEmail
        case allowSystemOverrideForLockedRecipient
        case clientUserId
        case completedCount
        case customFields
        case declinedDateTime
        case declinedReason
        case deliveredDateTime
        case deliveryMethod
        case deliveryMethodMetadata
        case designatorId
        case designatorIdGuid
        case documentVisibility
        case emailNotification
        case embeddedRecipientStartURL
        case errorDetails
        case faxNumber
        case faxNumberMetadata
        case idCheckConfigurationName
        case idCheckConfigurationNameMetadata
        case idCheckInformationInput
        case identityVerification
        case inheritEmailNotificationConfiguration
        case lockedRecipientPhoneAuthEditable
        case lockedRecipientSmsEditable
        case name
        case note
        case noteMetadata
        case phoneAuthentication
        case recipientAttachments
        case recipientAuthenticationStatus
        case recipientFeatureMetadata
        case recipientId
        case recipientIdGuid
        case recipientSignatureProviders
        case recipientType
        case recipientTypeMetadata
        case requireIdLookup
        case requireIdLookupMetadata
        case roleName
        case routingOrder
        case routingOrderMetadata
        case sentDateTime
        case signedDateTime
        case smsAuthentication
        case socialAuthentications
        case status
        case statusCode
        case suppressEmails
        case tabs
        case templateLocked
        case templateRequired
        case totalTabCount
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessCode, forKey: .accessCode)
        try container.encodeIfPresent(accessCodeMetadata, forKey: .accessCodeMetadata)
        try container.encodeIfPresent(addAccessCodeToEmail, forKey: .addAccessCodeToEmail)
        try container.encodeIfPresent(allowSystemOverrideForLockedRecipient, forKey: .allowSystemOverrideForLockedRecipient)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(completedCount, forKey: .completedCount)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(declinedDateTime, forKey: .declinedDateTime)
        try container.encodeIfPresent(declinedReason, forKey: .declinedReason)
        try container.encodeIfPresent(deliveredDateTime, forKey: .deliveredDateTime)
        try container.encodeIfPresent(deliveryMethod, forKey: .deliveryMethod)
        try container.encodeIfPresent(deliveryMethodMetadata, forKey: .deliveryMethodMetadata)
        try container.encodeIfPresent(designatorId, forKey: .designatorId)
        try container.encodeIfPresent(designatorIdGuid, forKey: .designatorIdGuid)
        try container.encodeIfPresent(documentVisibility, forKey: .documentVisibility)
        try container.encodeIfPresent(emailNotification, forKey: .emailNotification)
        try container.encodeIfPresent(embeddedRecipientStartURL, forKey: .embeddedRecipientStartURL)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(faxNumber, forKey: .faxNumber)
        try container.encodeIfPresent(faxNumberMetadata, forKey: .faxNumberMetadata)
        try container.encodeIfPresent(idCheckConfigurationName, forKey: .idCheckConfigurationName)
        try container.encodeIfPresent(idCheckConfigurationNameMetadata, forKey: .idCheckConfigurationNameMetadata)
        try container.encodeIfPresent(idCheckInformationInput, forKey: .idCheckInformationInput)
        try container.encodeIfPresent(identityVerification, forKey: .identityVerification)
        try container.encodeIfPresent(inheritEmailNotificationConfiguration, forKey: .inheritEmailNotificationConfiguration)
        try container.encodeIfPresent(lockedRecipientPhoneAuthEditable, forKey: .lockedRecipientPhoneAuthEditable)
        try container.encodeIfPresent(lockedRecipientSmsEditable, forKey: .lockedRecipientSmsEditable)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(noteMetadata, forKey: .noteMetadata)
        try container.encodeIfPresent(phoneAuthentication, forKey: .phoneAuthentication)
        try container.encodeIfPresent(recipientAttachments, forKey: .recipientAttachments)
        try container.encodeIfPresent(recipientAuthenticationStatus, forKey: .recipientAuthenticationStatus)
        try container.encodeIfPresent(recipientFeatureMetadata, forKey: .recipientFeatureMetadata)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientIdGuid, forKey: .recipientIdGuid)
        try container.encodeIfPresent(recipientSignatureProviders, forKey: .recipientSignatureProviders)
        try container.encodeIfPresent(recipientType, forKey: .recipientType)
        try container.encodeIfPresent(recipientTypeMetadata, forKey: .recipientTypeMetadata)
        try container.encodeIfPresent(requireIdLookup, forKey: .requireIdLookup)
        try container.encodeIfPresent(requireIdLookupMetadata, forKey: .requireIdLookupMetadata)
        try container.encodeIfPresent(roleName, forKey: .roleName)
        try container.encodeIfPresent(routingOrder, forKey: .routingOrder)
        try container.encodeIfPresent(routingOrderMetadata, forKey: .routingOrderMetadata)
        try container.encodeIfPresent(sentDateTime, forKey: .sentDateTime)
        try container.encodeIfPresent(signedDateTime, forKey: .signedDateTime)
        try container.encodeIfPresent(smsAuthentication, forKey: .smsAuthentication)
        try container.encodeIfPresent(socialAuthentications, forKey: .socialAuthentications)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(suppressEmails, forKey: .suppressEmails)
        try container.encodeIfPresent(tabs, forKey: .tabs)
        try container.encodeIfPresent(templateLocked, forKey: .templateLocked)
        try container.encodeIfPresent(templateRequired, forKey: .templateRequired)
        try container.encodeIfPresent(totalTabCount, forKey: .totalTabCount)
        try container.encodeIfPresent(userId, forKey: .userId)
    }

    public static func == (lhs: SealSign, rhs: SealSign) -> Bool {
        lhs.accessCode == rhs.accessCode &&
            lhs.accessCodeMetadata == rhs.accessCodeMetadata &&
            lhs.addAccessCodeToEmail == rhs.addAccessCodeToEmail &&
            lhs.allowSystemOverrideForLockedRecipient == rhs.allowSystemOverrideForLockedRecipient &&
            lhs.clientUserId == rhs.clientUserId &&
            lhs.completedCount == rhs.completedCount &&
            lhs.customFields == rhs.customFields &&
            lhs.declinedDateTime == rhs.declinedDateTime &&
            lhs.declinedReason == rhs.declinedReason &&
            lhs.deliveredDateTime == rhs.deliveredDateTime &&
            lhs.deliveryMethod == rhs.deliveryMethod &&
            lhs.deliveryMethodMetadata == rhs.deliveryMethodMetadata &&
            lhs.designatorId == rhs.designatorId &&
            lhs.designatorIdGuid == rhs.designatorIdGuid &&
            lhs.documentVisibility == rhs.documentVisibility &&
            lhs.emailNotification == rhs.emailNotification &&
            lhs.embeddedRecipientStartURL == rhs.embeddedRecipientStartURL &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.faxNumber == rhs.faxNumber &&
            lhs.faxNumberMetadata == rhs.faxNumberMetadata &&
            lhs.idCheckConfigurationName == rhs.idCheckConfigurationName &&
            lhs.idCheckConfigurationNameMetadata == rhs.idCheckConfigurationNameMetadata &&
            lhs.idCheckInformationInput == rhs.idCheckInformationInput &&
            lhs.identityVerification == rhs.identityVerification &&
            lhs.inheritEmailNotificationConfiguration == rhs.inheritEmailNotificationConfiguration &&
            lhs.lockedRecipientPhoneAuthEditable == rhs.lockedRecipientPhoneAuthEditable &&
            lhs.lockedRecipientSmsEditable == rhs.lockedRecipientSmsEditable &&
            lhs.name == rhs.name &&
            lhs.note == rhs.note &&
            lhs.noteMetadata == rhs.noteMetadata &&
            lhs.phoneAuthentication == rhs.phoneAuthentication &&
            lhs.recipientAttachments == rhs.recipientAttachments &&
            lhs.recipientAuthenticationStatus == rhs.recipientAuthenticationStatus &&
            lhs.recipientFeatureMetadata == rhs.recipientFeatureMetadata &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientIdGuid == rhs.recipientIdGuid &&
            lhs.recipientSignatureProviders == rhs.recipientSignatureProviders &&
            lhs.recipientType == rhs.recipientType &&
            lhs.recipientTypeMetadata == rhs.recipientTypeMetadata &&
            lhs.requireIdLookup == rhs.requireIdLookup &&
            lhs.requireIdLookupMetadata == rhs.requireIdLookupMetadata &&
            lhs.roleName == rhs.roleName &&
            lhs.routingOrder == rhs.routingOrder &&
            lhs.routingOrderMetadata == rhs.routingOrderMetadata &&
            lhs.sentDateTime == rhs.sentDateTime &&
            lhs.signedDateTime == rhs.signedDateTime &&
            lhs.smsAuthentication == rhs.smsAuthentication &&
            lhs.socialAuthentications == rhs.socialAuthentications &&
            lhs.status == rhs.status &&
            lhs.statusCode == rhs.statusCode &&
            lhs.suppressEmails == rhs.suppressEmails &&
            lhs.tabs == rhs.tabs &&
            lhs.templateLocked == rhs.templateLocked &&
            lhs.templateRequired == rhs.templateRequired &&
            lhs.totalTabCount == rhs.totalTabCount &&
            lhs.userId == rhs.userId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCode?.hashValue)
        hasher.combine(accessCodeMetadata?.hashValue)
        hasher.combine(addAccessCodeToEmail?.hashValue)
        hasher.combine(allowSystemOverrideForLockedRecipient?.hashValue)
        hasher.combine(clientUserId?.hashValue)
        hasher.combine(completedCount?.hashValue)
        hasher.combine(customFields?.hashValue)
        hasher.combine(declinedDateTime?.hashValue)
        hasher.combine(declinedReason?.hashValue)
        hasher.combine(deliveredDateTime?.hashValue)
        hasher.combine(deliveryMethod?.hashValue)
        hasher.combine(deliveryMethodMetadata?.hashValue)
        hasher.combine(designatorId?.hashValue)
        hasher.combine(designatorIdGuid?.hashValue)
        hasher.combine(documentVisibility?.hashValue)
        hasher.combine(emailNotification?.hashValue)
        hasher.combine(embeddedRecipientStartURL?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(faxNumber?.hashValue)
        hasher.combine(faxNumberMetadata?.hashValue)
        hasher.combine(idCheckConfigurationName?.hashValue)
        hasher.combine(idCheckConfigurationNameMetadata?.hashValue)
        hasher.combine(idCheckInformationInput?.hashValue)
        hasher.combine(identityVerification?.hashValue)
        hasher.combine(inheritEmailNotificationConfiguration?.hashValue)
        hasher.combine(lockedRecipientPhoneAuthEditable?.hashValue)
        hasher.combine(lockedRecipientSmsEditable?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(note?.hashValue)
        hasher.combine(noteMetadata?.hashValue)
        hasher.combine(phoneAuthentication?.hashValue)
        hasher.combine(recipientAttachments?.hashValue)
        hasher.combine(recipientAuthenticationStatus?.hashValue)
        hasher.combine(recipientFeatureMetadata?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientIdGuid?.hashValue)
        hasher.combine(recipientSignatureProviders?.hashValue)
        hasher.combine(recipientType?.hashValue)
        hasher.combine(recipientTypeMetadata?.hashValue)
        hasher.combine(requireIdLookup?.hashValue)
        hasher.combine(requireIdLookupMetadata?.hashValue)
        hasher.combine(roleName?.hashValue)
        hasher.combine(routingOrder?.hashValue)
        hasher.combine(routingOrderMetadata?.hashValue)
        hasher.combine(sentDateTime?.hashValue)
        hasher.combine(signedDateTime?.hashValue)
        hasher.combine(smsAuthentication?.hashValue)
        hasher.combine(socialAuthentications?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(statusCode?.hashValue)
        hasher.combine(suppressEmails?.hashValue)
        hasher.combine(tabs?.hashValue)
        hasher.combine(templateLocked?.hashValue)
        hasher.combine(templateRequired?.hashValue)
        hasher.combine(totalTabCount?.hashValue)
        hasher.combine(userId?.hashValue)
    }
}

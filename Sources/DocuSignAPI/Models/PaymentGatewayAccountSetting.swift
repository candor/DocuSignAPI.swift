//
// PaymentGatewayAccountSetting.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class PaymentGatewayAccountSetting: Content, Hashable {
    /**  */
    public var apiFields: String?
    /**  */
    public var authorizationCode: String?
    /**  */
    public var credentialStatus: String?
    /**  */
    public var merchantId: String?

    public init(apiFields: String? = nil, authorizationCode: String? = nil, credentialStatus: String? = nil, merchantId: String? = nil) {
        self.apiFields = apiFields
        self.authorizationCode = authorizationCode
        self.credentialStatus = credentialStatus
        self.merchantId = merchantId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case apiFields
        case authorizationCode
        case credentialStatus
        case merchantId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(apiFields, forKey: .apiFields)
        try container.encodeIfPresent(authorizationCode, forKey: .authorizationCode)
        try container.encodeIfPresent(credentialStatus, forKey: .credentialStatus)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
    }

    public static func == (lhs: PaymentGatewayAccountSetting, rhs: PaymentGatewayAccountSetting) -> Bool {
        lhs.apiFields == rhs.apiFields &&
            lhs.authorizationCode == rhs.authorizationCode &&
            lhs.credentialStatus == rhs.credentialStatus &&
            lhs.merchantId == rhs.merchantId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(apiFields?.hashValue)
        hasher.combine(authorizationCode?.hashValue)
        hasher.combine(credentialStatus?.hashValue)
        hasher.combine(merchantId?.hashValue)
    }
}

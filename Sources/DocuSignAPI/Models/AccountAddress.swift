//
// AccountAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains information about the address associated with the account. */
public final class AccountAddress: Content, Hashable {
    /** The first line of the address. Maximum length: 100 characters. */
    public var address1: String?
    /** The second line of the address. Maximum length: 100 characters. */
    public var address2: String?
    /** The city associated with the address. Maximum length: 40 characters. */
    public var city: String?
    /** The country associated with the address. Maximum length: 50 characters. */
    public var country: String?
    /** The email address associated with the account. */
    public var email: String?
    /** The fax number associated with the account. */
    public var fax: String?
    /** The first name of the user associated with the account. Maximum Length: 50 characters. */
    public var firstName: String?
    /** The last name of the user associated with the account. */
    public var lastName: String?
    /** The phone number associated with the account. */
    public var phone: String?
    /** The postal code associated with the address. Maximum length: 20 characters. */
    public var postalCode: String?
    /** The state or province associated with the address. Maximum length: 40 characters. */
    public var state: String?
    /** An array of supported countries associated with the account. */
    public var supportedCountries: [Country]?

    public init(address1: String? = nil, address2: String? = nil, city: String? = nil, country: String? = nil, email: String? = nil, fax: String? = nil, firstName: String? = nil, lastName: String? = nil, phone: String? = nil, postalCode: String? = nil, state: String? = nil, supportedCountries: [Country]? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.country = country
        self.email = email
        self.fax = fax
        self.firstName = firstName
        self.lastName = lastName
        self.phone = phone
        self.postalCode = postalCode
        self.state = state
        self.supportedCountries = supportedCountries
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address1
        case address2
        case city
        case country
        case email
        case fax
        case firstName
        case lastName
        case phone
        case postalCode
        case state
        case supportedCountries
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(fax, forKey: .fax)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(supportedCountries, forKey: .supportedCountries)
    }

    public static func == (lhs: AccountAddress, rhs: AccountAddress) -> Bool {
        lhs.address1 == rhs.address1 &&
            lhs.address2 == rhs.address2 &&
            lhs.city == rhs.city &&
            lhs.country == rhs.country &&
            lhs.email == rhs.email &&
            lhs.fax == rhs.fax &&
            lhs.firstName == rhs.firstName &&
            lhs.lastName == rhs.lastName &&
            lhs.phone == rhs.phone &&
            lhs.postalCode == rhs.postalCode &&
            lhs.state == rhs.state &&
            lhs.supportedCountries == rhs.supportedCountries
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address1?.hashValue)
        hasher.combine(address2?.hashValue)
        hasher.combine(city?.hashValue)
        hasher.combine(country?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(fax?.hashValue)
        hasher.combine(firstName?.hashValue)
        hasher.combine(lastName?.hashValue)
        hasher.combine(phone?.hashValue)
        hasher.combine(postalCode?.hashValue)
        hasher.combine(state?.hashValue)
        hasher.combine(supportedCountries?.hashValue)
    }
}

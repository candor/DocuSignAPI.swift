//
// FolderItemV2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Information about folder item results. */
public final class FolderItemV2: Content, Hashable {
    /** If the item is an envelope, this is the UTC DateTime when the envelope was completed. */
    public var completedDateTime: String?
    /** The UTC DateTime when the item was created. */
    public var createdDateTime: String?
    /** If the item is an envelope, this is the id of the envelope. */
    public var envelopeId: String?
    /** If the item is an envelope, this is the URI for retrieving it. */
    public var envelopeUri: String?
    /** The date and time the envelope is set to expire. */
    public var expireDateTime: String?
    /** The id of the folder. */
    public var folderId: String?
    /** If the item is a subfolder, this is the URI for retrieving it. */
    public var folderUri: String?
    /** When **true**, indicates compliance with United States Food and Drug Administration (FDA) regulations on electronic records and electronic signatures (ERES). */
    public var is21CFRPart11: String?
    /** The name of the user who owns the folder. */
    public var ownerName: String?
    public var recipients: EnvelopeRecipients?
    /** Contains a URI for an endpoint that you can use to retrieve the recipients. */
    public var recipientsUri: String?
    /** The name of the sender's company. */
    public var senderCompany: String?
    /** The sender's email address. */
    public var senderEmail: String?
    /** The sender's name. */
    public var senderName: String?
    /** The sender's id. */
    public var senderUserId: String?
    /** The UTC DateTime when the envelope was sent. Read only. */
    public var sentDateTime: String?
    /** The status of the item. */
    public var status: String?
    /** The subject of the envelope. */
    public var subject: String?
    /** The id of the template. */
    public var templateId: String?
    /** The URI for retrieving the template. */
    public var templateUri: String?

    public init(completedDateTime: String? = nil, createdDateTime: String? = nil, envelopeId: String? = nil, envelopeUri: String? = nil, expireDateTime: String? = nil, folderId: String? = nil, folderUri: String? = nil, is21CFRPart11: String? = nil, ownerName: String? = nil, recipients: EnvelopeRecipients? = nil, recipientsUri: String? = nil, senderCompany: String? = nil, senderEmail: String? = nil, senderName: String? = nil, senderUserId: String? = nil, sentDateTime: String? = nil, status: String? = nil, subject: String? = nil, templateId: String? = nil, templateUri: String? = nil) {
        self.completedDateTime = completedDateTime
        self.createdDateTime = createdDateTime
        self.envelopeId = envelopeId
        self.envelopeUri = envelopeUri
        self.expireDateTime = expireDateTime
        self.folderId = folderId
        self.folderUri = folderUri
        self.is21CFRPart11 = is21CFRPart11
        self.ownerName = ownerName
        self.recipients = recipients
        self.recipientsUri = recipientsUri
        self.senderCompany = senderCompany
        self.senderEmail = senderEmail
        self.senderName = senderName
        self.senderUserId = senderUserId
        self.sentDateTime = sentDateTime
        self.status = status
        self.subject = subject
        self.templateId = templateId
        self.templateUri = templateUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case completedDateTime
        case createdDateTime
        case envelopeId
        case envelopeUri
        case expireDateTime
        case folderId
        case folderUri
        case is21CFRPart11
        case ownerName
        case recipients
        case recipientsUri
        case senderCompany
        case senderEmail
        case senderName
        case senderUserId
        case sentDateTime
        case status
        case subject
        case templateId
        case templateUri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(completedDateTime, forKey: .completedDateTime)
        try container.encodeIfPresent(createdDateTime, forKey: .createdDateTime)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
        try container.encodeIfPresent(envelopeUri, forKey: .envelopeUri)
        try container.encodeIfPresent(expireDateTime, forKey: .expireDateTime)
        try container.encodeIfPresent(folderId, forKey: .folderId)
        try container.encodeIfPresent(folderUri, forKey: .folderUri)
        try container.encodeIfPresent(is21CFRPart11, forKey: .is21CFRPart11)
        try container.encodeIfPresent(ownerName, forKey: .ownerName)
        try container.encodeIfPresent(recipients, forKey: .recipients)
        try container.encodeIfPresent(recipientsUri, forKey: .recipientsUri)
        try container.encodeIfPresent(senderCompany, forKey: .senderCompany)
        try container.encodeIfPresent(senderEmail, forKey: .senderEmail)
        try container.encodeIfPresent(senderName, forKey: .senderName)
        try container.encodeIfPresent(senderUserId, forKey: .senderUserId)
        try container.encodeIfPresent(sentDateTime, forKey: .sentDateTime)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(templateUri, forKey: .templateUri)
    }

    public static func == (lhs: FolderItemV2, rhs: FolderItemV2) -> Bool {
        lhs.completedDateTime == rhs.completedDateTime &&
            lhs.createdDateTime == rhs.createdDateTime &&
            lhs.envelopeId == rhs.envelopeId &&
            lhs.envelopeUri == rhs.envelopeUri &&
            lhs.expireDateTime == rhs.expireDateTime &&
            lhs.folderId == rhs.folderId &&
            lhs.folderUri == rhs.folderUri &&
            lhs.is21CFRPart11 == rhs.is21CFRPart11 &&
            lhs.ownerName == rhs.ownerName &&
            lhs.recipients == rhs.recipients &&
            lhs.recipientsUri == rhs.recipientsUri &&
            lhs.senderCompany == rhs.senderCompany &&
            lhs.senderEmail == rhs.senderEmail &&
            lhs.senderName == rhs.senderName &&
            lhs.senderUserId == rhs.senderUserId &&
            lhs.sentDateTime == rhs.sentDateTime &&
            lhs.status == rhs.status &&
            lhs.subject == rhs.subject &&
            lhs.templateId == rhs.templateId &&
            lhs.templateUri == rhs.templateUri
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(completedDateTime?.hashValue)
        hasher.combine(createdDateTime?.hashValue)
        hasher.combine(envelopeId?.hashValue)
        hasher.combine(envelopeUri?.hashValue)
        hasher.combine(expireDateTime?.hashValue)
        hasher.combine(folderId?.hashValue)
        hasher.combine(folderUri?.hashValue)
        hasher.combine(is21CFRPart11?.hashValue)
        hasher.combine(ownerName?.hashValue)
        hasher.combine(recipients?.hashValue)
        hasher.combine(recipientsUri?.hashValue)
        hasher.combine(senderCompany?.hashValue)
        hasher.combine(senderEmail?.hashValue)
        hasher.combine(senderName?.hashValue)
        hasher.combine(senderUserId?.hashValue)
        hasher.combine(sentDateTime?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(subject?.hashValue)
        hasher.combine(templateId?.hashValue)
        hasher.combine(templateUri?.hashValue)
    }
}

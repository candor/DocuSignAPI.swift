//
// Money.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Describes information about the &#x60;total&#x60; of a payment.  */
public final class Money: Content, Hashable {
    /** The total payment amount in the currency's base unit. For example, for USD the base currency is one cent.  */
    public var amountInBaseUnit: String?
    /** The three-letter [ISO 4217][ISO4217] currency code for the payment.  For example:  * AUD Australian dollar * CAD Canadian dollar * EUR Euro * GBP Great Britain pound * USD United States dollar  This is a read-only property.  [ISO4217]:          https://en.wikipedia.org/wiki/ISO_4217  */
    public var currency: String?
    /** The payment amount as displayed in the `currency`.  For example, if the payment amount is USD 12.59, the `amountInBaseUnit` is 1259 (cents), and the displayed amount is `$12.59 USD`.  This is a read-only property.  */
    public var displayAmount: String?

    public init(amountInBaseUnit: String? = nil, currency: String? = nil, displayAmount: String? = nil) {
        self.amountInBaseUnit = amountInBaseUnit
        self.currency = currency
        self.displayAmount = displayAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountInBaseUnit
        case currency
        case displayAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amountInBaseUnit, forKey: .amountInBaseUnit)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(displayAmount, forKey: .displayAmount)
    }

    public static func == (lhs: Money, rhs: Money) -> Bool {
        lhs.amountInBaseUnit == rhs.amountInBaseUnit &&
            lhs.currency == rhs.currency &&
            lhs.displayAmount == rhs.displayAmount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountInBaseUnit?.hashValue)
        hasher.combine(currency?.hashValue)
        hasher.combine(displayAmount?.hashValue)
    }
}

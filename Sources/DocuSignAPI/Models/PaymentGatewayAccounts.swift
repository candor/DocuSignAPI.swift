//
// PaymentGatewayAccounts.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Information about a connected payment gateway account. */
public final class PaymentGatewayAccounts: Content, Hashable {
    /** When **true**, the sender can pass custom metadata about the payment to the payment gateway. You pass in this metadata on an EnvelopeRecipientTab, in the `customMetadata` property under `paymentDetails`.   For example, this property is set to **true** for the Authorize.net gateway by default. As a result, the extra metadata that you send displays for the Authorize.net transaction in the merchant gateway portal under **Description**.  **Note**: This property is read only and cannot be changed. */
    public var allowCustomMetadata: Bool?
    public var config: PaymentGatewayAccountSetting?
    /** A user-defined name for a connected gateway account.  This name is used in the Admin panel in the list of connected accounts and in Tagger in the payment gateway selector.  The human-readable version of `paymentGatewayAccountId`. */
    public var displayName: String?
    /** When **true**, the payment gateway account is enabled. */
    public var isEnabled: String?
    /** Reserved for DocuSign. */
    public var isLegacy: String?
    /** The UTC DateTime that the payment gateway account was last updated. */
    public var lastModified: String?
    /** Payment gateway used by the connected gateway account. This is the name used by the API. For a human-readable version use `paymentGatewayDisplayName`.  Possible values are:  * `Stripe` * `Braintree` * `AuthorizeDotNet` */
    public var paymentGateway: String?
    /** A GUID that identifies the payment gateway account. For a human-readable version use `displayName`. */
    public var paymentGatewayAccountId: String?
    /** The display name of the payment gateway that the connected gateway account uses. This is the human-readable version of `paymentGateway`.  Possible values are:  * Stripe * Braintree * Authorize.Net */
    public var paymentGatewayDisplayName: String?
    public var payPalLegacySettings: PayPalLegacySettings?
    /** A list of ISO 4217 currency codes for the currencies that the payment gateway account supports.  Examples:   - `USD` - `CAD` - `EUR` - `HKD` */
    public var supportedCurrencies: [String]?
    /** An array of paymentMethodWithOptions objects that specify the payment methods that are available for the gateway. */
    public var supportedPaymentMethods: [String]?
    /** An array of `paymentMethodWithOptions` objects that specify the payment methods that are available for the gateway, as well as the payment options that are compatible with each payment method. */
    public var supportedPaymentMethodsWithOptions: [PaymentMethodWithOptions]?
    /**  */
    public var zeroDecimalCurrencies: [String]?

    public init(allowCustomMetadata: Bool? = nil, config: PaymentGatewayAccountSetting? = nil, displayName: String? = nil, isEnabled: String? = nil, isLegacy: String? = nil, lastModified: String? = nil, paymentGateway: String? = nil, paymentGatewayAccountId: String? = nil, paymentGatewayDisplayName: String? = nil, payPalLegacySettings: PayPalLegacySettings? = nil, supportedCurrencies: [String]? = nil, supportedPaymentMethods: [String]? = nil, supportedPaymentMethodsWithOptions: [PaymentMethodWithOptions]? = nil, zeroDecimalCurrencies: [String]? = nil) {
        self.allowCustomMetadata = allowCustomMetadata
        self.config = config
        self.displayName = displayName
        self.isEnabled = isEnabled
        self.isLegacy = isLegacy
        self.lastModified = lastModified
        self.paymentGateway = paymentGateway
        self.paymentGatewayAccountId = paymentGatewayAccountId
        self.paymentGatewayDisplayName = paymentGatewayDisplayName
        self.payPalLegacySettings = payPalLegacySettings
        self.supportedCurrencies = supportedCurrencies
        self.supportedPaymentMethods = supportedPaymentMethods
        self.supportedPaymentMethodsWithOptions = supportedPaymentMethodsWithOptions
        self.zeroDecimalCurrencies = zeroDecimalCurrencies
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowCustomMetadata
        case config
        case displayName
        case isEnabled
        case isLegacy
        case lastModified
        case paymentGateway
        case paymentGatewayAccountId
        case paymentGatewayDisplayName
        case payPalLegacySettings
        case supportedCurrencies
        case supportedPaymentMethods
        case supportedPaymentMethodsWithOptions
        case zeroDecimalCurrencies
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowCustomMetadata, forKey: .allowCustomMetadata)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
        try container.encodeIfPresent(isLegacy, forKey: .isLegacy)
        try container.encodeIfPresent(lastModified, forKey: .lastModified)
        try container.encodeIfPresent(paymentGateway, forKey: .paymentGateway)
        try container.encodeIfPresent(paymentGatewayAccountId, forKey: .paymentGatewayAccountId)
        try container.encodeIfPresent(paymentGatewayDisplayName, forKey: .paymentGatewayDisplayName)
        try container.encodeIfPresent(payPalLegacySettings, forKey: .payPalLegacySettings)
        try container.encodeIfPresent(supportedCurrencies, forKey: .supportedCurrencies)
        try container.encodeIfPresent(supportedPaymentMethods, forKey: .supportedPaymentMethods)
        try container.encodeIfPresent(supportedPaymentMethodsWithOptions, forKey: .supportedPaymentMethodsWithOptions)
        try container.encodeIfPresent(zeroDecimalCurrencies, forKey: .zeroDecimalCurrencies)
    }

    public static func == (lhs: PaymentGatewayAccounts, rhs: PaymentGatewayAccounts) -> Bool {
        lhs.allowCustomMetadata == rhs.allowCustomMetadata &&
            lhs.config == rhs.config &&
            lhs.displayName == rhs.displayName &&
            lhs.isEnabled == rhs.isEnabled &&
            lhs.isLegacy == rhs.isLegacy &&
            lhs.lastModified == rhs.lastModified &&
            lhs.paymentGateway == rhs.paymentGateway &&
            lhs.paymentGatewayAccountId == rhs.paymentGatewayAccountId &&
            lhs.paymentGatewayDisplayName == rhs.paymentGatewayDisplayName &&
            lhs.payPalLegacySettings == rhs.payPalLegacySettings &&
            lhs.supportedCurrencies == rhs.supportedCurrencies &&
            lhs.supportedPaymentMethods == rhs.supportedPaymentMethods &&
            lhs.supportedPaymentMethodsWithOptions == rhs.supportedPaymentMethodsWithOptions &&
            lhs.zeroDecimalCurrencies == rhs.zeroDecimalCurrencies
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(allowCustomMetadata?.hashValue)
        hasher.combine(config?.hashValue)
        hasher.combine(displayName?.hashValue)
        hasher.combine(isEnabled?.hashValue)
        hasher.combine(isLegacy?.hashValue)
        hasher.combine(lastModified?.hashValue)
        hasher.combine(paymentGateway?.hashValue)
        hasher.combine(paymentGatewayAccountId?.hashValue)
        hasher.combine(paymentGatewayDisplayName?.hashValue)
        hasher.combine(payPalLegacySettings?.hashValue)
        hasher.combine(supportedCurrencies?.hashValue)
        hasher.combine(supportedPaymentMethods?.hashValue)
        hasher.combine(supportedPaymentMethodsWithOptions?.hashValue)
        hasher.combine(zeroDecimalCurrencies?.hashValue)
    }
}

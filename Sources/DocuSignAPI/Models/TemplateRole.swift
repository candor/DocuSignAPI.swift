//
// TemplateRole.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class TemplateRole: Content, Hashable {
    /** If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required. */
    public var accessCode: String?
    /** Specifies whether the recipient is embedded or remote.   If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters.  */
    public var clientUserId: String?
    /** When set to **true**, this recipient is the default recipient and any tabs generated by the transformPdfFields option are mapped to this recipient. */
    public var defaultRecipient: String?
    /** Specifies the email associated with a role name. */
    public var email: String?
    public var emailNotification: RecipientEmailNotification?
    /** Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.  It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`  */
    public var embeddedRecipientStartURL: String?
    /** Specifies the full legal name of the signer in person signer template roles.  Maximum Length: 100 characters. */
    public var inPersonSignerName: String?
    /** Specifies the recipient's name. */
    public var name: String?
    /** The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures) */
    public var recipientSignatureProviders: [RecipientSignatureProvider]?
    /** Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients. */
    public var roleName: String?
    /** Specifies the routing order of the recipient in the envelope.  */
    public var routingOrder: String?
    /** Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).  **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.  */
    public var signingGroupId: String?
    public var tabs: EnvelopeRecipientTabs?

    public init(accessCode: String? = nil, clientUserId: String? = nil, defaultRecipient: String? = nil, email: String? = nil, emailNotification: RecipientEmailNotification? = nil, embeddedRecipientStartURL: String? = nil, inPersonSignerName: String? = nil, name: String? = nil, recipientSignatureProviders: [RecipientSignatureProvider]? = nil, roleName: String? = nil, routingOrder: String? = nil, signingGroupId: String? = nil, tabs: EnvelopeRecipientTabs? = nil) {
        self.accessCode = accessCode
        self.clientUserId = clientUserId
        self.defaultRecipient = defaultRecipient
        self.email = email
        self.emailNotification = emailNotification
        self.embeddedRecipientStartURL = embeddedRecipientStartURL
        self.inPersonSignerName = inPersonSignerName
        self.name = name
        self.recipientSignatureProviders = recipientSignatureProviders
        self.roleName = roleName
        self.routingOrder = routingOrder
        self.signingGroupId = signingGroupId
        self.tabs = tabs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCode
        case clientUserId
        case defaultRecipient
        case email
        case emailNotification
        case embeddedRecipientStartURL
        case inPersonSignerName
        case name
        case recipientSignatureProviders
        case roleName
        case routingOrder
        case signingGroupId
        case tabs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessCode, forKey: .accessCode)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(defaultRecipient, forKey: .defaultRecipient)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailNotification, forKey: .emailNotification)
        try container.encodeIfPresent(embeddedRecipientStartURL, forKey: .embeddedRecipientStartURL)
        try container.encodeIfPresent(inPersonSignerName, forKey: .inPersonSignerName)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(recipientSignatureProviders, forKey: .recipientSignatureProviders)
        try container.encodeIfPresent(roleName, forKey: .roleName)
        try container.encodeIfPresent(routingOrder, forKey: .routingOrder)
        try container.encodeIfPresent(signingGroupId, forKey: .signingGroupId)
        try container.encodeIfPresent(tabs, forKey: .tabs)
    }

    public static func == (lhs: TemplateRole, rhs: TemplateRole) -> Bool {
        lhs.accessCode == rhs.accessCode &&
            lhs.clientUserId == rhs.clientUserId &&
            lhs.defaultRecipient == rhs.defaultRecipient &&
            lhs.email == rhs.email &&
            lhs.emailNotification == rhs.emailNotification &&
            lhs.embeddedRecipientStartURL == rhs.embeddedRecipientStartURL &&
            lhs.inPersonSignerName == rhs.inPersonSignerName &&
            lhs.name == rhs.name &&
            lhs.recipientSignatureProviders == rhs.recipientSignatureProviders &&
            lhs.roleName == rhs.roleName &&
            lhs.routingOrder == rhs.routingOrder &&
            lhs.signingGroupId == rhs.signingGroupId &&
            lhs.tabs == rhs.tabs
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCode?.hashValue)
        hasher.combine(clientUserId?.hashValue)
        hasher.combine(defaultRecipient?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(emailNotification?.hashValue)
        hasher.combine(embeddedRecipientStartURL?.hashValue)
        hasher.combine(inPersonSignerName?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(recipientSignatureProviders?.hashValue)
        hasher.combine(roleName?.hashValue)
        hasher.combine(routingOrder?.hashValue)
        hasher.combine(signingGroupId?.hashValue)
        hasher.combine(tabs?.hashValue)
    }
}

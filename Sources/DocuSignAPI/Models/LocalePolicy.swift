//
// LocalePolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class LocalePolicy: Content, Hashable {
    /**  */
    public var addressFormat: String?
    public var addressFormatMetadata: SettingsMetadata?
    /**  */
    public var allowRegion: String?
    /**  */
    public var calendarType: String?
    public var calendarTypeMetadata: SettingsMetadata?
    /**  */
    public var cultureName: String?
    public var cultureNameMetadata: SettingsMetadata?
    /** The currency code for the account, based on the [ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). */
    public var currencyCode: String?
    public var currencyCodeMetadata: SettingsMetadata?
    /**  */
    public var currencyNegativeFormat: String?
    public var currencyNegativeFormatMetadata: SettingsMetadata?
    /**  */
    public var currencyPositiveFormat: String?
    public var currencyPositiveFormatMetadata: SettingsMetadata?
    /**  */
    public var customDateFormat: String?
    /**  */
    public var customSignDateFormat: String?
    /**  */
    public var customSignTimeFormat: String?
    /**  */
    public var customTimeFormat: String?
    /**  */
    public var dateFormat: String?
    public var dateFormatMetadata: SettingsMetadata?
    /**  */
    public var effectiveAddressFormat: String?
    /**  */
    public var effectiveCalendarType: String?
    /**  */
    public var effectiveCurrencyCode: String?
    /**  */
    public var effectiveCurrencyNegativeFormat: String?
    /**  */
    public var effectiveCurrencyPositiveFormat: String?
    /**  */
    public var effectiveCustomDateFormat: String?
    /**  */
    public var effectiveCustomTimeFormat: String?
    /**  */
    public var effectiveDateFormat: String?
    /**  */
    public var effectiveInitialFormat: String?
    /**  */
    public var effectiveNameFormat: String?
    /**  */
    public var effectiveTimeFormat: String?
    /**  */
    public var effectiveTimeZone: String?
    /**  */
    public var initialFormat: String?
    public var initialFormatMetadata: SettingsMetadata?
    /**  */
    public var nameFormat: String?
    public var nameFormatMetadata: SettingsMetadata?
    /** The format for the signature date. Valid values are:  - `d/M/yyyy` - `dd-MM-yy` - `dd-MMM-yy` - `dd-MM-yyyy` - `dd.MM.yyyy` - `dd-MMM-yyyy` - `dd MMMM yyyy` - `M/d/yyyy` - `MM-dd-yyyy` - `MM/dd/yyyy` - `MM/dd/yy` - `MMM-dd-yyyy` - `MMM d, yyyy` - `MMMM d, yyyy` - `yyyy-MM-dd` - `yyyy-MMM-dd` - `yyyy/MM/dd` - `yyyy MMMM d`  **Note**: Only Admin users can change this setting.  */
    public var signDateFormat: String?
    public var signDateFormatMetadata: SettingsMetadata?
    /** The format for the signature time. Valid values are:  - `none` - `HH:mm` - `h:mm` - `HH:mm:ss` - `h:mm:ss`  */
    public var signTimeFormat: String?
    public var signTimeFormatMetadata: SettingsMetadata?
    /**  */
    public var timeFormat: String?
    public var timeFormatMetadata: SettingsMetadata?
    /**  */
    public var timeZone: String?
    public var timeZoneMetadata: SettingsMetadata?

    public init(addressFormat: String? = nil, addressFormatMetadata: SettingsMetadata? = nil, allowRegion: String? = nil, calendarType: String? = nil, calendarTypeMetadata: SettingsMetadata? = nil, cultureName: String? = nil, cultureNameMetadata: SettingsMetadata? = nil, currencyCode: String? = nil, currencyCodeMetadata: SettingsMetadata? = nil, currencyNegativeFormat: String? = nil, currencyNegativeFormatMetadata: SettingsMetadata? = nil, currencyPositiveFormat: String? = nil, currencyPositiveFormatMetadata: SettingsMetadata? = nil, customDateFormat: String? = nil, customSignDateFormat: String? = nil, customSignTimeFormat: String? = nil, customTimeFormat: String? = nil, dateFormat: String? = nil, dateFormatMetadata: SettingsMetadata? = nil, effectiveAddressFormat: String? = nil, effectiveCalendarType: String? = nil, effectiveCurrencyCode: String? = nil, effectiveCurrencyNegativeFormat: String? = nil, effectiveCurrencyPositiveFormat: String? = nil, effectiveCustomDateFormat: String? = nil, effectiveCustomTimeFormat: String? = nil, effectiveDateFormat: String? = nil, effectiveInitialFormat: String? = nil, effectiveNameFormat: String? = nil, effectiveTimeFormat: String? = nil, effectiveTimeZone: String? = nil, initialFormat: String? = nil, initialFormatMetadata: SettingsMetadata? = nil, nameFormat: String? = nil, nameFormatMetadata: SettingsMetadata? = nil, signDateFormat: String? = nil, signDateFormatMetadata: SettingsMetadata? = nil, signTimeFormat: String? = nil, signTimeFormatMetadata: SettingsMetadata? = nil, timeFormat: String? = nil, timeFormatMetadata: SettingsMetadata? = nil, timeZone: String? = nil, timeZoneMetadata: SettingsMetadata? = nil) {
        self.addressFormat = addressFormat
        self.addressFormatMetadata = addressFormatMetadata
        self.allowRegion = allowRegion
        self.calendarType = calendarType
        self.calendarTypeMetadata = calendarTypeMetadata
        self.cultureName = cultureName
        self.cultureNameMetadata = cultureNameMetadata
        self.currencyCode = currencyCode
        self.currencyCodeMetadata = currencyCodeMetadata
        self.currencyNegativeFormat = currencyNegativeFormat
        self.currencyNegativeFormatMetadata = currencyNegativeFormatMetadata
        self.currencyPositiveFormat = currencyPositiveFormat
        self.currencyPositiveFormatMetadata = currencyPositiveFormatMetadata
        self.customDateFormat = customDateFormat
        self.customSignDateFormat = customSignDateFormat
        self.customSignTimeFormat = customSignTimeFormat
        self.customTimeFormat = customTimeFormat
        self.dateFormat = dateFormat
        self.dateFormatMetadata = dateFormatMetadata
        self.effectiveAddressFormat = effectiveAddressFormat
        self.effectiveCalendarType = effectiveCalendarType
        self.effectiveCurrencyCode = effectiveCurrencyCode
        self.effectiveCurrencyNegativeFormat = effectiveCurrencyNegativeFormat
        self.effectiveCurrencyPositiveFormat = effectiveCurrencyPositiveFormat
        self.effectiveCustomDateFormat = effectiveCustomDateFormat
        self.effectiveCustomTimeFormat = effectiveCustomTimeFormat
        self.effectiveDateFormat = effectiveDateFormat
        self.effectiveInitialFormat = effectiveInitialFormat
        self.effectiveNameFormat = effectiveNameFormat
        self.effectiveTimeFormat = effectiveTimeFormat
        self.effectiveTimeZone = effectiveTimeZone
        self.initialFormat = initialFormat
        self.initialFormatMetadata = initialFormatMetadata
        self.nameFormat = nameFormat
        self.nameFormatMetadata = nameFormatMetadata
        self.signDateFormat = signDateFormat
        self.signDateFormatMetadata = signDateFormatMetadata
        self.signTimeFormat = signTimeFormat
        self.signTimeFormatMetadata = signTimeFormatMetadata
        self.timeFormat = timeFormat
        self.timeFormatMetadata = timeFormatMetadata
        self.timeZone = timeZone
        self.timeZoneMetadata = timeZoneMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addressFormat
        case addressFormatMetadata
        case allowRegion
        case calendarType
        case calendarTypeMetadata
        case cultureName
        case cultureNameMetadata
        case currencyCode
        case currencyCodeMetadata
        case currencyNegativeFormat
        case currencyNegativeFormatMetadata
        case currencyPositiveFormat
        case currencyPositiveFormatMetadata
        case customDateFormat
        case customSignDateFormat
        case customSignTimeFormat
        case customTimeFormat
        case dateFormat
        case dateFormatMetadata
        case effectiveAddressFormat
        case effectiveCalendarType
        case effectiveCurrencyCode
        case effectiveCurrencyNegativeFormat
        case effectiveCurrencyPositiveFormat
        case effectiveCustomDateFormat
        case effectiveCustomTimeFormat
        case effectiveDateFormat
        case effectiveInitialFormat
        case effectiveNameFormat
        case effectiveTimeFormat
        case effectiveTimeZone
        case initialFormat
        case initialFormatMetadata
        case nameFormat
        case nameFormatMetadata
        case signDateFormat
        case signDateFormatMetadata
        case signTimeFormat
        case signTimeFormatMetadata
        case timeFormat
        case timeFormatMetadata
        case timeZone
        case timeZoneMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(addressFormat, forKey: .addressFormat)
        try container.encodeIfPresent(addressFormatMetadata, forKey: .addressFormatMetadata)
        try container.encodeIfPresent(allowRegion, forKey: .allowRegion)
        try container.encodeIfPresent(calendarType, forKey: .calendarType)
        try container.encodeIfPresent(calendarTypeMetadata, forKey: .calendarTypeMetadata)
        try container.encodeIfPresent(cultureName, forKey: .cultureName)
        try container.encodeIfPresent(cultureNameMetadata, forKey: .cultureNameMetadata)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(currencyCodeMetadata, forKey: .currencyCodeMetadata)
        try container.encodeIfPresent(currencyNegativeFormat, forKey: .currencyNegativeFormat)
        try container.encodeIfPresent(currencyNegativeFormatMetadata, forKey: .currencyNegativeFormatMetadata)
        try container.encodeIfPresent(currencyPositiveFormat, forKey: .currencyPositiveFormat)
        try container.encodeIfPresent(currencyPositiveFormatMetadata, forKey: .currencyPositiveFormatMetadata)
        try container.encodeIfPresent(customDateFormat, forKey: .customDateFormat)
        try container.encodeIfPresent(customSignDateFormat, forKey: .customSignDateFormat)
        try container.encodeIfPresent(customSignTimeFormat, forKey: .customSignTimeFormat)
        try container.encodeIfPresent(customTimeFormat, forKey: .customTimeFormat)
        try container.encodeIfPresent(dateFormat, forKey: .dateFormat)
        try container.encodeIfPresent(dateFormatMetadata, forKey: .dateFormatMetadata)
        try container.encodeIfPresent(effectiveAddressFormat, forKey: .effectiveAddressFormat)
        try container.encodeIfPresent(effectiveCalendarType, forKey: .effectiveCalendarType)
        try container.encodeIfPresent(effectiveCurrencyCode, forKey: .effectiveCurrencyCode)
        try container.encodeIfPresent(effectiveCurrencyNegativeFormat, forKey: .effectiveCurrencyNegativeFormat)
        try container.encodeIfPresent(effectiveCurrencyPositiveFormat, forKey: .effectiveCurrencyPositiveFormat)
        try container.encodeIfPresent(effectiveCustomDateFormat, forKey: .effectiveCustomDateFormat)
        try container.encodeIfPresent(effectiveCustomTimeFormat, forKey: .effectiveCustomTimeFormat)
        try container.encodeIfPresent(effectiveDateFormat, forKey: .effectiveDateFormat)
        try container.encodeIfPresent(effectiveInitialFormat, forKey: .effectiveInitialFormat)
        try container.encodeIfPresent(effectiveNameFormat, forKey: .effectiveNameFormat)
        try container.encodeIfPresent(effectiveTimeFormat, forKey: .effectiveTimeFormat)
        try container.encodeIfPresent(effectiveTimeZone, forKey: .effectiveTimeZone)
        try container.encodeIfPresent(initialFormat, forKey: .initialFormat)
        try container.encodeIfPresent(initialFormatMetadata, forKey: .initialFormatMetadata)
        try container.encodeIfPresent(nameFormat, forKey: .nameFormat)
        try container.encodeIfPresent(nameFormatMetadata, forKey: .nameFormatMetadata)
        try container.encodeIfPresent(signDateFormat, forKey: .signDateFormat)
        try container.encodeIfPresent(signDateFormatMetadata, forKey: .signDateFormatMetadata)
        try container.encodeIfPresent(signTimeFormat, forKey: .signTimeFormat)
        try container.encodeIfPresent(signTimeFormatMetadata, forKey: .signTimeFormatMetadata)
        try container.encodeIfPresent(timeFormat, forKey: .timeFormat)
        try container.encodeIfPresent(timeFormatMetadata, forKey: .timeFormatMetadata)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(timeZoneMetadata, forKey: .timeZoneMetadata)
    }

    public static func == (lhs: LocalePolicy, rhs: LocalePolicy) -> Bool {
        lhs.addressFormat == rhs.addressFormat &&
            lhs.addressFormatMetadata == rhs.addressFormatMetadata &&
            lhs.allowRegion == rhs.allowRegion &&
            lhs.calendarType == rhs.calendarType &&
            lhs.calendarTypeMetadata == rhs.calendarTypeMetadata &&
            lhs.cultureName == rhs.cultureName &&
            lhs.cultureNameMetadata == rhs.cultureNameMetadata &&
            lhs.currencyCode == rhs.currencyCode &&
            lhs.currencyCodeMetadata == rhs.currencyCodeMetadata &&
            lhs.currencyNegativeFormat == rhs.currencyNegativeFormat &&
            lhs.currencyNegativeFormatMetadata == rhs.currencyNegativeFormatMetadata &&
            lhs.currencyPositiveFormat == rhs.currencyPositiveFormat &&
            lhs.currencyPositiveFormatMetadata == rhs.currencyPositiveFormatMetadata &&
            lhs.customDateFormat == rhs.customDateFormat &&
            lhs.customSignDateFormat == rhs.customSignDateFormat &&
            lhs.customSignTimeFormat == rhs.customSignTimeFormat &&
            lhs.customTimeFormat == rhs.customTimeFormat &&
            lhs.dateFormat == rhs.dateFormat &&
            lhs.dateFormatMetadata == rhs.dateFormatMetadata &&
            lhs.effectiveAddressFormat == rhs.effectiveAddressFormat &&
            lhs.effectiveCalendarType == rhs.effectiveCalendarType &&
            lhs.effectiveCurrencyCode == rhs.effectiveCurrencyCode &&
            lhs.effectiveCurrencyNegativeFormat == rhs.effectiveCurrencyNegativeFormat &&
            lhs.effectiveCurrencyPositiveFormat == rhs.effectiveCurrencyPositiveFormat &&
            lhs.effectiveCustomDateFormat == rhs.effectiveCustomDateFormat &&
            lhs.effectiveCustomTimeFormat == rhs.effectiveCustomTimeFormat &&
            lhs.effectiveDateFormat == rhs.effectiveDateFormat &&
            lhs.effectiveInitialFormat == rhs.effectiveInitialFormat &&
            lhs.effectiveNameFormat == rhs.effectiveNameFormat &&
            lhs.effectiveTimeFormat == rhs.effectiveTimeFormat &&
            lhs.effectiveTimeZone == rhs.effectiveTimeZone &&
            lhs.initialFormat == rhs.initialFormat &&
            lhs.initialFormatMetadata == rhs.initialFormatMetadata &&
            lhs.nameFormat == rhs.nameFormat &&
            lhs.nameFormatMetadata == rhs.nameFormatMetadata &&
            lhs.signDateFormat == rhs.signDateFormat &&
            lhs.signDateFormatMetadata == rhs.signDateFormatMetadata &&
            lhs.signTimeFormat == rhs.signTimeFormat &&
            lhs.signTimeFormatMetadata == rhs.signTimeFormatMetadata &&
            lhs.timeFormat == rhs.timeFormat &&
            lhs.timeFormatMetadata == rhs.timeFormatMetadata &&
            lhs.timeZone == rhs.timeZone &&
            lhs.timeZoneMetadata == rhs.timeZoneMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addressFormat?.hashValue)
        hasher.combine(addressFormatMetadata?.hashValue)
        hasher.combine(allowRegion?.hashValue)
        hasher.combine(calendarType?.hashValue)
        hasher.combine(calendarTypeMetadata?.hashValue)
        hasher.combine(cultureName?.hashValue)
        hasher.combine(cultureNameMetadata?.hashValue)
        hasher.combine(currencyCode?.hashValue)
        hasher.combine(currencyCodeMetadata?.hashValue)
        hasher.combine(currencyNegativeFormat?.hashValue)
        hasher.combine(currencyNegativeFormatMetadata?.hashValue)
        hasher.combine(currencyPositiveFormat?.hashValue)
        hasher.combine(currencyPositiveFormatMetadata?.hashValue)
        hasher.combine(customDateFormat?.hashValue)
        hasher.combine(customSignDateFormat?.hashValue)
        hasher.combine(customSignTimeFormat?.hashValue)
        hasher.combine(customTimeFormat?.hashValue)
        hasher.combine(dateFormat?.hashValue)
        hasher.combine(dateFormatMetadata?.hashValue)
        hasher.combine(effectiveAddressFormat?.hashValue)
        hasher.combine(effectiveCalendarType?.hashValue)
        hasher.combine(effectiveCurrencyCode?.hashValue)
        hasher.combine(effectiveCurrencyNegativeFormat?.hashValue)
        hasher.combine(effectiveCurrencyPositiveFormat?.hashValue)
        hasher.combine(effectiveCustomDateFormat?.hashValue)
        hasher.combine(effectiveCustomTimeFormat?.hashValue)
        hasher.combine(effectiveDateFormat?.hashValue)
        hasher.combine(effectiveInitialFormat?.hashValue)
        hasher.combine(effectiveNameFormat?.hashValue)
        hasher.combine(effectiveTimeFormat?.hashValue)
        hasher.combine(effectiveTimeZone?.hashValue)
        hasher.combine(initialFormat?.hashValue)
        hasher.combine(initialFormatMetadata?.hashValue)
        hasher.combine(nameFormat?.hashValue)
        hasher.combine(nameFormatMetadata?.hashValue)
        hasher.combine(signDateFormat?.hashValue)
        hasher.combine(signDateFormatMetadata?.hashValue)
        hasher.combine(signTimeFormat?.hashValue)
        hasher.combine(signTimeFormatMetadata?.hashValue)
        hasher.combine(timeFormat?.hashValue)
        hasher.combine(timeFormatMetadata?.hashValue)
        hasher.combine(timeZone?.hashValue)
        hasher.combine(timeZoneMetadata?.hashValue)
    }
}

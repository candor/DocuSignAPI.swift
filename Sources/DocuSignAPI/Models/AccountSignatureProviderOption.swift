//
// AccountSignatureProviderOption.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Reserved for DocuSign. */
public final class AccountSignatureProviderOption: Content, Hashable {
    /** Reserved for DocuSign. */
    public var signatureProviderOptionDisplayName: String?
    /** Reserved for DocuSign. */
    public var signatureProviderOptionId: String?
    /** Reserved for DocuSign. */
    public var signatureProviderOptionName: String?

    public init(signatureProviderOptionDisplayName: String? = nil, signatureProviderOptionId: String? = nil, signatureProviderOptionName: String? = nil) {
        self.signatureProviderOptionDisplayName = signatureProviderOptionDisplayName
        self.signatureProviderOptionId = signatureProviderOptionId
        self.signatureProviderOptionName = signatureProviderOptionName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case signatureProviderOptionDisplayName
        case signatureProviderOptionId
        case signatureProviderOptionName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(signatureProviderOptionDisplayName, forKey: .signatureProviderOptionDisplayName)
        try container.encodeIfPresent(signatureProviderOptionId, forKey: .signatureProviderOptionId)
        try container.encodeIfPresent(signatureProviderOptionName, forKey: .signatureProviderOptionName)
    }

    public static func == (lhs: AccountSignatureProviderOption, rhs: AccountSignatureProviderOption) -> Bool {
        lhs.signatureProviderOptionDisplayName == rhs.signatureProviderOptionDisplayName &&
            lhs.signatureProviderOptionId == rhs.signatureProviderOptionId &&
            lhs.signatureProviderOptionName == rhs.signatureProviderOptionName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(signatureProviderOptionDisplayName?.hashValue)
        hasher.combine(signatureProviderOptionId?.hashValue)
        hasher.combine(signatureProviderOptionName?.hashValue)
    }
}

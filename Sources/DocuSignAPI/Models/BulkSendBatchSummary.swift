//
// BulkSendBatchSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BulkSendBatchSummary: Content, Hashable {
    /** Identifier used to query the status of an individual bulk recipient batch. */
    public var batchId: String?
    /**  */
    public var batchName: String?
    /** The total number of items in the batch being queried. */
    public var batchSize: String?
    /**  */
    public var batchUri: String?
    /** The number of entries with a status of `failed`.  */
    public var failed: String?
    /** The number of entries with a status of `queued`. */
    public var queued: String?
    /** The number of entries with a status of `sent`. */
    public var sent: String?
    /** The date on which the bulk envelope was created. */
    public var submittedDate: String?

    public init(batchId: String? = nil, batchName: String? = nil, batchSize: String? = nil, batchUri: String? = nil, failed: String? = nil, queued: String? = nil, sent: String? = nil, submittedDate: String? = nil) {
        self.batchId = batchId
        self.batchName = batchName
        self.batchSize = batchSize
        self.batchUri = batchUri
        self.failed = failed
        self.queued = queued
        self.sent = sent
        self.submittedDate = submittedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchId
        case batchName
        case batchSize
        case batchUri
        case failed
        case queued
        case sent
        case submittedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(batchName, forKey: .batchName)
        try container.encodeIfPresent(batchSize, forKey: .batchSize)
        try container.encodeIfPresent(batchUri, forKey: .batchUri)
        try container.encodeIfPresent(failed, forKey: .failed)
        try container.encodeIfPresent(queued, forKey: .queued)
        try container.encodeIfPresent(sent, forKey: .sent)
        try container.encodeIfPresent(submittedDate, forKey: .submittedDate)
    }

    public static func == (lhs: BulkSendBatchSummary, rhs: BulkSendBatchSummary) -> Bool {
        lhs.batchId == rhs.batchId &&
            lhs.batchName == rhs.batchName &&
            lhs.batchSize == rhs.batchSize &&
            lhs.batchUri == rhs.batchUri &&
            lhs.failed == rhs.failed &&
            lhs.queued == rhs.queued &&
            lhs.sent == rhs.sent &&
            lhs.submittedDate == rhs.submittedDate
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(batchId?.hashValue)
        hasher.combine(batchName?.hashValue)
        hasher.combine(batchSize?.hashValue)
        hasher.combine(batchUri?.hashValue)
        hasher.combine(failed?.hashValue)
        hasher.combine(queued?.hashValue)
        hasher.combine(sent?.hashValue)
        hasher.combine(submittedDate?.hashValue)
    }
}

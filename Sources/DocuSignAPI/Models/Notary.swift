//
// Notary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Use DocuSign eNotary to notarize documents digitally. Check the [DocuSign eNotary support documentation](https://support.docusign.com/en/guides/ndse-user-guide-enotary-resources) to see which jurisdictions are supported.  */
public final class Notary: Content, Hashable {
    /** The creation date of the account in UTC timedate format. */
    public var createdDate: String?
    /**  */
    public var enabled: String?
    /**  */
    public var searchable: String?
    public var userInfo: UserInformation?

    public init(createdDate: String? = nil, enabled: String? = nil, searchable: String? = nil, userInfo: UserInformation? = nil) {
        self.createdDate = createdDate
        self.enabled = enabled
        self.searchable = searchable
        self.userInfo = userInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdDate
        case enabled
        case searchable
        case userInfo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(searchable, forKey: .searchable)
        try container.encodeIfPresent(userInfo, forKey: .userInfo)
    }

    public static func == (lhs: Notary, rhs: Notary) -> Bool {
        lhs.createdDate == rhs.createdDate &&
            lhs.enabled == rhs.enabled &&
            lhs.searchable == rhs.searchable &&
            lhs.userInfo == rhs.userInfo
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdDate?.hashValue)
        hasher.combine(enabled?.hashValue)
        hasher.combine(searchable?.hashValue)
        hasher.combine(userInfo?.hashValue)
    }
}

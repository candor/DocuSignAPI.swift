//
// RadioGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** This group tab is used to place radio buttons on a document. The &#x60;radios&#x60; property contains a list of [&#x60;radio&#x60;](https://developers.docusign.com/esign-rest-api/reference/Envelopes/EnvelopeRecipientTabs/create/#/definitions/radio) objects  associated with the group. Only one radio button can be selected in a group.  */
public final class RadioGroup: Content, Hashable {
    /** For conditional fields this is the `tabLabel` of the parent tab that controls this tab's visibility. */
    public var conditionalParentLabel: String?
    public var conditionalParentLabelMetadata: PropertyMetadata?
    /** For conditional fields, this is the value of the parent tab that controls the tab's visibility.  If the parent tab is a Checkbox, Radio button, Optional Signature, or Optional Initial use \"on\" as the value to show that the parent tab is active.  */
    public var conditionalParentValue: String?
    public var conditionalParentValueMetadata: PropertyMetadata?
    /** The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab. */
    public var documentId: String?
    public var documentIdMetadata: PropertyMetadata?
    /** The name of the group. The search_text provided in the call automatically performs a wild card search on group_name. */
    public var groupName: String?
    public var groupNameMetadata: PropertyMetadata?
    /** Specifies the locations and status for radio buttons that are grouped together. */
    public var radios: [Radio]?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only. */
    public var recipientIdGuid: String?
    public var recipientIdGuidMetadata: PropertyMetadata?
    public var recipientIdMetadata: PropertyMetadata?
    /** When set to **true** and shared is true, information must be entered in this field to complete the envelope.  */
    public var requireAll: String?
    public var requireAllMetadata: PropertyMetadata?
    /** Optional element for field markup. When set to **true**, the signer is required to initial when they modify a shared field. */
    public var requireInitialOnSharedChange: String?
    public var requireInitialOnSharedChangeMetadata: PropertyMetadata?
    /** When set to **true**, this custom tab is shared. */
    public var shared: String?
    public var sharedMetadata: PropertyMetadata?
    /** Indicates the type of tab (for example, `signHere` or `initialHere`). */
    public var tabType: String?
    public var tabTypeMetadata: PropertyMetadata?
    /** When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.  */
    public var templateLocked: String?
    public var templateLockedMetadata: PropertyMetadata?
    /** When set to **true**, the sender may not remove the recipient. Used only when working with template recipients. */
    public var templateRequired: String?
    public var templateRequiredMetadata: PropertyMetadata?
    /** The text of a tooltip that appears when a user hovers over a form field or tab. */
    public var tooltip: String?
    public var tooltipMetadata: PropertyMetadata?

    public init(conditionalParentLabel: String? = nil, conditionalParentLabelMetadata: PropertyMetadata? = nil, conditionalParentValue: String? = nil, conditionalParentValueMetadata: PropertyMetadata? = nil, documentId: String? = nil, documentIdMetadata: PropertyMetadata? = nil, groupName: String? = nil, groupNameMetadata: PropertyMetadata? = nil, radios: [Radio]? = nil, recipientId: String? = nil, recipientIdGuid: String? = nil, recipientIdGuidMetadata: PropertyMetadata? = nil, recipientIdMetadata: PropertyMetadata? = nil, requireAll: String? = nil, requireAllMetadata: PropertyMetadata? = nil, requireInitialOnSharedChange: String? = nil, requireInitialOnSharedChangeMetadata: PropertyMetadata? = nil, shared: String? = nil, sharedMetadata: PropertyMetadata? = nil, tabType: String? = nil, tabTypeMetadata: PropertyMetadata? = nil, templateLocked: String? = nil, templateLockedMetadata: PropertyMetadata? = nil, templateRequired: String? = nil, templateRequiredMetadata: PropertyMetadata? = nil, tooltip: String? = nil, tooltipMetadata: PropertyMetadata? = nil) {
        self.conditionalParentLabel = conditionalParentLabel
        self.conditionalParentLabelMetadata = conditionalParentLabelMetadata
        self.conditionalParentValue = conditionalParentValue
        self.conditionalParentValueMetadata = conditionalParentValueMetadata
        self.documentId = documentId
        self.documentIdMetadata = documentIdMetadata
        self.groupName = groupName
        self.groupNameMetadata = groupNameMetadata
        self.radios = radios
        self.recipientId = recipientId
        self.recipientIdGuid = recipientIdGuid
        self.recipientIdGuidMetadata = recipientIdGuidMetadata
        self.recipientIdMetadata = recipientIdMetadata
        self.requireAll = requireAll
        self.requireAllMetadata = requireAllMetadata
        self.requireInitialOnSharedChange = requireInitialOnSharedChange
        self.requireInitialOnSharedChangeMetadata = requireInitialOnSharedChangeMetadata
        self.shared = shared
        self.sharedMetadata = sharedMetadata
        self.tabType = tabType
        self.tabTypeMetadata = tabTypeMetadata
        self.templateLocked = templateLocked
        self.templateLockedMetadata = templateLockedMetadata
        self.templateRequired = templateRequired
        self.templateRequiredMetadata = templateRequiredMetadata
        self.tooltip = tooltip
        self.tooltipMetadata = tooltipMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case conditionalParentLabel
        case conditionalParentLabelMetadata
        case conditionalParentValue
        case conditionalParentValueMetadata
        case documentId
        case documentIdMetadata
        case groupName
        case groupNameMetadata
        case radios
        case recipientId
        case recipientIdGuid
        case recipientIdGuidMetadata
        case recipientIdMetadata
        case requireAll
        case requireAllMetadata
        case requireInitialOnSharedChange
        case requireInitialOnSharedChangeMetadata
        case shared
        case sharedMetadata
        case tabType
        case tabTypeMetadata
        case templateLocked
        case templateLockedMetadata
        case templateRequired
        case templateRequiredMetadata
        case tooltip
        case tooltipMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(conditionalParentLabel, forKey: .conditionalParentLabel)
        try container.encodeIfPresent(conditionalParentLabelMetadata, forKey: .conditionalParentLabelMetadata)
        try container.encodeIfPresent(conditionalParentValue, forKey: .conditionalParentValue)
        try container.encodeIfPresent(conditionalParentValueMetadata, forKey: .conditionalParentValueMetadata)
        try container.encodeIfPresent(documentId, forKey: .documentId)
        try container.encodeIfPresent(documentIdMetadata, forKey: .documentIdMetadata)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(groupNameMetadata, forKey: .groupNameMetadata)
        try container.encodeIfPresent(radios, forKey: .radios)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientIdGuid, forKey: .recipientIdGuid)
        try container.encodeIfPresent(recipientIdGuidMetadata, forKey: .recipientIdGuidMetadata)
        try container.encodeIfPresent(recipientIdMetadata, forKey: .recipientIdMetadata)
        try container.encodeIfPresent(requireAll, forKey: .requireAll)
        try container.encodeIfPresent(requireAllMetadata, forKey: .requireAllMetadata)
        try container.encodeIfPresent(requireInitialOnSharedChange, forKey: .requireInitialOnSharedChange)
        try container.encodeIfPresent(requireInitialOnSharedChangeMetadata, forKey: .requireInitialOnSharedChangeMetadata)
        try container.encodeIfPresent(shared, forKey: .shared)
        try container.encodeIfPresent(sharedMetadata, forKey: .sharedMetadata)
        try container.encodeIfPresent(tabType, forKey: .tabType)
        try container.encodeIfPresent(tabTypeMetadata, forKey: .tabTypeMetadata)
        try container.encodeIfPresent(templateLocked, forKey: .templateLocked)
        try container.encodeIfPresent(templateLockedMetadata, forKey: .templateLockedMetadata)
        try container.encodeIfPresent(templateRequired, forKey: .templateRequired)
        try container.encodeIfPresent(templateRequiredMetadata, forKey: .templateRequiredMetadata)
        try container.encodeIfPresent(tooltip, forKey: .tooltip)
        try container.encodeIfPresent(tooltipMetadata, forKey: .tooltipMetadata)
    }

    public static func == (lhs: RadioGroup, rhs: RadioGroup) -> Bool {
        lhs.conditionalParentLabel == rhs.conditionalParentLabel &&
            lhs.conditionalParentLabelMetadata == rhs.conditionalParentLabelMetadata &&
            lhs.conditionalParentValue == rhs.conditionalParentValue &&
            lhs.conditionalParentValueMetadata == rhs.conditionalParentValueMetadata &&
            lhs.documentId == rhs.documentId &&
            lhs.documentIdMetadata == rhs.documentIdMetadata &&
            lhs.groupName == rhs.groupName &&
            lhs.groupNameMetadata == rhs.groupNameMetadata &&
            lhs.radios == rhs.radios &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientIdGuid == rhs.recipientIdGuid &&
            lhs.recipientIdGuidMetadata == rhs.recipientIdGuidMetadata &&
            lhs.recipientIdMetadata == rhs.recipientIdMetadata &&
            lhs.requireAll == rhs.requireAll &&
            lhs.requireAllMetadata == rhs.requireAllMetadata &&
            lhs.requireInitialOnSharedChange == rhs.requireInitialOnSharedChange &&
            lhs.requireInitialOnSharedChangeMetadata == rhs.requireInitialOnSharedChangeMetadata &&
            lhs.shared == rhs.shared &&
            lhs.sharedMetadata == rhs.sharedMetadata &&
            lhs.tabType == rhs.tabType &&
            lhs.tabTypeMetadata == rhs.tabTypeMetadata &&
            lhs.templateLocked == rhs.templateLocked &&
            lhs.templateLockedMetadata == rhs.templateLockedMetadata &&
            lhs.templateRequired == rhs.templateRequired &&
            lhs.templateRequiredMetadata == rhs.templateRequiredMetadata &&
            lhs.tooltip == rhs.tooltip &&
            lhs.tooltipMetadata == rhs.tooltipMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(conditionalParentLabel?.hashValue)
        hasher.combine(conditionalParentLabelMetadata?.hashValue)
        hasher.combine(conditionalParentValue?.hashValue)
        hasher.combine(conditionalParentValueMetadata?.hashValue)
        hasher.combine(documentId?.hashValue)
        hasher.combine(documentIdMetadata?.hashValue)
        hasher.combine(groupName?.hashValue)
        hasher.combine(groupNameMetadata?.hashValue)
        hasher.combine(radios?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientIdGuid?.hashValue)
        hasher.combine(recipientIdGuidMetadata?.hashValue)
        hasher.combine(recipientIdMetadata?.hashValue)
        hasher.combine(requireAll?.hashValue)
        hasher.combine(requireAllMetadata?.hashValue)
        hasher.combine(requireInitialOnSharedChange?.hashValue)
        hasher.combine(requireInitialOnSharedChangeMetadata?.hashValue)
        hasher.combine(shared?.hashValue)
        hasher.combine(sharedMetadata?.hashValue)
        hasher.combine(tabType?.hashValue)
        hasher.combine(tabTypeMetadata?.hashValue)
        hasher.combine(templateLocked?.hashValue)
        hasher.combine(templateLockedMetadata?.hashValue)
        hasher.combine(templateRequired?.hashValue)
        hasher.combine(templateRequiredMetadata?.hashValue)
        hasher.combine(tooltip?.hashValue)
        hasher.combine(tooltipMetadata?.hashValue)
    }
}

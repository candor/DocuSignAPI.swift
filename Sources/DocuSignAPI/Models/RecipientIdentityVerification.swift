//
// RecipientIdentityVerification.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Specifies ID Verification applied on an envelope by workflow ID. See the [list](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list) method in the [IdentityVerifications](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications) resource for more information on how to retrieve workflow IDs available for an account. This can be used in addition to other [recipient authentication](https://support.docusign.com/en/guides/ndse-user-guide-recipient-authentication) methods.  */
public final class RecipientIdentityVerification: Content, Hashable {
    /**  */
    public var inputOptions: [RecipientIdentityInputOption]?
    /** ID of the Identity Verification worklow used to verify recipients' identity. </br> This ID must match one of the [workflowId](https://developers.docusign.com/esign-rest-api/reference/Accounts/IdentityVerifications/list#accountIdentityVerificationWorkflow) available to your account. */
    public var workflowId: String?

    public init(inputOptions: [RecipientIdentityInputOption]? = nil, workflowId: String? = nil) {
        self.inputOptions = inputOptions
        self.workflowId = workflowId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inputOptions
        case workflowId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(inputOptions, forKey: .inputOptions)
        try container.encodeIfPresent(workflowId, forKey: .workflowId)
    }

    public static func == (lhs: RecipientIdentityVerification, rhs: RecipientIdentityVerification) -> Bool {
        lhs.inputOptions == rhs.inputOptions &&
            lhs.workflowId == rhs.workflowId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(inputOptions?.hashValue)
        hasher.combine(workflowId?.hashValue)
    }
}

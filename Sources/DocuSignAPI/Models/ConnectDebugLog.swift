//
// ConnectDebugLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ConnectDebugLog: Content, Hashable {
    /** The name of the Connect configuration. */
    public var connectConfig: String?
    public var errorDetails: ErrorDetails?
    /** The UTC date and time of the event. */
    public var eventDateTime: String?
    /** A description of the event. */
    public var eventDescription: String?
    /** Log output. */
    public var payload: String?

    public init(connectConfig: String? = nil, errorDetails: ErrorDetails? = nil, eventDateTime: String? = nil, eventDescription: String? = nil, payload: String? = nil) {
        self.connectConfig = connectConfig
        self.errorDetails = errorDetails
        self.eventDateTime = eventDateTime
        self.eventDescription = eventDescription
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectConfig
        case errorDetails
        case eventDateTime
        case eventDescription
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(connectConfig, forKey: .connectConfig)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(eventDateTime, forKey: .eventDateTime)
        try container.encodeIfPresent(eventDescription, forKey: .eventDescription)
        try container.encodeIfPresent(payload, forKey: .payload)
    }

    public static func == (lhs: ConnectDebugLog, rhs: ConnectDebugLog) -> Bool {
        lhs.connectConfig == rhs.connectConfig &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.eventDateTime == rhs.eventDateTime &&
            lhs.eventDescription == rhs.eventDescription &&
            lhs.payload == rhs.payload
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(connectConfig?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(eventDateTime?.hashValue)
        hasher.combine(eventDescription?.hashValue)
        hasher.combine(payload?.hashValue)
    }
}

//
// RecipientAttachment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class RecipientAttachment: Content, Hashable {
    /** The unique identifier for the attachment. */
    public var attachmentId: String?
    /** Specifies the type of the attachment for the recipient. Possible values are:  - `.htm` - `.xml` */
    public var attachmentType: String?
    /** A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size. */
    public var data: String?
    /** An optional label for the attachment. */
    public var label: String?
    /** The name of the attachment. */
    public var name: String?
    /** The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads. */
    public var remoteUrl: String?

    public init(attachmentId: String? = nil, attachmentType: String? = nil, data: String? = nil, label: String? = nil, name: String? = nil, remoteUrl: String? = nil) {
        self.attachmentId = attachmentId
        self.attachmentType = attachmentType
        self.data = data
        self.label = label
        self.name = name
        self.remoteUrl = remoteUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attachmentId
        case attachmentType
        case data
        case label
        case name
        case remoteUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attachmentId, forKey: .attachmentId)
        try container.encodeIfPresent(attachmentType, forKey: .attachmentType)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(remoteUrl, forKey: .remoteUrl)
    }

    public static func == (lhs: RecipientAttachment, rhs: RecipientAttachment) -> Bool {
        lhs.attachmentId == rhs.attachmentId &&
            lhs.attachmentType == rhs.attachmentType &&
            lhs.data == rhs.data &&
            lhs.label == rhs.label &&
            lhs.name == rhs.name &&
            lhs.remoteUrl == rhs.remoteUrl
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(attachmentId?.hashValue)
        hasher.combine(attachmentType?.hashValue)
        hasher.combine(data?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(remoteUrl?.hashValue)
    }
}

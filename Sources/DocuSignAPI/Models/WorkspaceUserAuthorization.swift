//
// WorkspaceUserAuthorization.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Provides properties that describe user authorization to a workspace. */
public final class WorkspaceUserAuthorization: Content, Hashable {
    /** When set to **true**, the workspace user can delete items from the workspace. */
    public var canDelete: String?
    /** When set to **true**, the workspace user can move the items in the workspace. */
    public var canMove: String?
    /** When set to **true**, the workspace user can create transactions from the workspace. */
    public var canTransact: String?
    /** When set to **true**, the workspace user can view the items in the workspace. */
    public var canView: String?
    /** The UTC DateTime when the workspace user authorization was created. */
    public var created: String?
    /** The id of the user who created the workspace user authorization.  */
    public var createdById: String?
    public var errorDetails: ErrorDetails?
    /** The UTC DateTime when the workspace user authorization was last modified. */
    public var modified: String?
    /** The id of the user who last modified the workspace user authorization. */
    public var modifiedById: String?
    /** The id of the workspace user. */
    public var workspaceUserId: String?
    public var workspaceUserInformation: WorkspaceUser?

    public init(canDelete: String? = nil, canMove: String? = nil, canTransact: String? = nil, canView: String? = nil, created: String? = nil, createdById: String? = nil, errorDetails: ErrorDetails? = nil, modified: String? = nil, modifiedById: String? = nil, workspaceUserId: String? = nil, workspaceUserInformation: WorkspaceUser? = nil) {
        self.canDelete = canDelete
        self.canMove = canMove
        self.canTransact = canTransact
        self.canView = canView
        self.created = created
        self.createdById = createdById
        self.errorDetails = errorDetails
        self.modified = modified
        self.modifiedById = modifiedById
        self.workspaceUserId = workspaceUserId
        self.workspaceUserInformation = workspaceUserInformation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case canDelete
        case canMove
        case canTransact
        case canView
        case created
        case createdById
        case errorDetails
        case modified
        case modifiedById
        case workspaceUserId
        case workspaceUserInformation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(canDelete, forKey: .canDelete)
        try container.encodeIfPresent(canMove, forKey: .canMove)
        try container.encodeIfPresent(canTransact, forKey: .canTransact)
        try container.encodeIfPresent(canView, forKey: .canView)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdById, forKey: .createdById)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(modified, forKey: .modified)
        try container.encodeIfPresent(modifiedById, forKey: .modifiedById)
        try container.encodeIfPresent(workspaceUserId, forKey: .workspaceUserId)
        try container.encodeIfPresent(workspaceUserInformation, forKey: .workspaceUserInformation)
    }

    public static func == (lhs: WorkspaceUserAuthorization, rhs: WorkspaceUserAuthorization) -> Bool {
        lhs.canDelete == rhs.canDelete &&
            lhs.canMove == rhs.canMove &&
            lhs.canTransact == rhs.canTransact &&
            lhs.canView == rhs.canView &&
            lhs.created == rhs.created &&
            lhs.createdById == rhs.createdById &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.modified == rhs.modified &&
            lhs.modifiedById == rhs.modifiedById &&
            lhs.workspaceUserId == rhs.workspaceUserId &&
            lhs.workspaceUserInformation == rhs.workspaceUserInformation
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(canDelete?.hashValue)
        hasher.combine(canMove?.hashValue)
        hasher.combine(canTransact?.hashValue)
        hasher.combine(canView?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(createdById?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(modified?.hashValue)
        hasher.combine(modifiedById?.hashValue)
        hasher.combine(workspaceUserId?.hashValue)
        hasher.combine(workspaceUserInformation?.hashValue)
    }
}

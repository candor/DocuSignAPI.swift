//
// ConnectSalesforceObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** A &#x60;connectSalesforceObject&#x60; is an object that updates envelope and document status or recipient status in your Salesforce account.  When you install DocuSign Connect for Salesforce, the service automatically sets up two Connect objects: one that updates envelope status and documents and one that updates recipient status. You can also customize DocuSign Connect for Salesforce by associating DocuSign objects with Salesforce objects so that DocuSign Connect for Salesforce updates or inserts the information into the Salesforce object. For more information, see  [DocuSign for Salesforce - Adding Completed Documents to the Notes and Attachments](https://support.docusign.com/articles/DocuSign-for-Salesforce-Adding-Completed-Documents-to-the-Notes-and-Attachments-New). */
public final class ConnectSalesforceObject: Content, Hashable {
    /** When set to **true**, the `connectSalesforceObject` is active. */
    public var active: String?
    /** A description of the `connectSalesforceObject`. */
    public var description: String?
    /** The id of the `connectSalesforceObject`. */
    public var id: String?
    /**  */
    public var insert: String?
    /** When **true**, Salesforce is updated only when the envelope is complete. */
    public var onCompleteOnly: String?
    /** The DocuSign and Salesforce fields that you want to use to match a Salesforce object with DocuSign information. This information tells Connect when to send updates to Salesforce. */
    public var selectFields: [ConnectSalesforceField]?
    /** The Salesforce.com object type, such as `case`, `contact`, or `opportunity`. */
    public var sfObject: String?
    /** A name for the Salesforce object.  **Note**: You can enter any name for the object. It does not have to match the `sfObject` property. */
    public var sfObjectName: String?
    /** The DocuSign and Salesforce fields that you want to update.   **Note**: You can choose to update SalesForce (with information from DocuSign) only, update DocuSign only, or both. */
    public var updateFields: [ConnectSalesforceField]?

    public init(active: String? = nil, description: String? = nil, id: String? = nil, insert: String? = nil, onCompleteOnly: String? = nil, selectFields: [ConnectSalesforceField]? = nil, sfObject: String? = nil, sfObjectName: String? = nil, updateFields: [ConnectSalesforceField]? = nil) {
        self.active = active
        self.description = description
        self.id = id
        self.insert = insert
        self.onCompleteOnly = onCompleteOnly
        self.selectFields = selectFields
        self.sfObject = sfObject
        self.sfObjectName = sfObjectName
        self.updateFields = updateFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case active
        case description
        case id
        case insert
        case onCompleteOnly
        case selectFields
        case sfObject
        case sfObjectName
        case updateFields
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(insert, forKey: .insert)
        try container.encodeIfPresent(onCompleteOnly, forKey: .onCompleteOnly)
        try container.encodeIfPresent(selectFields, forKey: .selectFields)
        try container.encodeIfPresent(sfObject, forKey: .sfObject)
        try container.encodeIfPresent(sfObjectName, forKey: .sfObjectName)
        try container.encodeIfPresent(updateFields, forKey: .updateFields)
    }

    public static func == (lhs: ConnectSalesforceObject, rhs: ConnectSalesforceObject) -> Bool {
        lhs.active == rhs.active &&
            lhs.description == rhs.description &&
            lhs.id == rhs.id &&
            lhs.insert == rhs.insert &&
            lhs.onCompleteOnly == rhs.onCompleteOnly &&
            lhs.selectFields == rhs.selectFields &&
            lhs.sfObject == rhs.sfObject &&
            lhs.sfObjectName == rhs.sfObjectName &&
            lhs.updateFields == rhs.updateFields
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(active?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(insert?.hashValue)
        hasher.combine(onCompleteOnly?.hashValue)
        hasher.combine(selectFields?.hashValue)
        hasher.combine(sfObject?.hashValue)
        hasher.combine(sfObjectName?.hashValue)
        hasher.combine(updateFields?.hashValue)
    }
}

//
// RecipientSignatureProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** An Electronic or Standards Based Signature (digital signature) provider for the signer to use. [More information](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures).  */
public final class RecipientSignatureProvider: Content, Hashable {
    /** By default, electronic seals apply on all documents in an envelope. If any of the documents has a `signHere` tab, then a visual representation of the electronic seal will show up in the final document. If not, the electronic seal will be visible in the metadata but not in the content of the document.  To apply electronic seals on specific documents only, you must enable the  `sealDocumentsWithTabsOnly` parameter. In this case, Electronic Seal applies only on documents that have `signHere` tabs set for the Electronic Seal recipient. Other documents won't be sealed.  */
    public var sealDocumentsWithTabsOnly: String?
    /** Indicates the name of the electronic seal to apply on documents.  */
    public var sealName: String?
    /** The name of an Electronic or Standards Based Signature (digital signature) provider for the signer to use. For details, see [the current provider list](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). You can also retrieve the list by using the [AccountSignatureProviders::List](https://developers.docusign.com/esign-rest-api/reference/Accounts/AccountSignatureProviders/list/) method.  Example: `universalsignaturepen_default`   */
    public var signatureProviderName: String?
    public var signatureProviderNameMetadata: PropertyMetadata?
    public var signatureProviderOptions: RecipientSignatureProviderOptions?

    public init(sealDocumentsWithTabsOnly: String? = nil, sealName: String? = nil, signatureProviderName: String? = nil, signatureProviderNameMetadata: PropertyMetadata? = nil, signatureProviderOptions: RecipientSignatureProviderOptions? = nil) {
        self.sealDocumentsWithTabsOnly = sealDocumentsWithTabsOnly
        self.sealName = sealName
        self.signatureProviderName = signatureProviderName
        self.signatureProviderNameMetadata = signatureProviderNameMetadata
        self.signatureProviderOptions = signatureProviderOptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sealDocumentsWithTabsOnly
        case sealName
        case signatureProviderName
        case signatureProviderNameMetadata
        case signatureProviderOptions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sealDocumentsWithTabsOnly, forKey: .sealDocumentsWithTabsOnly)
        try container.encodeIfPresent(sealName, forKey: .sealName)
        try container.encodeIfPresent(signatureProviderName, forKey: .signatureProviderName)
        try container.encodeIfPresent(signatureProviderNameMetadata, forKey: .signatureProviderNameMetadata)
        try container.encodeIfPresent(signatureProviderOptions, forKey: .signatureProviderOptions)
    }

    public static func == (lhs: RecipientSignatureProvider, rhs: RecipientSignatureProvider) -> Bool {
        lhs.sealDocumentsWithTabsOnly == rhs.sealDocumentsWithTabsOnly &&
            lhs.sealName == rhs.sealName &&
            lhs.signatureProviderName == rhs.signatureProviderName &&
            lhs.signatureProviderNameMetadata == rhs.signatureProviderNameMetadata &&
            lhs.signatureProviderOptions == rhs.signatureProviderOptions
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sealDocumentsWithTabsOnly?.hashValue)
        hasher.combine(sealName?.hashValue)
        hasher.combine(signatureProviderName?.hashValue)
        hasher.combine(signatureProviderNameMetadata?.hashValue)
        hasher.combine(signatureProviderOptions?.hashValue)
    }
}

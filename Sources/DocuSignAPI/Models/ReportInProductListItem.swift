//
// ReportInProductListItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ReportInProductListItem: Content, Hashable {
    /**  */
    public var getUri: String?
    /**  */
    public var lastScheduledExecutionDate: String?
    /**  */
    public var lastScheduledExecutionSuccessDate: String?
    /**  */
    public var reportCustomizedId: String?
    /**  */
    public var reportDescription: String?
    /**  */
    public var reportId: String?
    /**  */
    public var reportName: String?
    /**  */
    public var reportType: String?
    /**  */
    public var runUri: String?
    /**  */
    public var saveUri: String?
    /**  */
    public var scheduleCreateDate: String?
    /**  */
    public var scheduleEndDate: String?
    /**  */
    public var scheduleId: String?
    /**  */
    public var scheduleRenewDurationDays: String?

    public init(getUri: String? = nil, lastScheduledExecutionDate: String? = nil, lastScheduledExecutionSuccessDate: String? = nil, reportCustomizedId: String? = nil, reportDescription: String? = nil, reportId: String? = nil, reportName: String? = nil, reportType: String? = nil, runUri: String? = nil, saveUri: String? = nil, scheduleCreateDate: String? = nil, scheduleEndDate: String? = nil, scheduleId: String? = nil, scheduleRenewDurationDays: String? = nil) {
        self.getUri = getUri
        self.lastScheduledExecutionDate = lastScheduledExecutionDate
        self.lastScheduledExecutionSuccessDate = lastScheduledExecutionSuccessDate
        self.reportCustomizedId = reportCustomizedId
        self.reportDescription = reportDescription
        self.reportId = reportId
        self.reportName = reportName
        self.reportType = reportType
        self.runUri = runUri
        self.saveUri = saveUri
        self.scheduleCreateDate = scheduleCreateDate
        self.scheduleEndDate = scheduleEndDate
        self.scheduleId = scheduleId
        self.scheduleRenewDurationDays = scheduleRenewDurationDays
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case getUri
        case lastScheduledExecutionDate
        case lastScheduledExecutionSuccessDate
        case reportCustomizedId
        case reportDescription
        case reportId
        case reportName
        case reportType
        case runUri
        case saveUri
        case scheduleCreateDate
        case scheduleEndDate
        case scheduleId
        case scheduleRenewDurationDays
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(getUri, forKey: .getUri)
        try container.encodeIfPresent(lastScheduledExecutionDate, forKey: .lastScheduledExecutionDate)
        try container.encodeIfPresent(lastScheduledExecutionSuccessDate, forKey: .lastScheduledExecutionSuccessDate)
        try container.encodeIfPresent(reportCustomizedId, forKey: .reportCustomizedId)
        try container.encodeIfPresent(reportDescription, forKey: .reportDescription)
        try container.encodeIfPresent(reportId, forKey: .reportId)
        try container.encodeIfPresent(reportName, forKey: .reportName)
        try container.encodeIfPresent(reportType, forKey: .reportType)
        try container.encodeIfPresent(runUri, forKey: .runUri)
        try container.encodeIfPresent(saveUri, forKey: .saveUri)
        try container.encodeIfPresent(scheduleCreateDate, forKey: .scheduleCreateDate)
        try container.encodeIfPresent(scheduleEndDate, forKey: .scheduleEndDate)
        try container.encodeIfPresent(scheduleId, forKey: .scheduleId)
        try container.encodeIfPresent(scheduleRenewDurationDays, forKey: .scheduleRenewDurationDays)
    }

    public static func == (lhs: ReportInProductListItem, rhs: ReportInProductListItem) -> Bool {
        lhs.getUri == rhs.getUri &&
            lhs.lastScheduledExecutionDate == rhs.lastScheduledExecutionDate &&
            lhs.lastScheduledExecutionSuccessDate == rhs.lastScheduledExecutionSuccessDate &&
            lhs.reportCustomizedId == rhs.reportCustomizedId &&
            lhs.reportDescription == rhs.reportDescription &&
            lhs.reportId == rhs.reportId &&
            lhs.reportName == rhs.reportName &&
            lhs.reportType == rhs.reportType &&
            lhs.runUri == rhs.runUri &&
            lhs.saveUri == rhs.saveUri &&
            lhs.scheduleCreateDate == rhs.scheduleCreateDate &&
            lhs.scheduleEndDate == rhs.scheduleEndDate &&
            lhs.scheduleId == rhs.scheduleId &&
            lhs.scheduleRenewDurationDays == rhs.scheduleRenewDurationDays
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(getUri?.hashValue)
        hasher.combine(lastScheduledExecutionDate?.hashValue)
        hasher.combine(lastScheduledExecutionSuccessDate?.hashValue)
        hasher.combine(reportCustomizedId?.hashValue)
        hasher.combine(reportDescription?.hashValue)
        hasher.combine(reportId?.hashValue)
        hasher.combine(reportName?.hashValue)
        hasher.combine(reportType?.hashValue)
        hasher.combine(runUri?.hashValue)
        hasher.combine(saveUri?.hashValue)
        hasher.combine(scheduleCreateDate?.hashValue)
        hasher.combine(scheduleEndDate?.hashValue)
        hasher.combine(scheduleId?.hashValue)
        hasher.combine(scheduleRenewDurationDays?.hashValue)
    }
}

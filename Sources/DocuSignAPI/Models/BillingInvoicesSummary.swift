//
// BillingInvoicesSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class BillingInvoicesSummary: Content, Hashable {
    /** Reserved: TBD */
    public var billingInvoices: [BillingInvoice]?
    /**  */
    public var pastDueBalance: String?
    /**  */
    public var paymentAllowed: String?

    public init(billingInvoices: [BillingInvoice]? = nil, pastDueBalance: String? = nil, paymentAllowed: String? = nil) {
        self.billingInvoices = billingInvoices
        self.pastDueBalance = pastDueBalance
        self.paymentAllowed = paymentAllowed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case billingInvoices
        case pastDueBalance
        case paymentAllowed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(billingInvoices, forKey: .billingInvoices)
        try container.encodeIfPresent(pastDueBalance, forKey: .pastDueBalance)
        try container.encodeIfPresent(paymentAllowed, forKey: .paymentAllowed)
    }

    public static func == (lhs: BillingInvoicesSummary, rhs: BillingInvoicesSummary) -> Bool {
        lhs.billingInvoices == rhs.billingInvoices &&
            lhs.pastDueBalance == rhs.pastDueBalance &&
            lhs.paymentAllowed == rhs.paymentAllowed
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(billingInvoices?.hashValue)
        hasher.combine(pastDueBalance?.hashValue)
        hasher.combine(paymentAllowed?.hashValue)
    }
}

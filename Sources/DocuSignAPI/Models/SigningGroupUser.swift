//
// SigningGroupUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class SigningGroupUser: Content, Hashable {
    /**  */
    public var email: String?
    public var errorDetails: ErrorDetails?
    /** The name of the group member.   Maximum Length: 100 characters.  */
    public var userName: String?

    public init(email: String? = nil, errorDetails: ErrorDetails? = nil, userName: String? = nil) {
        self.email = email
        self.errorDetails = errorDetails
        self.userName = userName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case errorDetails
        case userName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(userName, forKey: .userName)
    }

    public static func == (lhs: SigningGroupUser, rhs: SigningGroupUser) -> Bool {
        lhs.email == rhs.email &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.userName == rhs.userName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(email?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(userName?.hashValue)
    }
}

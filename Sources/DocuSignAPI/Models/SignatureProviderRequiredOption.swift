//
// SignatureProviderRequiredOption.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Contains additional information that a specific signature provider requires. */
public final class SignatureProviderRequiredOption: Content, Hashable {
    /** Reserved for DocuSign. */
    public var requiredSignatureProviderOptionIds: [String]?
    /** Reserved for DocuSign. */
    public var signerType: String?

    public init(requiredSignatureProviderOptionIds: [String]? = nil, signerType: String? = nil) {
        self.requiredSignatureProviderOptionIds = requiredSignatureProviderOptionIds
        self.signerType = signerType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case requiredSignatureProviderOptionIds
        case signerType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(requiredSignatureProviderOptionIds, forKey: .requiredSignatureProviderOptionIds)
        try container.encodeIfPresent(signerType, forKey: .signerType)
    }

    public static func == (lhs: SignatureProviderRequiredOption, rhs: SignatureProviderRequiredOption) -> Bool {
        lhs.requiredSignatureProviderOptionIds == rhs.requiredSignatureProviderOptionIds &&
            lhs.signerType == rhs.signerType
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(requiredSignatureProviderOptionIds?.hashValue)
        hasher.combine(signerType?.hashValue)
    }
}

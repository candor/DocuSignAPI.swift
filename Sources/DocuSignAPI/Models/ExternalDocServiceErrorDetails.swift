//
// ExternalDocServiceErrorDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/**  */
public final class ExternalDocServiceErrorDetails: Content, Hashable {
    /** Reserved: TBD */
    public var authenticationUrl: String?
    /** A code associated with the error condition. */
    public var errorCode: String?
    /**  */
    public var message: String?

    public init(authenticationUrl: String? = nil, errorCode: String? = nil, message: String? = nil) {
        self.authenticationUrl = authenticationUrl
        self.errorCode = errorCode
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticationUrl
        case errorCode
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authenticationUrl, forKey: .authenticationUrl)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(message, forKey: .message)
    }

    public static func == (lhs: ExternalDocServiceErrorDetails, rhs: ExternalDocServiceErrorDetails) -> Bool {
        lhs.authenticationUrl == rhs.authenticationUrl &&
            lhs.errorCode == rhs.errorCode &&
            lhs.message == rhs.message
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(authenticationUrl?.hashValue)
        hasher.combine(errorCode?.hashValue)
        hasher.combine(message?.hashValue)
    }
}

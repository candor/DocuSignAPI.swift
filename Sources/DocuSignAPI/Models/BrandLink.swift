//
// BrandLink.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import AnyCodable
import Foundation
import Vapor

/** Information about a link that a brand uses. */
public final class BrandLink: Content, Hashable {
    /** The text used for the link. */
    public var linkText: String?
    /** The type of link. Valid values include:  - `aboutDocusign` - `closeButton` */
    public var linkType: String?
    /** When **true**, the link displays to the recipient. */
    public var showLink: String?
    /** The URL or mailto address of the link. */
    public var urlOrMailTo: String?

    public init(linkText: String? = nil, linkType: String? = nil, showLink: String? = nil, urlOrMailTo: String? = nil) {
        self.linkText = linkText
        self.linkType = linkType
        self.showLink = showLink
        self.urlOrMailTo = urlOrMailTo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case linkText
        case linkType
        case showLink
        case urlOrMailTo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(linkText, forKey: .linkText)
        try container.encodeIfPresent(linkType, forKey: .linkType)
        try container.encodeIfPresent(showLink, forKey: .showLink)
        try container.encodeIfPresent(urlOrMailTo, forKey: .urlOrMailTo)
    }

    public static func == (lhs: BrandLink, rhs: BrandLink) -> Bool {
        lhs.linkText == rhs.linkText &&
            lhs.linkType == rhs.linkType &&
            lhs.showLink == rhs.showLink &&
            lhs.urlOrMailTo == rhs.urlOrMailTo
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(linkText?.hashValue)
        hasher.combine(linkType?.hashValue)
        hasher.combine(showLink?.hashValue)
        hasher.combine(urlOrMailTo?.hashValue)
    }
}

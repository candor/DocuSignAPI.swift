//
// Country.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class Country: Content {
    /**  */
    public var isoCode: String?
    /**  */
    public var name: String?
    /**  */
    public var provinces: [Province]?
    /**  */
    public var provinceValidated: String?

    public init(isoCode: String? = nil, name: String? = nil, provinces: [Province]? = nil, provinceValidated: String? = nil) {
        self.isoCode = isoCode
        self.name = name
        self.provinces = provinces
        self.provinceValidated = provinceValidated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isoCode
        case name
        case provinces
        case provinceValidated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(isoCode, forKey: .isoCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(provinces, forKey: .provinces)
        try container.encodeIfPresent(provinceValidated, forKey: .provinceValidated)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        isoCode = try container.decodeIfPresent(String.self, forKey: .isoCode)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        provinces = try container.decodeIfPresent([Province].self, forKey: .provinces)
        provinceValidated = try container.decodeIfPresent(String.self, forKey: .provinceValidated)
    }
}

extension Country: Hashable {
    public static func == (lhs: Country, rhs: Country) -> Bool {
        lhs.isoCode == rhs.isoCode &&
            lhs.name == rhs.name &&
            lhs.provinces == rhs.provinces &&
            lhs.provinceValidated == rhs.provinceValidated
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(isoCode?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(provinces?.hashValue)
        hasher.combine(provinceValidated?.hashValue)
    }
}

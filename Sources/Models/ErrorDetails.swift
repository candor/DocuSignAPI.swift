//
// ErrorDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object describes errors that occur. It is only valid for responses and ignored in requests. */
public final class ErrorDetails: Content {
    /** The code associated with the error condition. */
    public var errorCode: String?
    /** A brief message describing the error condition. */
    public var message: String?

    public init(errorCode: String? = nil, message: String? = nil) {
        self.errorCode = errorCode
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case errorCode
        case message
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(errorCode, forKey: .errorCode)
        try container.encodeIfPresent(message, forKey: .message)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        errorCode = try container.decodeIfPresent(String.self, forKey: .errorCode)
        message = try container.decodeIfPresent(String.self, forKey: .message)
    }
}

extension ErrorDetails: Hashable {
    public static func == (lhs: ErrorDetails, rhs: ErrorDetails) -> Bool {
        lhs.errorCode == rhs.errorCode &&
            lhs.message == rhs.message
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(errorCode?.hashValue)
        hasher.combine(message?.hashValue)
    }
}

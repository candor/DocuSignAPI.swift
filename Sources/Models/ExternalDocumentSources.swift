//
// ExternalDocumentSources.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** A complex object specifying the external document sources. */
public final class ExternalDocumentSources: Content {
    /** The account is enabled to allow external documents to be attached from BoxNet. */
    public var boxnetEnabled: String?
    public var boxnetMetadata: SettingsMetadata?
    /** The account is enabled to allow external documents to be attached from DropBox. */
    public var dropboxEnabled: String?
    public var dropboxMetadata: SettingsMetadata?
    /** The account is enabled to allow external documents to be attached from Google Drive. */
    public var googleDriveEnabled: String?
    public var googleDriveMetadata: SettingsMetadata?
    /** The account is enabled to allow external documents to be attached from OneDrive. */
    public var oneDriveEnabled: String?
    public var oneDriveMetadata: SettingsMetadata?
    /** The account is enabled to allow external documents to be attached from Salesforce. */
    public var salesforceEnabled: String?
    public var salesforceMetadata: SettingsMetadata?

    public init(boxnetEnabled: String? = nil, boxnetMetadata: SettingsMetadata? = nil, dropboxEnabled: String? = nil, dropboxMetadata: SettingsMetadata? = nil, googleDriveEnabled: String? = nil, googleDriveMetadata: SettingsMetadata? = nil, oneDriveEnabled: String? = nil, oneDriveMetadata: SettingsMetadata? = nil, salesforceEnabled: String? = nil, salesforceMetadata: SettingsMetadata? = nil) {
        self.boxnetEnabled = boxnetEnabled
        self.boxnetMetadata = boxnetMetadata
        self.dropboxEnabled = dropboxEnabled
        self.dropboxMetadata = dropboxMetadata
        self.googleDriveEnabled = googleDriveEnabled
        self.googleDriveMetadata = googleDriveMetadata
        self.oneDriveEnabled = oneDriveEnabled
        self.oneDriveMetadata = oneDriveMetadata
        self.salesforceEnabled = salesforceEnabled
        self.salesforceMetadata = salesforceMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case boxnetEnabled
        case boxnetMetadata
        case dropboxEnabled
        case dropboxMetadata
        case googleDriveEnabled
        case googleDriveMetadata
        case oneDriveEnabled
        case oneDriveMetadata
        case salesforceEnabled
        case salesforceMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(boxnetEnabled, forKey: .boxnetEnabled)
        try container.encodeIfPresent(boxnetMetadata, forKey: .boxnetMetadata)
        try container.encodeIfPresent(dropboxEnabled, forKey: .dropboxEnabled)
        try container.encodeIfPresent(dropboxMetadata, forKey: .dropboxMetadata)
        try container.encodeIfPresent(googleDriveEnabled, forKey: .googleDriveEnabled)
        try container.encodeIfPresent(googleDriveMetadata, forKey: .googleDriveMetadata)
        try container.encodeIfPresent(oneDriveEnabled, forKey: .oneDriveEnabled)
        try container.encodeIfPresent(oneDriveMetadata, forKey: .oneDriveMetadata)
        try container.encodeIfPresent(salesforceEnabled, forKey: .salesforceEnabled)
        try container.encodeIfPresent(salesforceMetadata, forKey: .salesforceMetadata)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        boxnetEnabled = try container.decodeIfPresent(String.self, forKey: .boxnetEnabled)
        boxnetMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .boxnetMetadata)
        dropboxEnabled = try container.decodeIfPresent(String.self, forKey: .dropboxEnabled)
        dropboxMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .dropboxMetadata)
        googleDriveEnabled = try container.decodeIfPresent(String.self, forKey: .googleDriveEnabled)
        googleDriveMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .googleDriveMetadata)
        oneDriveEnabled = try container.decodeIfPresent(String.self, forKey: .oneDriveEnabled)
        oneDriveMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .oneDriveMetadata)
        salesforceEnabled = try container.decodeIfPresent(String.self, forKey: .salesforceEnabled)
        salesforceMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .salesforceMetadata)
    }
}

extension ExternalDocumentSources: Hashable {
    public static func == (lhs: ExternalDocumentSources, rhs: ExternalDocumentSources) -> Bool {
        lhs.boxnetEnabled == rhs.boxnetEnabled &&
            lhs.boxnetMetadata == rhs.boxnetMetadata &&
            lhs.dropboxEnabled == rhs.dropboxEnabled &&
            lhs.dropboxMetadata == rhs.dropboxMetadata &&
            lhs.googleDriveEnabled == rhs.googleDriveEnabled &&
            lhs.googleDriveMetadata == rhs.googleDriveMetadata &&
            lhs.oneDriveEnabled == rhs.oneDriveEnabled &&
            lhs.oneDriveMetadata == rhs.oneDriveMetadata &&
            lhs.salesforceEnabled == rhs.salesforceEnabled &&
            lhs.salesforceMetadata == rhs.salesforceMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(boxnetEnabled?.hashValue)
        hasher.combine(boxnetMetadata?.hashValue)
        hasher.combine(dropboxEnabled?.hashValue)
        hasher.combine(dropboxMetadata?.hashValue)
        hasher.combine(googleDriveEnabled?.hashValue)
        hasher.combine(googleDriveMetadata?.hashValue)
        hasher.combine(oneDriveEnabled?.hashValue)
        hasher.combine(oneDriveMetadata?.hashValue)
        hasher.combine(salesforceEnabled?.hashValue)
        hasher.combine(salesforceMetadata?.hashValue)
    }
}

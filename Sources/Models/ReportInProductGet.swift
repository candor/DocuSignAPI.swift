//
// ReportInProductGet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class ReportInProductGet: Content {
    /**  */
    public var customFieldFilter: String?
    /**  */
    public var dateRangeCustomFromDate: String?
    /**  */
    public var dateRangeCustomToDate: String?
    /**  */
    public var dateRangeFilter: String?
    /** The position on the page where the display section appears. */
    public var displayOrder: String?
    /**  */
    public var envelopeDateTypeFilter: String?
    /**  */
    public var envelopeRecipientNameContainsFilter: String?
    /**  */
    public var envelopeStatusFilter: String?
    /**  */
    public var envelopeSubjectContainsFilter: String?
    /**  */
    public var fields: [ReportInProductField]?
    /**  */
    public var lastScheduledExecutionDate: String?
    /**  */
    public var lastScheduledExecutionSuccessDate: String?
    /**  */
    public var maxDownloadRows: String?
    /**  */
    public var maxGridRows: String?
    /**  */
    public var maxScheduledRows: String?
    /**  */
    public var periodLengthFilter: String?
    /**  */
    public var reportCustomizedId: String?
    /**  */
    public var reportDescription: String?
    /**  */
    public var reportId: String?
    /**  */
    public var reportName: String?
    /**  */
    public var reportType: String?
    /**  */
    public var runUri: String?
    /**  */
    public var saveUri: String?
    /**  */
    public var scheduleId: String?
    public var sentByDetails: ReportInProductSentByDetails?
    /**  */
    public var sentByFilter: String?
    /**  */
    public var sentByIds: String?
    /**  */
    public var sortFieldDirection: String?
    /**  */
    public var sortFieldName: String?

    public init(customFieldFilter: String? = nil, dateRangeCustomFromDate: String? = nil, dateRangeCustomToDate: String? = nil, dateRangeFilter: String? = nil, displayOrder: String? = nil, envelopeDateTypeFilter: String? = nil, envelopeRecipientNameContainsFilter: String? = nil, envelopeStatusFilter: String? = nil, envelopeSubjectContainsFilter: String? = nil, fields: [ReportInProductField]? = nil, lastScheduledExecutionDate: String? = nil, lastScheduledExecutionSuccessDate: String? = nil, maxDownloadRows: String? = nil, maxGridRows: String? = nil, maxScheduledRows: String? = nil, periodLengthFilter: String? = nil, reportCustomizedId: String? = nil, reportDescription: String? = nil, reportId: String? = nil, reportName: String? = nil, reportType: String? = nil, runUri: String? = nil, saveUri: String? = nil, scheduleId: String? = nil, sentByDetails: ReportInProductSentByDetails? = nil, sentByFilter: String? = nil, sentByIds: String? = nil, sortFieldDirection: String? = nil, sortFieldName: String? = nil) {
        self.customFieldFilter = customFieldFilter
        self.dateRangeCustomFromDate = dateRangeCustomFromDate
        self.dateRangeCustomToDate = dateRangeCustomToDate
        self.dateRangeFilter = dateRangeFilter
        self.displayOrder = displayOrder
        self.envelopeDateTypeFilter = envelopeDateTypeFilter
        self.envelopeRecipientNameContainsFilter = envelopeRecipientNameContainsFilter
        self.envelopeStatusFilter = envelopeStatusFilter
        self.envelopeSubjectContainsFilter = envelopeSubjectContainsFilter
        self.fields = fields
        self.lastScheduledExecutionDate = lastScheduledExecutionDate
        self.lastScheduledExecutionSuccessDate = lastScheduledExecutionSuccessDate
        self.maxDownloadRows = maxDownloadRows
        self.maxGridRows = maxGridRows
        self.maxScheduledRows = maxScheduledRows
        self.periodLengthFilter = periodLengthFilter
        self.reportCustomizedId = reportCustomizedId
        self.reportDescription = reportDescription
        self.reportId = reportId
        self.reportName = reportName
        self.reportType = reportType
        self.runUri = runUri
        self.saveUri = saveUri
        self.scheduleId = scheduleId
        self.sentByDetails = sentByDetails
        self.sentByFilter = sentByFilter
        self.sentByIds = sentByIds
        self.sortFieldDirection = sortFieldDirection
        self.sortFieldName = sortFieldName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customFieldFilter
        case dateRangeCustomFromDate
        case dateRangeCustomToDate
        case dateRangeFilter
        case displayOrder
        case envelopeDateTypeFilter
        case envelopeRecipientNameContainsFilter
        case envelopeStatusFilter
        case envelopeSubjectContainsFilter
        case fields
        case lastScheduledExecutionDate
        case lastScheduledExecutionSuccessDate
        case maxDownloadRows
        case maxGridRows
        case maxScheduledRows
        case periodLengthFilter
        case reportCustomizedId
        case reportDescription
        case reportId
        case reportName
        case reportType
        case runUri
        case saveUri
        case scheduleId
        case sentByDetails
        case sentByFilter
        case sentByIds
        case sortFieldDirection
        case sortFieldName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(customFieldFilter, forKey: .customFieldFilter)
        try container.encodeIfPresent(dateRangeCustomFromDate, forKey: .dateRangeCustomFromDate)
        try container.encodeIfPresent(dateRangeCustomToDate, forKey: .dateRangeCustomToDate)
        try container.encodeIfPresent(dateRangeFilter, forKey: .dateRangeFilter)
        try container.encodeIfPresent(displayOrder, forKey: .displayOrder)
        try container.encodeIfPresent(envelopeDateTypeFilter, forKey: .envelopeDateTypeFilter)
        try container.encodeIfPresent(envelopeRecipientNameContainsFilter, forKey: .envelopeRecipientNameContainsFilter)
        try container.encodeIfPresent(envelopeStatusFilter, forKey: .envelopeStatusFilter)
        try container.encodeIfPresent(envelopeSubjectContainsFilter, forKey: .envelopeSubjectContainsFilter)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encodeIfPresent(lastScheduledExecutionDate, forKey: .lastScheduledExecutionDate)
        try container.encodeIfPresent(lastScheduledExecutionSuccessDate, forKey: .lastScheduledExecutionSuccessDate)
        try container.encodeIfPresent(maxDownloadRows, forKey: .maxDownloadRows)
        try container.encodeIfPresent(maxGridRows, forKey: .maxGridRows)
        try container.encodeIfPresent(maxScheduledRows, forKey: .maxScheduledRows)
        try container.encodeIfPresent(periodLengthFilter, forKey: .periodLengthFilter)
        try container.encodeIfPresent(reportCustomizedId, forKey: .reportCustomizedId)
        try container.encodeIfPresent(reportDescription, forKey: .reportDescription)
        try container.encodeIfPresent(reportId, forKey: .reportId)
        try container.encodeIfPresent(reportName, forKey: .reportName)
        try container.encodeIfPresent(reportType, forKey: .reportType)
        try container.encodeIfPresent(runUri, forKey: .runUri)
        try container.encodeIfPresent(saveUri, forKey: .saveUri)
        try container.encodeIfPresent(scheduleId, forKey: .scheduleId)
        try container.encodeIfPresent(sentByDetails, forKey: .sentByDetails)
        try container.encodeIfPresent(sentByFilter, forKey: .sentByFilter)
        try container.encodeIfPresent(sentByIds, forKey: .sentByIds)
        try container.encodeIfPresent(sortFieldDirection, forKey: .sortFieldDirection)
        try container.encodeIfPresent(sortFieldName, forKey: .sortFieldName)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        customFieldFilter = try container.decodeIfPresent(String.self, forKey: .customFieldFilter)
        dateRangeCustomFromDate = try container.decodeIfPresent(String.self, forKey: .dateRangeCustomFromDate)
        dateRangeCustomToDate = try container.decodeIfPresent(String.self, forKey: .dateRangeCustomToDate)
        dateRangeFilter = try container.decodeIfPresent(String.self, forKey: .dateRangeFilter)
        displayOrder = try container.decodeIfPresent(String.self, forKey: .displayOrder)
        envelopeDateTypeFilter = try container.decodeIfPresent(String.self, forKey: .envelopeDateTypeFilter)
        envelopeRecipientNameContainsFilter = try container.decodeIfPresent(String.self, forKey: .envelopeRecipientNameContainsFilter)
        envelopeStatusFilter = try container.decodeIfPresent(String.self, forKey: .envelopeStatusFilter)
        envelopeSubjectContainsFilter = try container.decodeIfPresent(String.self, forKey: .envelopeSubjectContainsFilter)
        fields = try container.decodeIfPresent([ReportInProductField].self, forKey: .fields)
        lastScheduledExecutionDate = try container.decodeIfPresent(String.self, forKey: .lastScheduledExecutionDate)
        lastScheduledExecutionSuccessDate = try container.decodeIfPresent(String.self, forKey: .lastScheduledExecutionSuccessDate)
        maxDownloadRows = try container.decodeIfPresent(String.self, forKey: .maxDownloadRows)
        maxGridRows = try container.decodeIfPresent(String.self, forKey: .maxGridRows)
        maxScheduledRows = try container.decodeIfPresent(String.self, forKey: .maxScheduledRows)
        periodLengthFilter = try container.decodeIfPresent(String.self, forKey: .periodLengthFilter)
        reportCustomizedId = try container.decodeIfPresent(String.self, forKey: .reportCustomizedId)
        reportDescription = try container.decodeIfPresent(String.self, forKey: .reportDescription)
        reportId = try container.decodeIfPresent(String.self, forKey: .reportId)
        reportName = try container.decodeIfPresent(String.self, forKey: .reportName)
        reportType = try container.decodeIfPresent(String.self, forKey: .reportType)
        runUri = try container.decodeIfPresent(String.self, forKey: .runUri)
        saveUri = try container.decodeIfPresent(String.self, forKey: .saveUri)
        scheduleId = try container.decodeIfPresent(String.self, forKey: .scheduleId)
        sentByDetails = try container.decodeIfPresent(ReportInProductSentByDetails.self, forKey: .sentByDetails)
        sentByFilter = try container.decodeIfPresent(String.self, forKey: .sentByFilter)
        sentByIds = try container.decodeIfPresent(String.self, forKey: .sentByIds)
        sortFieldDirection = try container.decodeIfPresent(String.self, forKey: .sortFieldDirection)
        sortFieldName = try container.decodeIfPresent(String.self, forKey: .sortFieldName)
    }
}

extension ReportInProductGet: Hashable {
    public static func == (lhs: ReportInProductGet, rhs: ReportInProductGet) -> Bool {
        lhs.customFieldFilter == rhs.customFieldFilter &&
            lhs.dateRangeCustomFromDate == rhs.dateRangeCustomFromDate &&
            lhs.dateRangeCustomToDate == rhs.dateRangeCustomToDate &&
            lhs.dateRangeFilter == rhs.dateRangeFilter &&
            lhs.displayOrder == rhs.displayOrder &&
            lhs.envelopeDateTypeFilter == rhs.envelopeDateTypeFilter &&
            lhs.envelopeRecipientNameContainsFilter == rhs.envelopeRecipientNameContainsFilter &&
            lhs.envelopeStatusFilter == rhs.envelopeStatusFilter &&
            lhs.envelopeSubjectContainsFilter == rhs.envelopeSubjectContainsFilter &&
            lhs.fields == rhs.fields &&
            lhs.lastScheduledExecutionDate == rhs.lastScheduledExecutionDate &&
            lhs.lastScheduledExecutionSuccessDate == rhs.lastScheduledExecutionSuccessDate &&
            lhs.maxDownloadRows == rhs.maxDownloadRows &&
            lhs.maxGridRows == rhs.maxGridRows &&
            lhs.maxScheduledRows == rhs.maxScheduledRows &&
            lhs.periodLengthFilter == rhs.periodLengthFilter &&
            lhs.reportCustomizedId == rhs.reportCustomizedId &&
            lhs.reportDescription == rhs.reportDescription &&
            lhs.reportId == rhs.reportId &&
            lhs.reportName == rhs.reportName &&
            lhs.reportType == rhs.reportType &&
            lhs.runUri == rhs.runUri &&
            lhs.saveUri == rhs.saveUri &&
            lhs.scheduleId == rhs.scheduleId &&
            lhs.sentByDetails == rhs.sentByDetails &&
            lhs.sentByFilter == rhs.sentByFilter &&
            lhs.sentByIds == rhs.sentByIds &&
            lhs.sortFieldDirection == rhs.sortFieldDirection &&
            lhs.sortFieldName == rhs.sortFieldName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(customFieldFilter?.hashValue)
        hasher.combine(dateRangeCustomFromDate?.hashValue)
        hasher.combine(dateRangeCustomToDate?.hashValue)
        hasher.combine(dateRangeFilter?.hashValue)
        hasher.combine(displayOrder?.hashValue)
        hasher.combine(envelopeDateTypeFilter?.hashValue)
        hasher.combine(envelopeRecipientNameContainsFilter?.hashValue)
        hasher.combine(envelopeStatusFilter?.hashValue)
        hasher.combine(envelopeSubjectContainsFilter?.hashValue)
        hasher.combine(fields?.hashValue)
        hasher.combine(lastScheduledExecutionDate?.hashValue)
        hasher.combine(lastScheduledExecutionSuccessDate?.hashValue)
        hasher.combine(maxDownloadRows?.hashValue)
        hasher.combine(maxGridRows?.hashValue)
        hasher.combine(maxScheduledRows?.hashValue)
        hasher.combine(periodLengthFilter?.hashValue)
        hasher.combine(reportCustomizedId?.hashValue)
        hasher.combine(reportDescription?.hashValue)
        hasher.combine(reportId?.hashValue)
        hasher.combine(reportName?.hashValue)
        hasher.combine(reportType?.hashValue)
        hasher.combine(runUri?.hashValue)
        hasher.combine(saveUri?.hashValue)
        hasher.combine(scheduleId?.hashValue)
        hasher.combine(sentByDetails?.hashValue)
        hasher.combine(sentByFilter?.hashValue)
        hasher.combine(sentByIds?.hashValue)
        hasher.combine(sortFieldDirection?.hashValue)
        hasher.combine(sortFieldName?.hashValue)
    }
}

//
// SignatureType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object contains information about the type of signature. */
public final class SignatureType: Content {
    /** When **true**, the signature type is the default type. */
    public var isDefault: String?
    /** The type of signature. Valid values are:  - `electronic`: Indicates an **electronic** signature that is used by common law countries such as the United States, United Kingdom, and Australia. This is the default signature type that DocuSign uses. - `universal`: Indicates a **digital** signature that is accepted by both common law and civil law countries. To use digital signatures, you must use the [DocuSign Signature Appliance](https://developers.docusign.com/dsa-api).  For more information, see [Standards Based Signatures](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures). */
    public var type: String?

    public init(isDefault: String? = nil, type: String? = nil) {
        self.isDefault = isDefault
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isDefault
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(isDefault, forKey: .isDefault)
        try container.encodeIfPresent(type, forKey: .type)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        isDefault = try container.decodeIfPresent(String.self, forKey: .isDefault)
        type = try container.decodeIfPresent(String.self, forKey: .type)
    }
}

extension SignatureType: Hashable {
    public static func == (lhs: SignatureType, rhs: SignatureType) -> Bool {
        lhs.isDefault == rhs.isDefault &&
            lhs.type == rhs.type
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(isDefault?.hashValue)
        hasher.combine(type?.hashValue)
    }
}

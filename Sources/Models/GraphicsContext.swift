//
// GraphicsContext.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class GraphicsContext: Content {
    /** The fill color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). */
    public var fillColor: String?
    /** The line color to use for the overlay. Colors are typically specified by their RGB hex values, but you can also use a [friendly CSS color name](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value). */
    public var lineColor: String?
    /** The line weight or thickness to use for the overlay. */
    public var lineWeight: String?

    public init(fillColor: String? = nil, lineColor: String? = nil, lineWeight: String? = nil) {
        self.fillColor = fillColor
        self.lineColor = lineColor
        self.lineWeight = lineWeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fillColor
        case lineColor
        case lineWeight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(fillColor, forKey: .fillColor)
        try container.encodeIfPresent(lineColor, forKey: .lineColor)
        try container.encodeIfPresent(lineWeight, forKey: .lineWeight)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        fillColor = try container.decodeIfPresent(String.self, forKey: .fillColor)
        lineColor = try container.decodeIfPresent(String.self, forKey: .lineColor)
        lineWeight = try container.decodeIfPresent(String.self, forKey: .lineWeight)
    }
}

extension GraphicsContext: Hashable {
    public static func == (lhs: GraphicsContext, rhs: GraphicsContext) -> Bool {
        lhs.fillColor == rhs.fillColor &&
            lhs.lineColor == rhs.lineColor &&
            lhs.lineWeight == rhs.lineWeight
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(fillColor?.hashValue)
        hasher.combine(lineColor?.hashValue)
        hasher.combine(lineWeight?.hashValue)
    }
}

//
// BulkSendResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** The object contains the response to a bulk send request. */
public final class BulkSendResponse: Content {
    /** A batch identifier that you can use to get the status of the batch. */
    public var batchId: String?
    /**  */
    public var batchName: String?
    /** The total number of items in the batch being queried. */
    public var batchSize: String?
    /** The GUID of the envelope or template that was sent. */
    public var envelopeOrTemplateId: String?
    /** A human-readable object that describes errors that occur. It is only valid for responses and ignored in requests. */
    public var errorDetails: [String]?
    /** A list of errors that occurred. This information is intended to be parsed by machine. */
    public var errors: [String]?
    /**  */
    public var queueLimit: String?
    /**  */
    public var totalQueued: String?

    public init(batchId: String? = nil, batchName: String? = nil, batchSize: String? = nil, envelopeOrTemplateId: String? = nil, errorDetails: [String]? = nil, errors: [String]? = nil, queueLimit: String? = nil, totalQueued: String? = nil) {
        self.batchId = batchId
        self.batchName = batchName
        self.batchSize = batchSize
        self.envelopeOrTemplateId = envelopeOrTemplateId
        self.errorDetails = errorDetails
        self.errors = errors
        self.queueLimit = queueLimit
        self.totalQueued = totalQueued
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case batchId
        case batchName
        case batchSize
        case envelopeOrTemplateId
        case errorDetails
        case errors
        case queueLimit
        case totalQueued
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(batchName, forKey: .batchName)
        try container.encodeIfPresent(batchSize, forKey: .batchSize)
        try container.encodeIfPresent(envelopeOrTemplateId, forKey: .envelopeOrTemplateId)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(errors, forKey: .errors)
        try container.encodeIfPresent(queueLimit, forKey: .queueLimit)
        try container.encodeIfPresent(totalQueued, forKey: .totalQueued)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        batchId = try container.decodeIfPresent(String.self, forKey: .batchId)
        batchName = try container.decodeIfPresent(String.self, forKey: .batchName)
        batchSize = try container.decodeIfPresent(String.self, forKey: .batchSize)
        envelopeOrTemplateId = try container.decodeIfPresent(String.self, forKey: .envelopeOrTemplateId)
        errorDetails = try container.decodeIfPresent([String].self, forKey: .errorDetails)
        errors = try container.decodeIfPresent([String].self, forKey: .errors)
        queueLimit = try container.decodeIfPresent(String.self, forKey: .queueLimit)
        totalQueued = try container.decodeIfPresent(String.self, forKey: .totalQueued)
    }
}

extension BulkSendResponse: Hashable {
    public static func == (lhs: BulkSendResponse, rhs: BulkSendResponse) -> Bool {
        lhs.batchId == rhs.batchId &&
            lhs.batchName == rhs.batchName &&
            lhs.batchSize == rhs.batchSize &&
            lhs.envelopeOrTemplateId == rhs.envelopeOrTemplateId &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.errors == rhs.errors &&
            lhs.queueLimit == rhs.queueLimit &&
            lhs.totalQueued == rhs.totalQueued
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(batchId?.hashValue)
        hasher.combine(batchName?.hashValue)
        hasher.combine(batchSize?.hashValue)
        hasher.combine(envelopeOrTemplateId?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(errors?.hashValue)
        hasher.combine(queueLimit?.hashValue)
        hasher.combine(totalQueued?.hashValue)
    }
}

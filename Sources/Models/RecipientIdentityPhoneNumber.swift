//
// RecipientIdentityPhoneNumber.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class RecipientIdentityPhoneNumber: Content {
    /** The three-letter code for the user's country. */
    public var countryCode: String?
    /**  */
    public var `extension`: String?
    /**  */
    public var number: String?

    public init(countryCode: String? = nil, extension: String? = nil, number: String? = nil) {
        self.countryCode = countryCode
        self.extension = `extension`
        self.number = number
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countryCode
        case `extension`
        case number
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(`extension`, forKey: .extension)
        try container.encodeIfPresent(number, forKey: .number)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        countryCode = try container.decodeIfPresent(String.self, forKey: .countryCode)
        `extension` = try container.decodeIfPresent(String.self, forKey: .extension)
        number = try container.decodeIfPresent(String.self, forKey: .number)
    }
}

extension RecipientIdentityPhoneNumber: Hashable {
    public static func == (lhs: RecipientIdentityPhoneNumber, rhs: RecipientIdentityPhoneNumber) -> Bool {
        lhs.countryCode == rhs.countryCode &&
            lhs.extension == rhs.extension &&
            lhs.number == rhs.number
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(countryCode?.hashValue)
        hasher.combine(`extension`?.hashValue)
        hasher.combine(number?.hashValue)
    }
}

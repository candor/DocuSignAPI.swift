//
// AccountSettingsInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains account settings information. Used in requests to set property values. Used in responses to report property values. */
public final class AccountSettingsInformation: Content {
    public var accessCodeFormat: AccessCodeFormat?
    /** UTC date/time format for the account. */
    public var accountDateTimeFormat: String?
    public var accountDateTimeFormatMetadata: SettingsMetadata?
    /**  */
    public var accountDefaultLanguage: String?
    public var accountDefaultLanguageMetadata: SettingsMetadata?
    /** The name on the account. */
    public var accountName: String?
    public var accountNameMetadata: SettingsMetadata?
    public var accountNotification: AccountNotification?
    public var accountUISettings: AccountUISettings?
    /** When set to **true**, [Signature Adoption Configuration](https://support.docusign.com/en/guides/ndse-admin-guide-signature-adopt-config) is enabled.   **Note**: Only Admin users can change this setting. */
    public var adoptSigConfig: String?
    public var adoptSigConfigMetadata: SettingsMetadata?
    /** If **true**, the Advanced Correction feature is enabled for this account. */
    public var advancedCorrect: String?
    public var advancedCorrectMetadata: SettingsMetadata?
    /** When **true**, the configured [Access Code Format](https://developers.docusign.com/esign-rest-api/reference/Accounts/Accounts/get#accessCodeFormat) page is enabled for account administrators.  **Note**: Only Admin users can change this setting. */
    public var allowAccessCodeFormat: String?
    public var allowAccessCodeFormatMetadata: SettingsMetadata?
    /** When **true**, the account can be managed on a per-user basis.  **Note**: Only Admin users can change this setting. */
    public var allowAccountManagementGranular: String?
    public var allowAccountManagementGranularMetadata: SettingsMetadata?
    /** Boolean that specifies whether member names can be changed in the account. */
    public var allowAccountMemberNameChange: String?
    public var allowAccountMemberNameChangeMetadata: SettingsMetadata?
    /** When set to **true**, [Conditional Routing](https://support.docusign.com/en/guides/ndse-user-guide-conditional-recipients) is enabled for the account as part of DocuSign's Advanced Recipient Routing feature. */
    public var allowAdvancedRecipientRoutingConditional: String?
    public var allowAdvancedRecipientRoutingConditionalMetadata: SettingsMetadata?
    /**   If **true**, an agent recipient can change the email addresses of recipients later in the signing order.  */
    public var allowAgentNameEmailEdit: String?
    public var allowAgentNameEmailEditMetadata: SettingsMetadata?
    /**  */
    public var allowAgreementActions: String?
    public var allowAgreementActionsMetadata: SettingsMetadata?
    /**   If **true**, auto-navigation can be enabled for this account.  */
    public var allowAutoNavSettings: String?
    public var allowAutoNavSettingsMetadata: SettingsMetadata?
    /**  If **true**, auto-tagging is enabled for the account. */
    public var allowAutoTagging: String?
    public var allowAutoTaggingMetadata: SettingsMetadata?
    /** When set to **true**, bulk send functionality is enabled for the account.  **Note**: Only Admin users can change this setting. */
    public var allowBulkSend: String?
    public var allowBulkSendMetadata: SettingsMetadata?
    /** When set to **true**, indicates that the customer can withdraw their consent to the consumer disclosure when they decline to sign documents. If these recipients sign documents sent to them from your account in the future, they will be required to agree to the terms in the disclosure. The default value is **false**. **Note**: Only Admin users can change this setting. */
    public var allowCDWithdraw: String?
    public var allowCDWithdrawMetadata: SettingsMetadata?
    /** Boolean that specifies whether a Connect configuration can use HTTP listeners. */
    public var allowConnectHttpListenerConfigs: String?
    /** Reserved for DocuSign. */
    public var allowConnectSendFinishLater: String?
    public var allowConnectSendFinishLaterMetadata: SettingsMetadata?
    /**  */
    public var allowConnectUnifiedPayloadUI: String?
    /** If **true**, the account has the ability to change the [Consumer Disclosure](https://support.docusign.com/en/guides/ndse-admin-guide-legal-disclosure) setting.  */
    public var allowConsumerDisclosureOverride: String?
    public var allowConsumerDisclosureOverrideMetadata: SettingsMetadata?
    /** When set to **true**, senders can download form data from the envelopes that they send.  **Note**: Only Admin users can change this setting.  */
    public var allowDataDownload: String?
    public var allowDataDownloadMetadata: SettingsMetadata?
    /** Boolean that specifies whether disclosure documents can be included in envelopes. */
    public var allowDocumentDisclosures: String?
    public var allowDocumentDisclosuresMetadata: SettingsMetadata?
    /** Boolean that specifies whether notifications can include the envelope's signed document. */
    public var allowDocumentsOnSignedEnvelopes: String?
    public var allowDocumentsOnSignedEnvelopesMetadata: SettingsMetadata?
    /** When **true**, the [Document Visibility](https://support.docusign.com/guides/ndse-user-guide-document-visibility) feature is enabled for the account.  */
    public var allowDocumentVisibility: String?
    public var allowDocumentVisibilityMetadata: SettingsMetadata?
    /** When **true**, [eHanko stamps](https://support.docusign.com/en/guides/ndse-user-guide-manage-your-stamps) are enabled.  */
    public var allowEHankoStamps: String?
    public var allowEHankoStampsMetadata: SettingsMetadata?
    /** Specifies whether eNote eOriginal integration is enabled.  */
    public var allowENoteEOriginal: String?
    public var allowENoteEOriginalMetadata: SettingsMetadata?
    /** When set to **true**, the envelope correction feature is enabled.  **Note**: Only Admin users can change this setting.  */
    public var allowEnvelopeCorrect: String?
    public var allowEnvelopeCorrectMetadata: SettingsMetadata?
    /** Specifies whether the account is able to manage rules that [transfer ownership](https://support.docusign.com/en/guides/ndse-admin-guide-custody-transfer) of envelopes within the same account.     */
    public var allowEnvelopeCustodyTransfer: String?
    public var allowEnvelopeCustodyTransferMetadata: SettingsMetadata?
    /** Specifies whether [envelope custom fields](https://support.docusign.com/en/guides/ndse-user-guide-manage-custom-fields) are enabled.  */
    public var allowEnvelopeCustomFields: String?
    public var allowEnvelopeCustomFieldsMetadata: SettingsMetadata?
    /** When set to **true**, envelope publishing reporting is enabled.  **Note**: Only Admin users can change this setting.  */
    public var allowEnvelopePublishReporting: String?
    public var allowEnvelopePublishReportingMetadata: SettingsMetadata?
    /** Specifies whether the account has access to reports.  */
    public var allowEnvelopeReporting: String?
    public var allowEnvelopeReportingMetadata: SettingsMetadata?
    /** If the account plan does not include calculated fields, this setting allows an account to use them.   */
    public var allowExpression: String?
    public var allowExpressionMetadata: SettingsMetadata?
    /** When set to **true**, signers are required to use Express Digital Signatures.  **Note**: Only Admin users can change this setting.  */
    public var allowExpressSignerCertificate: String?
    public var allowExpressSignerCertificateMetadata: SettingsMetadata?
    /** Boolean that specifies whether resource files can be used for extended sending. */
    public var allowExtendedSendingResourceFile: String?
    public var allowExtendedSendingResourceFileMetadata: SettingsMetadata?
    /** When set to **true**, the account can configure and use signature pads for their recipients.  **Note**: Only Admin users can change this setting.  */
    public var allowExternalSignaturePad: String?
    public var allowExternalSignaturePadMetadata: SettingsMetadata?
    /** When set to **true**, IDV Level 1 is allowed. The default value is **false**. */
    public var allowIDVLevel1: String?
    public var allowIDVLevel1Metadata: SettingsMetadata?
    /**  */
    public var allowIDVPlatform: String?
    public var allowIDVPlatformMetadata: SettingsMetadata?
    /** When set to **true**, the account administrator can enable in-person signing.  **Note**: Only SysAdmin users can change this setting.   */
    public var allowInPerson: String?
    public var allowInPersonMetadata: SettingsMetadata?
    /** When **true**, [Managed Stamps](https://support.docusign.com/en/guides/ndse-admin-guide-managed-stamps) are enabled. */
    public var allowManagedStamps: String?
    public var allowManagedStampsMetadata: SettingsMetadata?
    /** When set to **true**, the Document Markup feature is enabled.  **Note**:  To use this feature, Document Markup must be enabled at both the account and envelope levels. Only Admin users can change this setting for at the account level. */
    public var allowMarkup: String?
    public var allowMarkupMetadata: SettingsMetadata?
    /** When set to **true**, account users can set their own [time zone settings](https://support.docusign.com/en/articles/How-do-I-modify-time-zone-settings-for-my-account).  **Note**: Only Admin users can change this setting.  */
    public var allowMemberTimeZone: String?
    public var allowMemberTimeZoneMetadata: SettingsMetadata?
    /** When set to **true**, the account can use [merge fields](https://support.docusign.com/en/guides/dfs-user-guide-merge-fields-user) with DocuSign for Salesforce.  */
    public var allowMergeFields: String?
    public var allowMergeFieldsMetadata: SettingsMetadata?
    /** Specifies whether the account supports multiple brands.  */
    public var allowMultipleBrandProfiles: String?
    public var allowMultipleBrandProfilesMetadata: SettingsMetadata?
    /** When set to **true**, recipients can upload multiple signer attachments with a single attachment.  **Note**: Only Admin users can change this setting. */
    public var allowMultipleSignerAttachments: String?
    public var allowMultipleSignerAttachmentsMetadata: SettingsMetadata?
    /** Specifies whether users can use international numbers for phone authentication.  */
    public var allowNonUSPhoneAuth: String?
    public var allowNonUSPhoneAuthMetadata: SettingsMetadata?
    /**  */
    public var allowOcrOfEnvelopeDocuments: String?
    public var allowOcrOfEnvelopeDocumentsMetadata: SettingsMetadata?
    /** When set to **true**, [offline signing](https://support.docusign.com/articles/Offline-access-with-the-DocuSign-Mobile-App-for-iOS-iPad-iPhone-iPod-Touch) is enabled for the account.  **Note**: Only Admin users can change this setting. */
    public var allowOfflineSigning: String?
    public var allowOfflineSigningMetadata: SettingsMetadata?
    /** When set to **true**, senders can use OpenTrust signer certificates.  **Note**: Only Admin users can change this setting. */
    public var allowOpenTrustSignerCertificate: String?
    public var allowOpenTrustSignerCertificateMetadata: SettingsMetadata?
    /** Boolean that specifies whether [DocuSign Admin](https://developers.docusign.com/orgadmin-api) is enabled for the account. */
    public var allowOrganizations: String?
    public var allowOrganizationsMetadata: SettingsMetadata?
    /** When set to **true**, payment processing is enabled for the account.  **Note**: Only Admin users can change this setting. */
    public var allowPaymentProcessing: String?
    public var allowPaymentProcessingMetadata: SettingsMetadata?
    /** When set to **true**, signers can use personal signer certificates.  **Note**: Only Admin users can change this setting. */
    public var allowPersonalSignerCertificate: String?
    public var allowPersonalSignerCertificateMetadata: SettingsMetadata?
    /** Boolean that specifies whether phone authentication is enabled for the account. */
    public var allowPhoneAuthentication: String?
    public var allowPhoneAuthenticationMetadata: SettingsMetadata?
    /** Boolean that specifies whether users can override phone authentication. */
    public var allowPhoneAuthOverride: String?
    public var allowPhoneAuthOverrideMetadata: SettingsMetadata?
    /** Reserved for DocuSign. This property returns the value **false** when listing account settings. Read only. */
    public var allowPrivateSigningGroups: String?
    public var allowPrivateSigningGroupsMetadata: SettingsMetadata?
    /** When set to **true**, an account administrator can to turn on reminders and expiration defaults for the account.  **Note**: Only Admin users can change this setting.  */
    public var allowReminders: String?
    public var allowRemindersMetadata: SettingsMetadata?
    /**  */
    public var allowRemoteNotary: String?
    public var allowRemoteNotaryMetadata: SettingsMetadata?
    /** If **true**, resource files can be uploaded in branding.  */
    public var allowResourceFileBranding: String?
    public var allowResourceFileBrandingMetadata: SettingsMetadata?
    /** When set to **true**, account administrators can specify that signers are required to use SAFE-BioPharma digital signatures.  **Note**: Only Admin users can change this setting.  */
    public var allowSafeBioPharmaSignerCertificate: String?
    public var allowSafeBioPharmaSignerCertificateMetadata: SettingsMetadata?
    /** Boolean that specifies whether a DocuSign Signature Appliance can be used with the account. */
    public var allowSecurityAppliance: String?
    public var allowSecurityApplianceMetadata: SettingsMetadata?
    /** If **true**, the account admin can enable the Send to Certified Delivery feature on the account.  */
    public var allowSendToCertifiedDelivery: String?
    public var allowSendToCertifiedDeliveryMetadata: SettingsMetadata?
    /** If **true**, the account admin can enable the Send to Intermediary feature on the account.  */
    public var allowSendToIntermediary: String?
    public var allowSendToIntermediaryMetadata: SettingsMetadata?
    /** If **true**, the account can use templates.  */
    public var allowServerTemplates: String?
    public var allowServerTemplatesMetadata: SettingsMetadata?
    /**  */
    public var allowSetEmbeddedRecipientStartURL: String?
    public var allowSetEmbeddedRecipientStartURLMetadata: SettingsMetadata?
    /** When set to **true**, shared tabs are enabled for the account.  **Note**: Only Admin users can change this setting.  */
    public var allowSharedTabs: String?
    public var allowSharedTabsMetadata: SettingsMetadata?
    /** When set to **true**, Signature Stamps are enabled.  **Note**: Only Admin users can change this setting. */
    public var allowSignatureStamps: String?
    public var allowSignatureStampsMetadata: SettingsMetadata?
    /** When set to **true**, recipients can sign documents from the home page.  **Note**: Only Admin users can change this setting. */
    public var allowSignDocumentFromHomePage: String?
    public var allowSignDocumentFromHomePageMetadata: SettingsMetadata?
    /** When set to **true**, the recipient of an envelope sent from this account can reassign it to another person.  **Note**: Only Admin users can change this setting.  */
    public var allowSignerReassign: String?
    public var allowSignerReassignMetadata: SettingsMetadata?
    /** When set to **true**, an account administrator can override the ability of an envelope recipient to reassign it to another person.  **Note**: Only Admin users can change this setting. */
    public var allowSignerReassignOverride: String?
    public var allowSignerReassignOverrideMetadata: SettingsMetadata?
    /** Boolean that specifies whether Signing and App Extensions are allowed. */
    public var allowSigningExtensions: String?
    public var allowSigningExtensionsMetadata: SettingsMetadata?
    /** When set to **true**, the account allows signing groups. This setting is only shown in responses that list account settings. Read only. */
    public var allowSigningGroups: String?
    public var allowSigningGroupsMetadata: SettingsMetadata?
    /** Boolean that specifies whether the account supports radio buttons on tabs [Radio CustomTabType](https://developers.docusign.com/esign-soap-api/reference/Sending-Group/Tab). */
    public var allowSigningRadioDeselect: String?
    public var allowSigningRadioDeselectMetadata: SettingsMetadata?
    /** If **true**, the account administrator can enable the Sign Now feature.  */
    public var allowSignNow: String?
    /** Metadata that indicates whether the `allowSignNow` property is editable.  */
    public var allowSignNowMetadata: String?
    /**  */
    public var allowSMSDelivery: String?
    public var allowSMSDeliveryMetadata: SettingsMetadata?
    /** Deprecated. */
    public var allowSocialIdLogin: String?
    public var allowSocialIdLoginMetadata: SettingsMetadata?
    /** When **true**, this user can include supplemental documents. */
    public var allowSupplementalDocuments: String?
    public var allowSupplementalDocumentsMetadata: SettingsMetadata?
    /**  */
    public var allowUsersToAccessDirectory: String?
    public var allowUsersToAccessDirectoryMetadata: SettingsMetadata?
    /**  */
    public var allowValueInsights: String?
    public var allowValueInsightsMetadata: SettingsMetadata?
    /** This property determines how template anchor tabs are applied.  Valid values are:  - `document`: Anchor tabs are applied only to the document that you specify.  - `envelope`: Anchor tabs are applied to all of the documents in the envelope associated with the template.  **Note**: When you are using the `anchorPopulationScope` property with a Composite Template, the value `document` is supported only with a single server template and a single inline template.   */
    public var anchorPopulationScope: String?
    public var anchorPopulationScopeMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var anchorTagVersionedPlacementEnabled: String?
    public var anchorTagVersionedPlacementMetadataEnabled: SettingsMetadata?
    /** When set to **true**, envelope documents are included as a PDF file attachment to \"signing completed\" emails.  **Note**: Only SysAdmin users can change this setting. */
    public var attachCompletedEnvelope: String?
    public var attachCompletedEnvelopeMetadata: SettingsMetadata?
    /** Sets when authentication checks are applied for recipient envelope access. This setting only applies to the following ID checks:   - Phone Authentication - SMS Authentication - Knowledge-Based ID  This setting takes one of the following options:   - `initial_access`: The authentication check always applies the first time a recipient accesses the documents. Recipients are not asked to authenticate again when they access the documents from the same browser on the same device. If the recipient attempts to access the documents from a different browser or a different device, the recipient must pass authentication again. Once authenticated, that recipient is not challenged again on the new device or browser. The ability for a recipient to skip authentication for documents is limited to documents sent from the same sending account. - `each_access`: Authentication checks apply every time a recipient attempts to access the envelope. However, you can configure the Authentication Expiration setting to allow recipients to skip authentication when they have recently passed authentication by setting a variable time frame.  **Note**: Only Admin users can change this setting.  */
    public var authenticationCheck: String?
    public var authenticationCheckMetadata: SettingsMetadata?
    /** Specifies how auto-navigation works. Valid values are:  - `off` - `required_fields` - `required_and_blank_fields` - `all_fields` - `page_then_required_fields` - `page_then_required_and_blank_fields` - `page_then_all_fields`  */
    public var autoNavRule: String?
    public var autoNavRuleMetadata: SettingsMetadata?
    /** Boolean that specifies whether to automatically provision a user membership in the account for accountless recipients. (Also known as Just-in-Time provisioning.) */
    public var autoProvisionSignerAccount: String?
    public var autoProvisionSignerAccountMetadata: SettingsMetadata?
    /** Boolean that specifies whether BCC for Email Archive is enabled for the account. BCC for Email Archive allows you to set up an archive email address so that a BCC copy of an envelope is sent only to that address. */
    public var bccEmailArchive: String?
    public var bccEmailArchiveMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var betaSwitchConfiguration: String?
    public var betaSwitchConfigurationMetadata: SettingsMetadata?
    public var billingAddress: AddressInformation?
    public var billingAddressMetadata: SettingsMetadata?
    /** When **true**, this user can use the bulk send feature for the account. */
    public var bulkSend: String?
    /**  */
    public var bulkSendMaxCopiesInBatch: String?
    /**  */
    public var bulkSendMaxUnprocessedEnvelopesCount: String?
    public var bulkSendMetadata: SettingsMetadata?
    /** When set to **true**, account administrators can self-brand their sending console through the DocuSign console. */
    public var canSelfBrandSend: String?
    public var canSelfBrandSendMetadata: SettingsMetadata?
    /** When set to **true**, account administrators can self-brand their signing console through the DocuSign console. */
    public var canSelfBrandSign: String?
    public var canSelfBrandSignMetadata: SettingsMetadata?
    /**  */
    public var canUseSalesforceOAuth: String?
    public var canUseSalesforceOAuthMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var captureVoiceRecording: String?
    public var captureVoiceRecordingMetadata: SettingsMetadata?
    /** Boolean that specifies whether to use a shorter/wider format when generating the CFR Part 11 signature image. */
    public var cfrUseWideImage: String?
    public var cfrUseWideImageMetadata: SettingsMetadata?
    /**  */
    public var checkForMultipleAdminsOnAccount: String?
    public var checkForMultipleAdminsOnAccountMetadata: SettingsMetadata?
    /** Boolean that specifies whether the signers of the envelopes from this account use a signature with a DocuSign chrome around it or not. */
    public var chromeSignatureEnabled: String?
    public var chromeSignatureEnabledMetadata: SettingsMetadata?
    /** When set to **true**, the text of comments is included in email notifications when a comment is posted.  **Note**:  If the envelope requires additional recipient authentication, comment text is not included. */
    public var commentEmailShowMessageText: String?
    public var commentEmailShowMessageTextMetadata: SettingsMetadata?
    /** When set to **true** and comments are enabled for the account, senders can disable comments for an envelope through the **Advanced Options** menu that appears during the sending process. */
    public var commentsAllowEnvelopeOverride: String?
    public var commentsAllowEnvelopeOverrideMetadata: SettingsMetadata?
    /** When set to **true**, conditional fields can be used in documents.  **Note**: Only Admin users can change this setting. */
    public var conditionalFieldsEnabled: String?
    public var conditionalFieldsEnabledMetadata: SettingsMetadata?
    /** Speficies how often to display the consumer disclosure.  Valid values are:  - `once`: Per account, the supplemental document is displayed once only per `userId`.  - `always`: Per envelope, the supplemental document is displayed once only per `userId`.  - `each_access`: Per envelope, the supplemental document is displayed once only per `recipientId`.  */
    public var consumerDisclosureFrequency: String?
    public var consumerDisclosureFrequencyMetadata: SettingsMetadata?
    /** Boolean that specifies whether to enable PDF form fields to get converted to DocuSign secure fields when the document is added or uploaded to an envelope. */
    public var convertPdfFields: String?
    public var convertPdfFieldsMetadata: SettingsMetadata?
    /** Specifies how data is shared for tabs with the same tabLabel. Valid values are:  - `document`: Tabs in a document with the same label populate with the same data. - `envelope`: Tabs in all documents in the envelope with the same label populate with the same data.  This setting applies to the following tab types:   - Check box  - Company - Data field - Drop-down list - Full name  - Formula - Note - Title  **Note**: Only Admin users can change this setting. Changing this setting affects envelopes that have been sent but not completed.                                                                                                                                                                                                                  */
    public var dataPopulationScope: String?
    public var dataPopulationScopeMetadata: SettingsMetadata?
    /** When **true**, the mobile app distributor key is prevented from connecting for account users. */
    public var disableMobileApp: String?
    public var disableMobileAppMetadata: SettingsMetadata?
    /** When set to **true**, push notifications are disabled for the account.  **Note**: Only Admin users can change this setting. */
    public var disableMobilePushNotifications: String?
    public var disableMobilePushNotificationsMetadata: SettingsMetadata?
    /** When set to **true**, sending from a mobile application is disabled.  **Note**: Only Admin users can change this setting. */
    public var disableMobileSending: String?
    public var disableMobileSendingMetadata: SettingsMetadata?
    /** When set to **true**, account users cannot be logged into multiple sessions at the same time.  **Note**: Only Admin users can change this setting. */
    public var disableMultipleSessions: String?
    public var disableMultipleSessionsMetadata: SettingsMetadata?
    public var disablePurgeNotificationsForSenderMetadata: SettingsMetadata?
    /** When **true**, signers cannot view certificates of completion. */
    public var disableSignerCertView: String?
    public var disableSignerCertViewMetadata: SettingsMetadata?
    /** When **true**, signers cannot view envelope history. */
    public var disableSignerHistoryView: String?
    public var disableSignerHistoryViewMetadata: SettingsMetadata?
    /** When **true**, the **Select Style** option is hidden from signers and they must draw their signature instead.  */
    public var disableStyleSignature: String?
    public var disableStyleSignatureMetadata: SettingsMetadata?
    /** When set to **true**, signers cannot upload custom image files of their signature and initials.  **Note**: Only Admin users can change this setting. */
    public var disableUploadSignature: String?
    public var disableUploadSignatureMetadata: SettingsMetadata?
    /** When **true**, the User Sharing feature is disabled for the account. */
    public var disableUserSharing: String?
    public var disableUserSharingMetadata: SettingsMetadata?
    /** Boolean that specifies whether to display a Beta switch for your app. */
    public var displayBetaSwitch: String?
    public var displayBetaSwitchMetadata: SettingsMetadata?
    /** Sets the account document upload restriction for non-account administrators. Valid values are:  - `no_restrictions`: There are no restrictions on the type of documents that can be uploaded. - `allow_pdf_only`: Non-administrators can only upload PDF files. - `no_upload`: Non-administrators cannot upload files.  **Note**: Only Admin users can change this setting.  */
    public var documentConversionRestrictions: String?
    public var documentConversionRestrictionsMetadata: SettingsMetadata?
    /** Sets a document retention period, which controls the number of days that DocuSign retains documents after they have reached a completed,declined, or voided state. When document retention is enabled for the account, the default value is `356` days. */
    public var documentRetention: String?
    public var documentRetentionMetadata: SettingsMetadata?
    /** When set to **true** and `documentRetention` is set, document fields and metadata are also purged after the document retention period ends. The default value is **false**.  **Note**: Only Admins can change this setting. */
    public var documentRetentionPurgeTabs: String?
    /** Configures the Document Visibility feature for the account. Valid values are:  - `Off`: Document Visibility is not active for the account. - `MustSignToViewUnlessSenderAccount`: Document Visibility is enabled for all envelopes sent from the account. Any member of the sending account can view all of the documents in an envelope. - `MustSignToViewUnlessSender`: Document Visibility is enabled for all envelopes sent from the account. Only the sender can view all of the documents in an envelope. - `SenderCanSetMustSignToViewUnlessSenderAccount`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents within it are still visible to any member of the sending account. Vd- `SenderCanSetMustSignToViewUnlessSender`: The sender has the option to enable Document Visibility for an envelope. When enabled for an envelope, all of the documents in the envelope are visible only to the sender.  **Note**: For this configuration to take effect, `allowDocumentVisibility` must be set to **true**. */
    public var documentVisibility: String?
    public var documentVisibilityMetadata: SettingsMetadata?
    /** Specifies the version of the email templates used in an account. If new signing is selected in a member's Admin page, the user is updated to the newest version (1.1), the minimum version of email supported for the account. */
    public var emailTemplateVersion: String?
    public var emailTemplateVersionMetadata: SettingsMetadata?
    /** When **true**, enables Access Code Generator on the account. */
    public var enableAccessCodeGenerator: String?
    public var enableAccessCodeGeneratorMetadata: SettingsMetadata?
    /** When **true**, enables Advanced Payments for the account. */
    public var enableAdvancedPayments: String?
    public var enableAdvancedPaymentsMetadata: SettingsMetadata?
    /** When **true**, enables advanced PowerForms for the account. */
    public var enableAdvancedPowerForms: String?
    public var enableAdvancedPowerFormsMetadata: SettingsMetadata?
    /**  */
    public var enableAgreementActionsForCLM: String?
    public var enableAgreementActionsForCLMMetadata: SettingsMetadata?
    /**  */
    public var enableAgreementActionsForESign: String?
    public var enableAgreementActionsForESignMetadata: SettingsMetadata?
    /** When **true**, enables the account to set the AutoNav rule setting, which enables a sender to override the auto-navigation setting per envelope.  **Note**: To change this setting, you must be a SysAdmin user or `EnableAutoNavByDSAdmin must be set. */
    public var enableAutoNav: String?
    public var enableAutoNavMetadata: SettingsMetadata?
    /** When set to **true**, calculated fields are enabled for the account.   **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowExpression` is set to **true**. */
    public var enableCalculatedFields: String?
    public var enableCalculatedFieldsMetadata: SettingsMetadata?
    /** Boolean that specifies whether clickwraps are enabled in your app. A [clickwrap](https://developers.docusign.com/click-api/guides/) is an iframe that you embed in your own website or app. */
    public var enableClickwraps: String?
    public var enableClickwrapsMetadata: SettingsMetadata?
    /**  */
    public var enableCommentsHistoryDownloadInSigning: String?
    public var enableCommentsHistoryDownloadInSigningMetadata: SettingsMetadata?
    /** When **true**, enables customer satisfaction metric tracking for the account. */
    public var enableCustomerSatisfactionMetricTracking: String?
    public var enableCustomerSatisfactionMetricTrackingMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableDSPro: String?
    public var enableDSProMetadata: SettingsMetadata?
    /** When set to **true**, enables the account administrator to control envelope stamping for an account (stamping the `envelopeId` in the the document margins).  **Note**: This setting can be changed only by Admin users, and only if the account-level setting `enableEnvelopeStampingByDSAdmin` is set to **true**. */
    public var enableEnvelopeStampingByAccountAdmin: String?
    public var enableEnvelopeStampingByAccountAdminMetadata: SettingsMetadata?
    /** When **true**, enables the DocuSign administrator to control envelope stamping for an account (placement of the `envelopeId`). */
    public var enableEnvelopeStampingByDSAdmin: String?
    public var enableEnvelopeStampingByDSAdminMetadata: SettingsMetadata?
    /**  */
    public var enableInBrowserEditor: String?
    public var enableInBrowserEditorMetadata: SettingsMetadata?
    /** When set to **true**, payment processing is enabled for this account.  **Note**: This setting can be changed only by Admin users, and only if the account-level setting `allowPaymentProcessing` is set. */
    public var enablePaymentProcessing: String?
    public var enablePaymentProcessingMetadata: SettingsMetadata?
    /** When set to **true**, enables PowerForms for the account.  **Note**: Only SysAdmin users can change this setting. */
    public var enablePowerForm: String?
    /** When set to **true**, enables direct PowerForms for an account. Direct PowerForms are in-session PowerForms.  **Note**: Only Admin users can change this setting. */
    public var enablePowerFormDirect: String?
    public var enablePowerFormDirectMetadata: SettingsMetadata?
    public var enablePowerFormMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableRecipientDomainValidation: String?
    public var enableRecipientDomainValidationMetadata: SettingsMetadata?
    /** Enables direct links to envelopes in reports for administrators in the following scopes: - `NoEnvelopes` - `AllEnvelopes` - `OnlyOwnEnvelopes` */
    public var enableReportLinks: String?
    public var enableReportLinksMetadata: SettingsMetadata?
    /** When set to **true**, the account can use the `requireSignOnPaper` option.  **Note**: Only Admin users can change this setting.  */
    public var enableRequireSignOnPaper: String?
    public var enableRequireSignOnPaperMetadata: SettingsMetadata?
    /** When **true**, account administrators can reserve a web domain and users. Domains are organization-specific reserved internet domains, such as `@exampledomain.com`. You can define policy settings for users of each reserved domain within your organization, export lists of domain users for audit purposes, and manage domain users.  - Domains may be claimed by an organization. - When a domain is claimed by an organization, all users within that domain are added to the organization, even if they have trial or free accounts. - You can set domain controls for all users of the domain. - You can export information about your organization’s users that are associated with your reserved domains.  **Note**: Only SysAdmin users can change this setting. */
    public var enableReservedDomain: String?
    public var enableReservedDomainMetadata: SettingsMetadata?
    /** When **true**, enables responsive signing. */
    public var enableResponsiveSigning: String?
    public var enableResponsiveSigningMetadata: SettingsMetadata?
    /** When set to **true**, scheduled releases are enabled. The default value is **false**. */
    public var enableScheduledRelease: String?
    public var enableScheduledReleaseMetadata: SettingsMetadata?
    /**  */
    public var enableSearchUI: String?
    public var enableSearchUIMetadata: SettingsMetadata?
    /** When **true**, enables fonts to be set on tags for the account. */
    public var enableSendingTagsFontSettings: String?
    public var enableSendingTagsFontSettingsMetadata: SettingsMetadata?
    /** When **true**, this account can use the Agent recipient type.  **Note**: Only SysAdmin users can change this setting.  */
    public var enableSendToAgent: String?
    public var enableSendToAgentMetadata: SettingsMetadata?
    /** When set to **true**, this account can use the Intermediary recipient type.  **Note**: Only Admin users can change this setting, and only if `allowSendToIntermediary` is set.  */
    public var enableSendToIntermediary: String?
    public var enableSendToIntermediaryMetadata: SettingsMetadata?
    /** When set to **true**, this account can use the Editor recipient type.  **Note**: Only Admin users can change this setting.  */
    public var enableSendToManage: String?
    public var enableSendToManageMetadata: SettingsMetadata?
    /** When set to **true**, the account can define the routing order of recipients for envelopes sent by using the eSignature API.  **Note**: Only SysAdmin users can change this setting. */
    public var enableSequentialSigningAPI: String?
    public var enableSequentialSigningAPIMetadata: SettingsMetadata?
    /** When set to **true**, the account can define the routing order of recipients for envelopes sent by using the DocuSign application.  **Note**: Only SysAdmin users can change this setting.  */
    public var enableSequentialSigningUI: String?
    public var enableSequentialSigningUIMetadata: SettingsMetadata?
    /** When set to **true**, users can use the signing attachments feature to request attachments from signers.  **Note**: Only Admin users can change this setting. */
    public var enableSignerAttachments: String?
    public var enableSignerAttachmentsMetadata: SettingsMetadata?
    /** When set to **true**, enables comments for the account so that signers and recipients can make and respond to comments in documents belonging to the envelopes that they are sent. */
    public var enableSigningExtensionComments: String?
    public var enableSigningExtensionCommentsMetadata: SettingsMetadata?
    /** When **true**, enables conversation functionality. */
    public var enableSigningExtensionConversations: String?
    public var enableSigningExtensionConversationsMetadata: SettingsMetadata?
    /** When **true**, switches Signing Order to On by default for new envelopes. */
    public var enableSigningOrderSettingsForAccount: String?
    public var enableSigningOrderSettingsForAccountMetadata: SettingsMetadata?
    /** When set to **true**, a sender can allow signers to use the sign on paper option.  **Note**: Only Admin users can change this setting.  */
    public var enableSignOnPaper: String?
    public var enableSignOnPaperMetadata: SettingsMetadata?
    /** When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.  **Note**: Only Admin users can change this setting. */
    public var enableSignOnPaperOverride: String?
    public var enableSignOnPaperOverrideMetadata: SettingsMetadata?
    /** When set to **true**, Sign with Notary functionality is enabled for the account.  **Note**: Only Admin users can change this setting. */
    public var enableSignWithNotary: String?
    public var enableSignWithNotaryMetadata: SettingsMetadata?
    /** When set to **true**, blockchain-based [Smart Contracts](https://www.docusign.com/products/blockchain) are enabled. The default value is **false**. */
    public var enableSmartContracts: String?
    public var enableSmartContractsMetadata: SettingsMetadata?
    /** When set to **true**, the account can use SMS authentication.  **Note**: Only Admin users can change this setting.  */
    public var enableSMSAuthentication: String?
    public var enableSMSAuthenticationMetadata: SettingsMetadata?
    /** Deprecated. */
    public var enableSocialIdLogin: String?
    public var enableSocialIdLoginMetadata: SettingsMetadata?
    /** When **true**, enables strikethrough formatting in documents. */
    public var enableStrikeThrough: String?
    public var enableStrikeThroughMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableTransactionPoint: String?
    public var enableTransactionPointMetadata: SettingsMetadata?
    /** When set to **true**, Vaulting is enabled for the account. */
    public var enableVaulting: String?
    public var enableVaultingMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableWitnessing: String?
    public var enableWitnessingMetadata: SettingsMetadata?
    /** When **true**, the template name must be unique. */
    public var enforceTemplateNameUniqueness: String?
    public var enforceTemplateNameUniquenessMetadata: SettingsMetadata?
    /** Shows the envelope integration rule for the account, which indicates whether custom admins can enable Connect for their accounts. Enumeration values are:   - `not_allowed` - `full`   **Note**: Only SysAdmin users can change this setting.                                                                                  */
    public var envelopeIntegrationAllowed: String?
    public var envelopeIntegrationAllowedMetadata: SettingsMetadata?
    /** When **true**, enables Connect for an account. Note that Connect integration requires additional configuration that must be set up for it to take effect; this switch is only the on/off control for the account.  **Note**: Only Admin users can change this setting, and only when `envelopeIntegrationAllowed` is set. */
    public var envelopeIntegrationEnabled: String?
    public var envelopeIntegrationEnabledMetadata: SettingsMetadata?
    /** When set to **true**, envelopes sent by this account automatically have the envelope ID stamped in the document margins, unless the sender selects not to have the documents stamped. */
    public var envelopeStampingDefaultValue: String?
    public var envelopeStampingDefaultValueMetadata: SettingsMetadata?
    /** Boolean that specifies whether a member of an account can express send (without tags) or must send with tags on documents. */
    public var expressSend: String?
    /** Boolean that specifies whether a member of an account can send templates without the tags being stripped out, even when the account is configured to let its users express send only (they cannot use the tagger). */
    public var expressSendAllowTabs: String?
    public var expressSendAllowTabsMetadata: SettingsMetadata?
    public var expressSendMetadata: SettingsMetadata?
    public var externalDocumentSources: ExternalDocumentSources?
    /** Specifies the signature pad type. Valid values are:  - `none` - `topaz` - `e_padv9` - `e_pad_integrisign` - `topaz_sigplusextlite`  **Note**: Only Admin users can change this setting.  */
    public var externalSignaturePadType: String?
    public var externalSignaturePadTypeMetadata: SettingsMetadata?
    /** When set to **true**, fax delivery to recipients is allowed for the account.  **Note**: Only Admin users can change this setting. */
    public var faxOutEnabled: String?
    public var faxOutEnabledMetadata: SettingsMetadata?
    /** When set to **true**, HTML used to implement [Guided Forms](https://www.docusign.com/products/guided-forms) is enabled for the account. */
    public var guidedFormsHtmlAllowed: String?
    public var guidedFormsHtmlAllowedMetadata: SettingsMetadata?
    /** Boolean that specifies whether to hide the account address in the Certificate of Completion. */
    public var hideAccountAddressInCoC: String?
    public var hideAccountAddressInCoCMetadata: SettingsMetadata?
    /** Boolean that specifies whether to hide the pricing functionality for an account. */
    public var hidePricing: String?
    public var hidePricingMetadata: SettingsMetadata?
    /** A list of ID check configuration objects. */
    public var idCheckConfigurations: [IdCheckConfiguration]?
    /** Determines when a user's authentication with the account expires. Valid values are:  - `always`: Users are required to authenticate each time. - `variable`: If the authentication for a user is valid and falls within the value for the `idCheckExpireDays` property, the user is not required to authenticate again.  **Note**: Only Admin users can change this setting. */
    public var idCheckExpire: String?
    /** The number of days before user authentication credentials expire. A value of `0` specifies that users must re-authenticate for each new session.  **Note**: Only Admin users can change this setting. */
    public var idCheckExpireDays: String?
    public var idCheckExpireDaysMetadata: SettingsMetadata?
    public var idCheckExpireMetadata: SettingsMetadata?
    /** The number of minutes before user authentication credentials expire. */
    public var idCheckExpireMinutes: String?
    public var idCheckExpireMinutesMetadata: SettingsMetadata?
    /** Indicates if authentication is configured for the account. Valid values are:  - `always`: Authentication checks are performed on every envelope. - `never`: Authentication checks are not performed on any envelopes. - `optional`: Authentication is configurable per envelope.  **Note**: Only Admin users can change this setting. */
    public var idCheckRequired: String?
    public var idCheckRequiredMetadata: SettingsMetadata?
    /**   */
    public var identityVerification: [AccountIdentityVerificationWorkflow]?
    public var identityVerificationMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var ignoreErrorIfAnchorTabNotFound: String?
    public var ignoreErrorIfAnchorTabNotFoundMetadataEnabled: SettingsMetadata?
    /** A text field containing the question that an in-person signing host uses to collect personal information from the recipient. The recipient's response to this question is saved and can be viewed in the certificate associated with the envelope.  **Note**: Only Admin users can change this setting. */
    public var inPersonIDCheckQuestion: String?
    public var inPersonIDCheckQuestionMetadata: SettingsMetadata?
    /** When **true**, in-person signing is enabled for the account. */
    public var inPersonSigningEnabled: String?
    public var inPersonSigningEnabledMetadata: SettingsMetadata?
    /** When **true**, the account can send in-session (embedded) envelopes.  **Note**: Only Admin users can change this setting. */
    public var inSessionEnabled: String?
    public var inSessionEnabledMetadata: SettingsMetadata?
    /** When set to **true**, emails are not sent to the in-session (embedded) recipients on an envelope.  **Note**: Only Admin users can change this setting. */
    public var inSessionSuppressEmails: String?
    public var inSessionSuppressEmailsMetadata: SettingsMetadata?
    /** The maximum number of signing groups allowed on the account. The default value is `50`. This setting is only shown in responses that list account settings.  **Note**: Only SysAdmin users can change this setting. */
    public var maximumSigningGroups: String?
    public var maximumSigningGroupsMetadata: SettingsMetadata?
    /** The maximum number of users per signing group. The default value is `50`. This setting is only shown in responses that list account settings.  **Note**: Only SysAdmin users can change this setting. */
    public var maximumUsersPerSigningGroup: String?
    public var maximumUsersPerSigningGroupMetadata: SettingsMetadata?
    /** The maximum number of custom stamps. */
    public var maxNumberOfCustomStamps: String?
    /** The number of minutes of inactivity before a mobile user is automatically logged out of the system. Valid values are `1` to `120` minutes. The default value is `20` minutes.  **Note**: Only Admin users can change this setting. */
    public var mobileSessionTimeout: String?
    public var mobileSessionTimeoutMetadata: SettingsMetadata?
    /** The number of active custom stamps associated with the account. DocuSign calculates this number automatically. This property is only visible to the DocuSign account manager. */
    public var numberOfActiveCustomStamps: String?
    /** Boolean that specifies whether to opt in for Signing v02 on Mobile Devices functionality. */
    public var optInMobileSigningV02: String?
    public var optInMobileSigningV02Metadata: SettingsMetadata?
    /** Boolean that allows envelope senders to opt out of the recipient signing auto-navigation feature and opt out of updating tab font color. */
    public var optOutAutoNavTextAndTabColorUpdates: String?
    public var optOutAutoNavTextAndTabColorUpdatesMetadata: SettingsMetadata?
    /** Boolean that specifies whether to allow envelope senders to opt out of using the new platform seal. */
    public var optOutNewPlatformSeal: String?
    public var optOutNewPlatformSealPlatformMetadata: SettingsMetadata?
    /** When set to **true**, senders can allow recipients to provide a phone number for the Phone Authentication process.  **Note**: Only Admin users can change this setting. */
    public var phoneAuthRecipientMayProvidePhoneNumber: String?
    public var phoneAuthRecipientMayProvidePhoneNumberMetadata: SettingsMetadata?
    /** The policy for adding a digital certificate to downloaded, printed, and emailed documents.   Possible values are:   - `no_sign` - `no_sign_allow_user_override` - `yes_sign` (Specifies that PDF files downloaded from the platform are signed.)  **Note**: Only Admin users can change this setting.  */
    public var pkiSignDownloadedPDFDocs: String?
    public var pkiSignDownloadedPDFDocsMetadata: SettingsMetadata?
    /** When set to **true**, recipients receiving envelopes from this account can sign offline.  **Note**: Only Admin users can change this setting.  */
    public var recipientsCanSignOffline: String?
    public var recipientsCanSignOfflineMetadata: SettingsMetadata?
    /** When set to **true**, recipients receiving envelopes from this account can override auto-navigation functionality.  **Note**: Only Admin users can change this setting.  */
    public var recipientSigningAutoNavigationControl: String?
    public var recipientSigningAutoNavigationControlMetadata: SettingsMetadata?
    /** When set to **true**, recipients are required to use a 21 CFR part 11-compliant signing experience.  **Note**: Only Admin users can change this setting.  */
    public var require21CFRpt11Compliance: String?
    public var require21CFRpt11ComplianceMetadata: SettingsMetadata?
    /** When set to **true**, signers who decline to sign an envelope sent from this account are required to provide a reason for declining.  **Note**: Only Admin users can change this setting.  */
    public var requireDeclineReason: String?
    public var requireDeclineReasonMetadata: SettingsMetadata?
    /** When set to **true**, the account requires external management of users.  **Note**: Only Admin users can change this setting.  */
    public var requireExternalUserManagement: String?
    public var requireExternalUserManagementMetadata: SettingsMetadata?
    /** Sets the Digital Signature certificate requirements for sending envelopes. Valid values are:  - `none`: A Digital Signature certificate is not required. - `docusign_express`: Signers must use a DocuSign Express certificate. - `docusign_personal`: Signers must use a DocuSign personal certificate. - `safe` - `open_trust`: Signers must use an OpenTrust certificate.  */
    public var requireSignerCertificateType: String?
    public var requireSignerCertificateTypeMetadata: SettingsMetadata?
    /** The RSA account name.  **Note**: Only Admin users can change this setting. Modifying this value may disrupt your ID Check capability. Ensure you have the correct value before changing it.  */
    public var rsaVeridAccountName: String?
    /** The password for the RSA account.   **Note**: Only Admin users can change this setting. Modifying this value may disrupt your ID Check capability. Ensure you have the correct value before changing it.  */
    public var rsaVeridPassword: String?
    /** The RSA rule set used with the account.  **Note**: Only Admin users can change this setting. Modifying this value may disrupt your ID Check capability. Ensure you have the correct value before changing it.  */
    public var rsaVeridRuleset: String?
    /** The user ID for the RSA account.  **Note**: Only Admin users can change this setting. Modifying this value may disrupt your ID Check capability. Ensure you have the correct value before changing it.  */
    public var rsaVeridUserId: String?
    /** Sets how self-signed documents are presented to the email recipients. Valid values are:  - `include_pdf`: A PDF of the completed document is attached to the email. - `include_link`: A secure link to the self-signed documents is included    in the email.  **Note**: Only Admin users can change this setting.  */
    public var selfSignedRecipientEmailDocument: String?
    public var selfSignedRecipientEmailDocumentMetadata: SettingsMetadata?
    /** When set to **true**, the `selfSignedRecipientEmailDocument` user setting can be set for an individual user. The user setting overrides the account setting.  **Note**: Only Admin users can change this account setting.  */
    public var selfSignedRecipientEmailDocumentUserOverride: String?
    public var selfSignedRecipientEmailDocumentUserOverrideMetadata: SettingsMetadata?
    /** When set to **true**, a signer can draw their signature in each location where a sign or initial tab exists. This functionality is typically used for mobile signing.  **Note**: Only Admin users can change this setting.  */
    public var senderCanSignInEachLocation: String?
    public var senderCanSignInEachLocationMetadata: SettingsMetadata?
    /** When set to **true**, a sender who is also a recipient of an envelope must follow the authentication requirements for the envelope.  **Note**: Only Admin users can change this setting.  */
    public var senderMustAuthenticateSigning: String?
    public var senderMustAuthenticateSigningMetadata: SettingsMetadata?
    /** The account-wide default font color to use for the content of the tab.  Valid values are:  - `Black` - `BrightBlue` - `BrightRed` - `DarkGreen` - `DarkRed` - `Gold` - `Green` - `NavyBlue` - `Purple` - `White`  */
    public var sendingTagsFontColor: String?
    public var sendingTagsFontColorMetadata: SettingsMetadata?
    /** The account-wide default font to be used for the tab value. Supported fonts include:  - `Default` - `Arial` - `ArialNarrow` - `Calibri` - `CourierNew` - `Garamond` - `Georgia` - `Helvetica` - `LucidaConsole` - `MSGothic` - `MSMincho` - `OCR-A` - `Tahoma` - `TimesNewRoman` - `Trebuchet` - `Verdana` */
    public var sendingTagsFontName: String?
    public var sendingTagsFontNameMetadata: SettingsMetadata?
    /** The account-wide default font size used for the information in the tab:  - `Size7` - `Size8` - `Size9` - `Size10` - `Size11` - `Size12` - `Size14` - `Size16` - `Size18` - `Size20` - `Size22` - `Size24` - `Size26` - `Size28` - `Size36` - `Size48` - `Size72` */
    public var sendingTagsFontSize: String?
    public var sendingTagsFontSizeMetadata: SettingsMetadata?
    /** When true, the account can use the certified deliveries recipient type.  */
    public var sendToCertifiedDeliveryEnabled: String?
    public var sendToCertifiedDeliveryEnabledMetadata: SettingsMetadata?
    /** The amount of idle activity time, in minutes, before a user is automatically logged out of the system. The minimum setting is 20 minutes and the maximum setting is 120 minutes.  */
    public var sessionTimeout: String?
    public var sessionTimeoutMetadata: SettingsMetadata?
    /** When set to **true**, senders can set the email language to use for each recipient.  **Note**: Only Admin users can change this setting.  */
    public var setRecipEmailLang: String?
    public var setRecipEmailLangMetadata: SettingsMetadata?
    /** If **true**, setting a unique language for a recipient not only affects the email language, but also the signing language they are presented with. If **false**, only the email will be affected when the sender specifies a unique language for a recipient.  **Note**: Only Admin users can change this setting.  */
    public var setRecipSignLang: String?
    public var setRecipSignLangMetadata: SettingsMetadata?
    /** Boolean that specifies whether an account can use Shared Template Folders. */
    public var sharedTemplateFolders: String?
    public var sharedTemplateFoldersMetadata: SettingsMetadata?
    /** Boolean that specifies whether complete dialogs are displayed directly within an application in embedded signing sessions. */
    public var showCompleteDialogInEmbeddedSession: String?
    public var showCompleteDialogInEmbeddedSessionMetadata: SettingsMetadata?
    /** When set to **true**, Conditional Routing options display to senders during the sending experience. */
    public var showConditionalRoutingOnSend: String?
    public var showConditionalRoutingOnSendMetadata: SettingsMetadata?
    /** Boolean that specifies whether conditional field options are initially displayed (before a user makes entries). */
    public var showInitialConditionalFields: String?
    public var showInitialConditionalFieldsMetadata: SettingsMetadata?
    /** Boolean that specifies whether localized watermarks are displayed. */
    public var showLocalizedWatermarks: String?
    public var showLocalizedWatermarksMetadata: SettingsMetadata?
    /** If **true**, show tutorials.  */
    public var showTutorials: String?
    public var showTutorialsMetadata: SettingsMetadata?
    /** Names of electronic or digital signature providers that can be used. */
    public var signatureProviders: [String]?
    public var signatureProvidersMetadata: SettingsMetadata?
    /** The format for the signature date. Valid values are:  - `d/M/yyyy` - `dd-MM-yy` - `dd-MMM-yy` - `dd-MM-yyyy` - `dd.MM.yyyy` - `dd-MMM-yyyy` - `dd MMMM yyyy` - `M/d/yyyy` - `MM-dd-yyyy` - `MM/dd/yyyy` - `MM/dd/yy` - `MMM-dd-yyyy` - `MMM d, yyyy` - `MMMM d, yyyy` - `yyyy-MM-dd` - `yyyy-MMM-dd` - `yyyy/MM/dd` - `yyyy MMMM d`  **Note**: Only Admin users can change this setting.  */
    public var signDateFormat: String?
    public var signDateFormatMetadata: SettingsMetadata?
    /** When set to **true**, the Certificate of Completion is included in the PDF of the envelope documents when it is downloaded.  **Note**: Only Admin users can change this setting.  */
    public var signerAttachCertificateToEnvelopePDF: String?
    public var signerAttachCertificateToEnvelopePDFMetadata: SettingsMetadata?
    /** When set to **true**, signer attachments are added to the parent document that contains the attachment. The default behavior creates a new document in the envelope for every signer attachment.  **Note**: Only Admin users can change this setting.  */
    public var signerAttachConcat: String?
    public var signerAttachConcatMetadata: SettingsMetadata?
    /** When set to **true**, a signer can create a DocuSign account after signing.  **Note**: Only Admin users can change this setting.  */
    public var signerCanCreateAccount: String?
    public var signerCanCreateAccountMetadata: SettingsMetadata?
    /** When set to **true**, recipients can sign on a mobile device.  **Note**: Only Admin users can change this setting.  */
    public var signerCanSignOnMobile: String?
    public var signerCanSignOnMobileMetadata: SettingsMetadata?
    /** When set to **true**, an \"envelope complete\" email is sent to an in-session (embedded) or offline signer after DocuSign processes the envelope if in-session emails are not suppressed.  **Note**: Only Admin users can change this setting.  */
    public var signerInSessionUseEnvelopeCompleteEmail: String?
    public var signerInSessionUseEnvelopeCompleteEmailMetadata: SettingsMetadata?
    /** Sets the login requirements for signers. Valid values are:  - `login_not_required`: Signers are not required to log in. - `login_required_if_account_holder`: If the signer has a DocuSign account,   they must log in to sign the document. - `login_required_per_session`: The sender cannot send an envelope to anyone   who does not have a DocuSign account. - `login_required_per_envelope`: The sender cannot send an envelope to anyone   who does not have a DocuSign account, and the signer must also log in for   each envelope they will sign.   **Note**: Only Admin users can change this setting. If you use Direct PowerForms or captive (embedded signers), the \"Account required\" settings are bypassed for those signers. If your workflow requires that the signer have an account, you should not use those methods.  */
    public var signerLoginRequirements: String?
    public var signerLoginRequirementsMetadata: SettingsMetadata?
    /** When set to **true**, senders can only send an envelope to a recipient that has a DocuSign account.  **Note**: Only Account Administrators can change this setting.  */
    public var signerMustHaveAccount: String?
    public var signerMustHaveAccountMetadata: SettingsMetadata?
    /** When set to **true**, signers must log in to the DocuSign platform to sign an envelope.  **Note**: Only Admin users can change this setting.  */
    public var signerMustLoginToSign: String?
    public var signerMustLoginToSignMetadata: SettingsMetadata?
    /** When set to **true**, the initial values of all SecureFields are written to the document when it is sent.  **Note**: Only Admin users can change this setting.  */
    public var signerShowSecureFieldInitialValues: String?
    public var signerShowSecureFieldInitialValuesMetadata: SettingsMetadata?
    /** The number of minutes that a signing session stays alive without any activity.  */
    public var signingSessionTimeout: String?
    public var signingSessionTimeoutMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var signingUiVersion: String?
    public var signingUiVersionMetadata: SettingsMetadata?
    /** The format for the signature time. Valid values are:  - `none` - `HH:mm` - `h:mm` - `HH:mm:ss` - `h:mm:ss`  */
    public var signTimeFormat: String?
    public var signTimeFormatMetadata: SettingsMetadata?
    /** If **true**, the time shows the AM or PM indicator.  */
    public var signTimeShowAmPm: String?
    public var signTimeShowAmPmMetadata: SettingsMetadata?
    /** When set to **true**, simplified sending is enabled for the account. The default value is **false**. */
    public var simplifiedSendingEnabled: String?
    public var simplifiedSendingEnabledMetadata: SettingsMetadata?
    /** If **true**, single sign-on (SSO) is enabled.  */
    public var singleSignOnEnabled: String?
    public var singleSignOnEnabledMetadata: SettingsMetadata?
    /** If **true**, do not require authentication prompt for viewing completed envelopes  */
    public var skipAuthCompletedEnvelopes: String?
    public var skipAuthCompletedEnvelopesMetadata: SettingsMetadata?
    /** If **true**, recipients can use [social ids](https://support.docusign.com/guides/signer-authentication) when signing  */
    public var socialIdRecipAuth: String?
    public var socialIdRecipAuthMetadata: SettingsMetadata?
    /** When **true**, senders can specify the visibility of the documents in an envelope at the recipient level.  */
    public var specifyDocumentVisibility: String?
    public var specifyDocumentVisibilityMetadata: SettingsMetadata?
    /** If **true**, when initiating correction of an in-flight envelope the sender starts in advanced correct mode.  */
    public var startInAdvancedCorrect: String?
    public var startInAdvancedCorrectMetadata: SettingsMetadata?
    /** When set to **true**, account users must accept supplemental documents when signing. */
    public var supplementalDocumentsMustAccept: String?
    public var supplementalDocumentsMustAcceptMetadata: SettingsMetadata?
    /** When set to **true**, account users must both view and accept supplemental documents when signing. */
    public var supplementalDocumentsMustRead: String?
    public var supplementalDocumentsMustReadMetadata: SettingsMetadata?
    /** When set to **true**, account users must view supplemental documents when signing. */
    public var supplementalDocumentsMustView: String?
    public var supplementalDocumentsMustViewMetadata: SettingsMetadata?
    /** Boolean that specifies whether or not API calls require a x509 cert in the header of the call. */
    public var suppressCertificateEnforcement: String?
    public var suppressCertificateEnforcementMetadata: SettingsMetadata?
    public var tabAccountSettings: TabAccountSettings?
    /** Specifies the time zone to use with the API.  Valid values are:  - `TZ_01_AfghanistanStandardTime` - `TZ_02_AlaskanStandardTime` - `TZ_03_ArabStandardTime` - `TZ_04_ArabianStandardTime` - `TZ_05_ArabicStandardTime` - `TZ_06_ArgentinaStandardTime` - `TZ_07_AtlanticStandardTime` - `TZ_08_AUS_CentralStandardTime` - `TZ_09_AUS_EasternStandardTime` - `TZ_10_AzerbaijanStandardTime` - `TZ_11_AzoresStandardTime` - `TZ_12_BangladeshStandardTime` - `TZ_13_CanadaCentralStandardTime` - `TZ_14_CapeVerdeStandardTime` - `TZ_15_CaucasusStandardTime` - `TZ_16_CentralAustraliaStandardTime` - `TZ_17_CentralAmericaStandardTime` - `TZ_18_CentralAsiaStandardTime` - `TZ_19_CentralBrazilianStandardTime` - `TZ_20_CentralEuropeStandardTime` - `TZ_21_CentralEuropeanStandardTime` - `TZ_22_CentralPacificStandardTime` - `TZ_23_CentralStandardTime` - `TZ_24_CentralStandardTimeMexico` - `TZ_25_ChinaStandardTime` - `TZ_26_DatelineStandardTime` - `TZ_27_E_AfricaStandardTime` - `TZ_28_E_AustraliaStandardTime` - `TZ_29_E_EuropeStandardTime` - `TZ_30_E_SouthAmericaStandardTime` - `TZ_31_EasternStandardTime` - `TZ_32_EgyptStandardTime` - `TZ_33_EkaterinburgStandardTime` - `TZ_34_FijiStandardTime` - `TZ_35_FLE_StandardTime` - `TZ_36_GeorgianStandardTime` - `TZ_37_GMT_StandardTime` - `TZ_38_GreenlandStandardTime` - `TZ_39_GreenwichStandardTime` - `TZ_40_GTB_StandardTime` - `TZ_41_HawaiianStandardTime` - `TZ_42_IndiaStandardTime` - `TZ_43_IranStandardTime` - `TZ_44_IsraelStandardTime` - `TZ_45_JordanStandardTime` - `TZ_46_KaliningradStandardTime` - `TZ_47_KamchatkaStandardTime` - `TZ_48_KoreaStandardTime` - `TZ_49_MagadanStandardTime` - `TZ_50_MauritiusStandardTime` - `TZ_51_MidAtlanticStandardTime` - `TZ_52_MiddleEastStandardTime` - `TZ_53_MontevideoStandardTime` - `TZ_54_MoroccoStandardTime` - `TZ_55_MountainStandardTime` - `TZ_56_MountainStandardTimeMMexico` - `TZ_57_MyanmarStandardTime` - `TZ_58_N_CentralAsiaStandardTime` - `TZ_59_NamibiaStandardTime` - `TZ_60_NepalStandardTime` - `TZ_61_NewZealandStandardTime` - `TZ_62_NewfoundlandStandardTime` - `TZ_63_NorthAsiaEastStandardTime` - `TZ_64_NorthAsiaStandardTime` - `TZ_65_PacificSAStandardTime` - `TZ_66_PacificStandardTime` - `TZ_67_PacificStandardTimeMexico` - `TZ_68_PakistanStandardTime` - `TZ_69_ParaguayStandardTime` - `TZ_70_RomanceStandardTime` - `TZ_71_RussianStandardTime` - `TZ_72_SAEasternStandardTime` - `TZ_73_SAPacificStandardTime` - `TZ_74_SAWesternStandardTime` - `TZ_75_SamoaStandardTime` - `TZ_76_SE_AsiaStandardTime` - `TZ_77_SingaporeStandardTime` - `TZ_78_SouthAfricaStandardTime` - `TZ_79_SriLankaStandardTime` - `TZ_80_SyriaStandardTime` - `TZ_81_TaipeiStandardTime` - `TZ_82_TasmaniaStandardTime` - `TZ_83_TokyoStandardTime` - `TZ_84_TongaStandardTime` - `TZ_85_TurkeyStandardTime` - `TZ_86_UlaanbaatarStandardTime` - `TZ_87_US_EasternStandardTime` - `TZ_88_USMountainStandardTime` - `TZ_89_VenezuelaStandardTime` - `TZ_90_VladivostokStandardTime` - `TZ_91_W_AustraliaStandardTime` - `TZ_92_W_CentralAfricaStandardTime` - `TZ_93_W_EuropeStandardTime` - `TZ_94_WestAsiaStandardTime` - `TZ_95_WestPacificStandardTime` - `TZ_96_YakutskStandardTime`  */
    public var timezoneOffsetAPI: String?
    public var timezoneOffsetAPIMetadata: SettingsMetadata?
    /** Specifies the time zone to use in the UI.  Valid values are:  - `TZ_01_AfghanistanStandardTime` - `TZ_02_AlaskanStandardTime` - `TZ_03_ArabStandardTime` - `TZ_04_ArabianStandardTime` - `TZ_05_ArabicStandardTime` - `TZ_06_ArgentinaStandardTime` - `TZ_07_AtlanticStandardTime` - `TZ_08_AUS_CentralStandardTime` - `TZ_09_AUS_EasternStandardTime` - `TZ_10_AzerbaijanStandardTime` - `TZ_11_AzoresStandardTime` - `TZ_12_BangladeshStandardTime` - `TZ_13_CanadaCentralStandardTime` - `TZ_14_CapeVerdeStandardTime` - `TZ_15_CaucasusStandardTime` - `TZ_16_CentralAustraliaStandardTime` - `TZ_17_CentralAmericaStandardTime` - `TZ_18_CentralAsiaStandardTime` - `TZ_19_CentralBrazilianStandardTime` - `TZ_20_CentralEuropeStandardTime` - `TZ_21_CentralEuropeanStandardTime` - `TZ_22_CentralPacificStandardTime` - `TZ_23_CentralStandardTime` - `TZ_24_CentralStandardTimeMexico` - `TZ_25_ChinaStandardTime` - `TZ_26_DatelineStandardTime` - `TZ_27_E_AfricaStandardTime` - `TZ_28_E_AustraliaStandardTime` - `TZ_29_E_EuropeStandardTime` - `TZ_30_E_SouthAmericaStandardTime` - `TZ_31_EasternStandardTime` - `TZ_32_EgyptStandardTime` - `TZ_33_EkaterinburgStandardTime` - `TZ_34_FijiStandardTime` - `TZ_35_FLE_StandardTime` - `TZ_36_GeorgianStandardTime` - `TZ_37_GMT_StandardTime` - `TZ_38_GreenlandStandardTime` - `TZ_39_GreenwichStandardTime` - `TZ_40_GTB_StandardTime` - `TZ_41_HawaiianStandardTime` - `TZ_42_IndiaStandardTime` - `TZ_43_IranStandardTime` - `TZ_44_IsraelStandardTime` - `TZ_45_JordanStandardTime` - `TZ_46_KaliningradStandardTime` - `TZ_47_KamchatkaStandardTime` - `TZ_48_KoreaStandardTime` - `TZ_49_MagadanStandardTime` - `TZ_50_MauritiusStandardTime` - `TZ_51_MidAtlanticStandardTime` - `TZ_52_MiddleEastStandardTime` - `TZ_53_MontevideoStandardTime` - `TZ_54_MoroccoStandardTime` - `TZ_55_MountainStandardTime` - `TZ_56_MountainStandardTimeMMexico` - `TZ_57_MyanmarStandardTime` - `TZ_58_N_CentralAsiaStandardTime` - `TZ_59_NamibiaStandardTime` - `TZ_60_NepalStandardTime` - `TZ_61_NewZealandStandardTime` - `TZ_62_NewfoundlandStandardTime` - `TZ_63_NorthAsiaEastStandardTime` - `TZ_64_NorthAsiaStandardTime` - `TZ_65_PacificSAStandardTime` - `TZ_66_PacificStandardTime` - `TZ_67_PacificStandardTimeMexico` - `TZ_68_PakistanStandardTime` - `TZ_69_ParaguayStandardTime` - `TZ_70_RomanceStandardTime` - `TZ_71_RussianStandardTime` - `TZ_72_SAEasternStandardTime` - `TZ_73_SAPacificStandardTime` - `TZ_74_SAWesternStandardTime` - `TZ_75_SamoaStandardTime` - `TZ_76_SE_AsiaStandardTime` - `TZ_77_SingaporeStandardTime` - `TZ_78_SouthAfricaStandardTime` - `TZ_79_SriLankaStandardTime` - `TZ_80_SyriaStandardTime` - `TZ_81_TaipeiStandardTime` - `TZ_82_TasmaniaStandardTime` - `TZ_83_TokyoStandardTime` - `TZ_84_TongaStandardTime` - `TZ_85_TurkeyStandardTime` - `TZ_86_UlaanbaatarStandardTime` - `TZ_87_US_EasternStandardTime` - `TZ_88_USMountainStandardTime` - `TZ_89_VenezuelaStandardTime` - `TZ_90_VladivostokStandardTime` - `TZ_91_W_AustraliaStandardTime` - `TZ_92_W_CentralAfricaStandardTime` - `TZ_93_W_EuropeStandardTime` - `TZ_94_WestAsiaStandardTime` - `TZ_95_WestPacificStandardTime` - `TZ_96_YakutskStandardTime`  */
    public var timezoneOffsetUI: String?
    public var timezoneOffsetUIMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var universalSignatureOptIn: String?
    /** Reserved for DocuSign.  */
    public var useAccountLevelEmail: String?
    public var useAccountLevelEmailMetadata: SettingsMetadata?
    /** When set to **true**, the account uses an Electronic Record and Signature Disclosure Statement.  **Note**: Only Admin users can change this setting.  */
    public var useConsumerDisclosure: String?
    public var useConsumerDisclosureMetadata: SettingsMetadata?
    /** When set to **true**, specifies that recipients in the same account as the sender must agree to eSign an Electronic Record and Signature Disclosure Statement. */
    public var useConsumerDisclosureWithinAccount: String?
    public var useConsumerDisclosureWithinAccountMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var useDerivedKeys: String?
    public var useDerivedKeysMetadata: SettingsMetadata?
    /** If **true**, signers are required to use Express Digital Signatures.  */
    public var useDocuSignExpressSignerCertificate: String?
    public var useDocuSignExpressSignerCertificateMetadata: SettingsMetadata?
    /**  */
    public var useMultiAppGroupsData: String?
    public var useMultiAppGroupsDataMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var useNewBlobForPdf: String?
    public var useNewBlobForPdfMetadata: SettingsMetadata?
    /** If **true**, signers are required to use SAFE digital signatures.  */
    public var useSAFESignerCertificates: String?
    public var useSAFESignerCertificatesMetadata: SettingsMetadata?
    /** When set to **true**, the account can use the API.  **Note**: Only SysAdmin users can change this setting.  */
    public var usesAPI: String?
    public var usesAPIMetadata: SettingsMetadata?
    /** Boolean that specifies whether the account uses the digital signature provider platform to eSign. */
    public var useSignatureProviderPlatform: String?
    public var useSignatureProviderPlatformMetadata: SettingsMetadata?
    /** Boolean that specifies whether validations on recipient email domains are allowed. */
    public var validationsAllowed: String?
    public var validationsAllowedMetadata: SettingsMetadata?
    /** Valid values are:  - `docusign` - `account`  */
    public var validationsBrand: String?
    public var validationsBrandMetadata: SettingsMetadata?
    /** Valid values are:  - `none` - `monthly`  */
    public var validationsCadence: String?
    public var validationsCadenceMetadata: SettingsMetadata?
    /** If **true**, enables validations.  */
    public var validationsEnabled: String?
    public var validationsEnabledMetadata: SettingsMetadata?
    /** Valid values are:  - `none` - `life_sciences_part11`  */
    public var validationsReport: String?
    public var validationsReportMetadata: SettingsMetadata?
    /** If **true**, the [watermark feature](https://support.docusign.com/en/articles/How-do-I-manage-the-watermark-for-In-Process-envelopes-sent-from-my-account) is enabled for the account.  */
    public var waterMarkEnabled: String?
    public var waterMarkEnabledMetadata: SettingsMetadata?
    /** If **true**, sent reminders are included in the envelope history. */
    public var writeReminderToEnvelopeHistory: String?
    public var writeReminderToEnvelopeHistoryMetadata: SettingsMetadata?
    /** The smallest screen allowed. */
    public var wurflMinAllowableScreenSize: String?
    public var wurflMinAllowableScreenSizeMetadata: SettingsMetadata?

    public init(accessCodeFormat: AccessCodeFormat? = nil, accountDateTimeFormat: String? = nil, accountDateTimeFormatMetadata: SettingsMetadata? = nil, accountDefaultLanguage: String? = nil, accountDefaultLanguageMetadata: SettingsMetadata? = nil, accountName: String? = nil, accountNameMetadata: SettingsMetadata? = nil, accountNotification: AccountNotification? = nil, accountUISettings: AccountUISettings? = nil, adoptSigConfig: String? = nil, adoptSigConfigMetadata: SettingsMetadata? = nil, advancedCorrect: String? = nil, advancedCorrectMetadata: SettingsMetadata? = nil, allowAccessCodeFormat: String? = nil, allowAccessCodeFormatMetadata: SettingsMetadata? = nil, allowAccountManagementGranular: String? = nil, allowAccountManagementGranularMetadata: SettingsMetadata? = nil, allowAccountMemberNameChange: String? = nil, allowAccountMemberNameChangeMetadata: SettingsMetadata? = nil, allowAdvancedRecipientRoutingConditional: String? = nil, allowAdvancedRecipientRoutingConditionalMetadata: SettingsMetadata? = nil, allowAgentNameEmailEdit: String? = nil, allowAgentNameEmailEditMetadata: SettingsMetadata? = nil, allowAgreementActions: String? = nil, allowAgreementActionsMetadata: SettingsMetadata? = nil, allowAutoNavSettings: String? = nil, allowAutoNavSettingsMetadata: SettingsMetadata? = nil, allowAutoTagging: String? = nil, allowAutoTaggingMetadata: SettingsMetadata? = nil, allowBulkSend: String? = nil, allowBulkSendMetadata: SettingsMetadata? = nil, allowCDWithdraw: String? = nil, allowCDWithdrawMetadata: SettingsMetadata? = nil, allowConnectHttpListenerConfigs: String? = nil, allowConnectSendFinishLater: String? = nil, allowConnectSendFinishLaterMetadata: SettingsMetadata? = nil, allowConnectUnifiedPayloadUI: String? = nil, allowConsumerDisclosureOverride: String? = nil, allowConsumerDisclosureOverrideMetadata: SettingsMetadata? = nil, allowDataDownload: String? = nil, allowDataDownloadMetadata: SettingsMetadata? = nil, allowDocumentDisclosures: String? = nil, allowDocumentDisclosuresMetadata: SettingsMetadata? = nil, allowDocumentsOnSignedEnvelopes: String? = nil, allowDocumentsOnSignedEnvelopesMetadata: SettingsMetadata? = nil, allowDocumentVisibility: String? = nil, allowDocumentVisibilityMetadata: SettingsMetadata? = nil, allowEHankoStamps: String? = nil, allowEHankoStampsMetadata: SettingsMetadata? = nil, allowENoteEOriginal: String? = nil, allowENoteEOriginalMetadata: SettingsMetadata? = nil, allowEnvelopeCorrect: String? = nil, allowEnvelopeCorrectMetadata: SettingsMetadata? = nil, allowEnvelopeCustodyTransfer: String? = nil, allowEnvelopeCustodyTransferMetadata: SettingsMetadata? = nil, allowEnvelopeCustomFields: String? = nil, allowEnvelopeCustomFieldsMetadata: SettingsMetadata? = nil, allowEnvelopePublishReporting: String? = nil, allowEnvelopePublishReportingMetadata: SettingsMetadata? = nil, allowEnvelopeReporting: String? = nil, allowEnvelopeReportingMetadata: SettingsMetadata? = nil, allowExpression: String? = nil, allowExpressionMetadata: SettingsMetadata? = nil, allowExpressSignerCertificate: String? = nil, allowExpressSignerCertificateMetadata: SettingsMetadata? = nil, allowExtendedSendingResourceFile: String? = nil, allowExtendedSendingResourceFileMetadata: SettingsMetadata? = nil, allowExternalSignaturePad: String? = nil, allowExternalSignaturePadMetadata: SettingsMetadata? = nil, allowIDVLevel1: String? = nil, allowIDVLevel1Metadata: SettingsMetadata? = nil, allowIDVPlatform: String? = nil, allowIDVPlatformMetadata: SettingsMetadata? = nil, allowInPerson: String? = nil, allowInPersonMetadata: SettingsMetadata? = nil, allowManagedStamps: String? = nil, allowManagedStampsMetadata: SettingsMetadata? = nil, allowMarkup: String? = nil, allowMarkupMetadata: SettingsMetadata? = nil, allowMemberTimeZone: String? = nil, allowMemberTimeZoneMetadata: SettingsMetadata? = nil, allowMergeFields: String? = nil, allowMergeFieldsMetadata: SettingsMetadata? = nil, allowMultipleBrandProfiles: String? = nil, allowMultipleBrandProfilesMetadata: SettingsMetadata? = nil, allowMultipleSignerAttachments: String? = nil, allowMultipleSignerAttachmentsMetadata: SettingsMetadata? = nil, allowNonUSPhoneAuth: String? = nil, allowNonUSPhoneAuthMetadata: SettingsMetadata? = nil, allowOcrOfEnvelopeDocuments: String? = nil, allowOcrOfEnvelopeDocumentsMetadata: SettingsMetadata? = nil, allowOfflineSigning: String? = nil, allowOfflineSigningMetadata: SettingsMetadata? = nil, allowOpenTrustSignerCertificate: String? = nil, allowOpenTrustSignerCertificateMetadata: SettingsMetadata? = nil, allowOrganizations: String? = nil, allowOrganizationsMetadata: SettingsMetadata? = nil, allowPaymentProcessing: String? = nil, allowPaymentProcessingMetadata: SettingsMetadata? = nil, allowPersonalSignerCertificate: String? = nil, allowPersonalSignerCertificateMetadata: SettingsMetadata? = nil, allowPhoneAuthentication: String? = nil, allowPhoneAuthenticationMetadata: SettingsMetadata? = nil, allowPhoneAuthOverride: String? = nil, allowPhoneAuthOverrideMetadata: SettingsMetadata? = nil, allowPrivateSigningGroups: String? = nil, allowPrivateSigningGroupsMetadata: SettingsMetadata? = nil, allowReminders: String? = nil, allowRemindersMetadata: SettingsMetadata? = nil, allowRemoteNotary: String? = nil, allowRemoteNotaryMetadata: SettingsMetadata? = nil, allowResourceFileBranding: String? = nil, allowResourceFileBrandingMetadata: SettingsMetadata? = nil, allowSafeBioPharmaSignerCertificate: String? = nil, allowSafeBioPharmaSignerCertificateMetadata: SettingsMetadata? = nil, allowSecurityAppliance: String? = nil, allowSecurityApplianceMetadata: SettingsMetadata? = nil, allowSendToCertifiedDelivery: String? = nil, allowSendToCertifiedDeliveryMetadata: SettingsMetadata? = nil, allowSendToIntermediary: String? = nil, allowSendToIntermediaryMetadata: SettingsMetadata? = nil, allowServerTemplates: String? = nil, allowServerTemplatesMetadata: SettingsMetadata? = nil, allowSetEmbeddedRecipientStartURL: String? = nil, allowSetEmbeddedRecipientStartURLMetadata: SettingsMetadata? = nil, allowSharedTabs: String? = nil, allowSharedTabsMetadata: SettingsMetadata? = nil, allowSignatureStamps: String? = nil, allowSignatureStampsMetadata: SettingsMetadata? = nil, allowSignDocumentFromHomePage: String? = nil, allowSignDocumentFromHomePageMetadata: SettingsMetadata? = nil, allowSignerReassign: String? = nil, allowSignerReassignMetadata: SettingsMetadata? = nil, allowSignerReassignOverride: String? = nil, allowSignerReassignOverrideMetadata: SettingsMetadata? = nil, allowSigningExtensions: String? = nil, allowSigningExtensionsMetadata: SettingsMetadata? = nil, allowSigningGroups: String? = nil, allowSigningGroupsMetadata: SettingsMetadata? = nil, allowSigningRadioDeselect: String? = nil, allowSigningRadioDeselectMetadata: SettingsMetadata? = nil, allowSignNow: String? = nil, allowSignNowMetadata: String? = nil, allowSMSDelivery: String? = nil, allowSMSDeliveryMetadata: SettingsMetadata? = nil, allowSocialIdLogin: String? = nil, allowSocialIdLoginMetadata: SettingsMetadata? = nil, allowSupplementalDocuments: String? = nil, allowSupplementalDocumentsMetadata: SettingsMetadata? = nil, allowUsersToAccessDirectory: String? = nil, allowUsersToAccessDirectoryMetadata: SettingsMetadata? = nil, allowValueInsights: String? = nil, allowValueInsightsMetadata: SettingsMetadata? = nil, anchorPopulationScope: String? = nil, anchorPopulationScopeMetadata: SettingsMetadata? = nil, anchorTagVersionedPlacementEnabled: String? = nil, anchorTagVersionedPlacementMetadataEnabled: SettingsMetadata? = nil, attachCompletedEnvelope: String? = nil, attachCompletedEnvelopeMetadata: SettingsMetadata? = nil, authenticationCheck: String? = nil, authenticationCheckMetadata: SettingsMetadata? = nil, autoNavRule: String? = nil, autoNavRuleMetadata: SettingsMetadata? = nil, autoProvisionSignerAccount: String? = nil, autoProvisionSignerAccountMetadata: SettingsMetadata? = nil, bccEmailArchive: String? = nil, bccEmailArchiveMetadata: SettingsMetadata? = nil, betaSwitchConfiguration: String? = nil, betaSwitchConfigurationMetadata: SettingsMetadata? = nil, billingAddress: AddressInformation? = nil, billingAddressMetadata: SettingsMetadata? = nil, bulkSend: String? = nil, bulkSendMaxCopiesInBatch: String? = nil, bulkSendMaxUnprocessedEnvelopesCount: String? = nil, bulkSendMetadata: SettingsMetadata? = nil, canSelfBrandSend: String? = nil, canSelfBrandSendMetadata: SettingsMetadata? = nil, canSelfBrandSign: String? = nil, canSelfBrandSignMetadata: SettingsMetadata? = nil, canUseSalesforceOAuth: String? = nil, canUseSalesforceOAuthMetadata: SettingsMetadata? = nil, captureVoiceRecording: String? = nil, captureVoiceRecordingMetadata: SettingsMetadata? = nil, cfrUseWideImage: String? = nil, cfrUseWideImageMetadata: SettingsMetadata? = nil, checkForMultipleAdminsOnAccount: String? = nil, checkForMultipleAdminsOnAccountMetadata: SettingsMetadata? = nil, chromeSignatureEnabled: String? = nil, chromeSignatureEnabledMetadata: SettingsMetadata? = nil, commentEmailShowMessageText: String? = nil, commentEmailShowMessageTextMetadata: SettingsMetadata? = nil, commentsAllowEnvelopeOverride: String? = nil, commentsAllowEnvelopeOverrideMetadata: SettingsMetadata? = nil, conditionalFieldsEnabled: String? = nil, conditionalFieldsEnabledMetadata: SettingsMetadata? = nil, consumerDisclosureFrequency: String? = nil, consumerDisclosureFrequencyMetadata: SettingsMetadata? = nil, convertPdfFields: String? = nil, convertPdfFieldsMetadata: SettingsMetadata? = nil, dataPopulationScope: String? = nil, dataPopulationScopeMetadata: SettingsMetadata? = nil, disableMobileApp: String? = nil, disableMobileAppMetadata: SettingsMetadata? = nil, disableMobilePushNotifications: String? = nil, disableMobilePushNotificationsMetadata: SettingsMetadata? = nil, disableMobileSending: String? = nil, disableMobileSendingMetadata: SettingsMetadata? = nil, disableMultipleSessions: String? = nil, disableMultipleSessionsMetadata: SettingsMetadata? = nil, disablePurgeNotificationsForSenderMetadata: SettingsMetadata? = nil, disableSignerCertView: String? = nil, disableSignerCertViewMetadata: SettingsMetadata? = nil, disableSignerHistoryView: String? = nil, disableSignerHistoryViewMetadata: SettingsMetadata? = nil, disableStyleSignature: String? = nil, disableStyleSignatureMetadata: SettingsMetadata? = nil, disableUploadSignature: String? = nil, disableUploadSignatureMetadata: SettingsMetadata? = nil, disableUserSharing: String? = nil, disableUserSharingMetadata: SettingsMetadata? = nil, displayBetaSwitch: String? = nil, displayBetaSwitchMetadata: SettingsMetadata? = nil, documentConversionRestrictions: String? = nil, documentConversionRestrictionsMetadata: SettingsMetadata? = nil, documentRetention: String? = nil, documentRetentionMetadata: SettingsMetadata? = nil, documentRetentionPurgeTabs: String? = nil, documentVisibility: String? = nil, documentVisibilityMetadata: SettingsMetadata? = nil, emailTemplateVersion: String? = nil, emailTemplateVersionMetadata: SettingsMetadata? = nil, enableAccessCodeGenerator: String? = nil, enableAccessCodeGeneratorMetadata: SettingsMetadata? = nil, enableAdvancedPayments: String? = nil, enableAdvancedPaymentsMetadata: SettingsMetadata? = nil, enableAdvancedPowerForms: String? = nil, enableAdvancedPowerFormsMetadata: SettingsMetadata? = nil, enableAgreementActionsForCLM: String? = nil, enableAgreementActionsForCLMMetadata: SettingsMetadata? = nil, enableAgreementActionsForESign: String? = nil, enableAgreementActionsForESignMetadata: SettingsMetadata? = nil, enableAutoNav: String? = nil, enableAutoNavMetadata: SettingsMetadata? = nil, enableCalculatedFields: String? = nil, enableCalculatedFieldsMetadata: SettingsMetadata? = nil, enableClickwraps: String? = nil, enableClickwrapsMetadata: SettingsMetadata? = nil, enableCommentsHistoryDownloadInSigning: String? = nil, enableCommentsHistoryDownloadInSigningMetadata: SettingsMetadata? = nil, enableCustomerSatisfactionMetricTracking: String? = nil, enableCustomerSatisfactionMetricTrackingMetadata: SettingsMetadata? = nil, enableDSPro: String? = nil, enableDSProMetadata: SettingsMetadata? = nil, enableEnvelopeStampingByAccountAdmin: String? = nil, enableEnvelopeStampingByAccountAdminMetadata: SettingsMetadata? = nil, enableEnvelopeStampingByDSAdmin: String? = nil, enableEnvelopeStampingByDSAdminMetadata: SettingsMetadata? = nil, enableInBrowserEditor: String? = nil, enableInBrowserEditorMetadata: SettingsMetadata? = nil, enablePaymentProcessing: String? = nil, enablePaymentProcessingMetadata: SettingsMetadata? = nil, enablePowerForm: String? = nil, enablePowerFormDirect: String? = nil, enablePowerFormDirectMetadata: SettingsMetadata? = nil, enablePowerFormMetadata: SettingsMetadata? = nil, enableRecipientDomainValidation: String? = nil, enableRecipientDomainValidationMetadata: SettingsMetadata? = nil, enableReportLinks: String? = nil, enableReportLinksMetadata: SettingsMetadata? = nil, enableRequireSignOnPaper: String? = nil, enableRequireSignOnPaperMetadata: SettingsMetadata? = nil, enableReservedDomain: String? = nil, enableReservedDomainMetadata: SettingsMetadata? = nil, enableResponsiveSigning: String? = nil, enableResponsiveSigningMetadata: SettingsMetadata? = nil, enableScheduledRelease: String? = nil, enableScheduledReleaseMetadata: SettingsMetadata? = nil, enableSearchUI: String? = nil, enableSearchUIMetadata: SettingsMetadata? = nil, enableSendingTagsFontSettings: String? = nil, enableSendingTagsFontSettingsMetadata: SettingsMetadata? = nil, enableSendToAgent: String? = nil, enableSendToAgentMetadata: SettingsMetadata? = nil, enableSendToIntermediary: String? = nil, enableSendToIntermediaryMetadata: SettingsMetadata? = nil, enableSendToManage: String? = nil, enableSendToManageMetadata: SettingsMetadata? = nil, enableSequentialSigningAPI: String? = nil, enableSequentialSigningAPIMetadata: SettingsMetadata? = nil, enableSequentialSigningUI: String? = nil, enableSequentialSigningUIMetadata: SettingsMetadata? = nil, enableSignerAttachments: String? = nil, enableSignerAttachmentsMetadata: SettingsMetadata? = nil, enableSigningExtensionComments: String? = nil, enableSigningExtensionCommentsMetadata: SettingsMetadata? = nil, enableSigningExtensionConversations: String? = nil, enableSigningExtensionConversationsMetadata: SettingsMetadata? = nil, enableSigningOrderSettingsForAccount: String? = nil, enableSigningOrderSettingsForAccountMetadata: SettingsMetadata? = nil, enableSignOnPaper: String? = nil, enableSignOnPaperMetadata: SettingsMetadata? = nil, enableSignOnPaperOverride: String? = nil, enableSignOnPaperOverrideMetadata: SettingsMetadata? = nil, enableSignWithNotary: String? = nil, enableSignWithNotaryMetadata: SettingsMetadata? = nil, enableSmartContracts: String? = nil, enableSmartContractsMetadata: SettingsMetadata? = nil, enableSMSAuthentication: String? = nil, enableSMSAuthenticationMetadata: SettingsMetadata? = nil, enableSocialIdLogin: String? = nil, enableSocialIdLoginMetadata: SettingsMetadata? = nil, enableStrikeThrough: String? = nil, enableStrikeThroughMetadata: SettingsMetadata? = nil, enableTransactionPoint: String? = nil, enableTransactionPointMetadata: SettingsMetadata? = nil, enableVaulting: String? = nil, enableVaultingMetadata: SettingsMetadata? = nil, enableWitnessing: String? = nil, enableWitnessingMetadata: SettingsMetadata? = nil, enforceTemplateNameUniqueness: String? = nil, enforceTemplateNameUniquenessMetadata: SettingsMetadata? = nil, envelopeIntegrationAllowed: String? = nil, envelopeIntegrationAllowedMetadata: SettingsMetadata? = nil, envelopeIntegrationEnabled: String? = nil, envelopeIntegrationEnabledMetadata: SettingsMetadata? = nil, envelopeStampingDefaultValue: String? = nil, envelopeStampingDefaultValueMetadata: SettingsMetadata? = nil, expressSend: String? = nil, expressSendAllowTabs: String? = nil, expressSendAllowTabsMetadata: SettingsMetadata? = nil, expressSendMetadata: SettingsMetadata? = nil, externalDocumentSources: ExternalDocumentSources? = nil, externalSignaturePadType: String? = nil, externalSignaturePadTypeMetadata: SettingsMetadata? = nil, faxOutEnabled: String? = nil, faxOutEnabledMetadata: SettingsMetadata? = nil, guidedFormsHtmlAllowed: String? = nil, guidedFormsHtmlAllowedMetadata: SettingsMetadata? = nil, hideAccountAddressInCoC: String? = nil, hideAccountAddressInCoCMetadata: SettingsMetadata? = nil, hidePricing: String? = nil, hidePricingMetadata: SettingsMetadata? = nil, idCheckConfigurations: [IdCheckConfiguration]? = nil, idCheckExpire: String? = nil, idCheckExpireDays: String? = nil, idCheckExpireDaysMetadata: SettingsMetadata? = nil, idCheckExpireMetadata: SettingsMetadata? = nil, idCheckExpireMinutes: String? = nil, idCheckExpireMinutesMetadata: SettingsMetadata? = nil, idCheckRequired: String? = nil, idCheckRequiredMetadata: SettingsMetadata? = nil, identityVerification: [AccountIdentityVerificationWorkflow]? = nil, identityVerificationMetadata: SettingsMetadata? = nil, ignoreErrorIfAnchorTabNotFound: String? = nil, ignoreErrorIfAnchorTabNotFoundMetadataEnabled: SettingsMetadata? = nil, inPersonIDCheckQuestion: String? = nil, inPersonIDCheckQuestionMetadata: SettingsMetadata? = nil, inPersonSigningEnabled: String? = nil, inPersonSigningEnabledMetadata: SettingsMetadata? = nil, inSessionEnabled: String? = nil, inSessionEnabledMetadata: SettingsMetadata? = nil, inSessionSuppressEmails: String? = nil, inSessionSuppressEmailsMetadata: SettingsMetadata? = nil, maximumSigningGroups: String? = nil, maximumSigningGroupsMetadata: SettingsMetadata? = nil, maximumUsersPerSigningGroup: String? = nil, maximumUsersPerSigningGroupMetadata: SettingsMetadata? = nil, maxNumberOfCustomStamps: String? = nil, mobileSessionTimeout: String? = nil, mobileSessionTimeoutMetadata: SettingsMetadata? = nil, numberOfActiveCustomStamps: String? = nil, optInMobileSigningV02: String? = nil, optInMobileSigningV02Metadata: SettingsMetadata? = nil, optOutAutoNavTextAndTabColorUpdates: String? = nil, optOutAutoNavTextAndTabColorUpdatesMetadata: SettingsMetadata? = nil, optOutNewPlatformSeal: String? = nil, optOutNewPlatformSealPlatformMetadata: SettingsMetadata? = nil, phoneAuthRecipientMayProvidePhoneNumber: String? = nil, phoneAuthRecipientMayProvidePhoneNumberMetadata: SettingsMetadata? = nil, pkiSignDownloadedPDFDocs: String? = nil, pkiSignDownloadedPDFDocsMetadata: SettingsMetadata? = nil, recipientsCanSignOffline: String? = nil, recipientsCanSignOfflineMetadata: SettingsMetadata? = nil, recipientSigningAutoNavigationControl: String? = nil, recipientSigningAutoNavigationControlMetadata: SettingsMetadata? = nil, require21CFRpt11Compliance: String? = nil, require21CFRpt11ComplianceMetadata: SettingsMetadata? = nil, requireDeclineReason: String? = nil, requireDeclineReasonMetadata: SettingsMetadata? = nil, requireExternalUserManagement: String? = nil, requireExternalUserManagementMetadata: SettingsMetadata? = nil, requireSignerCertificateType: String? = nil, requireSignerCertificateTypeMetadata: SettingsMetadata? = nil, rsaVeridAccountName: String? = nil, rsaVeridPassword: String? = nil, rsaVeridRuleset: String? = nil, rsaVeridUserId: String? = nil, selfSignedRecipientEmailDocument: String? = nil, selfSignedRecipientEmailDocumentMetadata: SettingsMetadata? = nil, selfSignedRecipientEmailDocumentUserOverride: String? = nil, selfSignedRecipientEmailDocumentUserOverrideMetadata: SettingsMetadata? = nil, senderCanSignInEachLocation: String? = nil, senderCanSignInEachLocationMetadata: SettingsMetadata? = nil, senderMustAuthenticateSigning: String? = nil, senderMustAuthenticateSigningMetadata: SettingsMetadata? = nil, sendingTagsFontColor: String? = nil, sendingTagsFontColorMetadata: SettingsMetadata? = nil, sendingTagsFontName: String? = nil, sendingTagsFontNameMetadata: SettingsMetadata? = nil, sendingTagsFontSize: String? = nil, sendingTagsFontSizeMetadata: SettingsMetadata? = nil, sendToCertifiedDeliveryEnabled: String? = nil, sendToCertifiedDeliveryEnabledMetadata: SettingsMetadata? = nil, sessionTimeout: String? = nil, sessionTimeoutMetadata: SettingsMetadata? = nil, setRecipEmailLang: String? = nil, setRecipEmailLangMetadata: SettingsMetadata? = nil, setRecipSignLang: String? = nil, setRecipSignLangMetadata: SettingsMetadata? = nil, sharedTemplateFolders: String? = nil, sharedTemplateFoldersMetadata: SettingsMetadata? = nil, showCompleteDialogInEmbeddedSession: String? = nil, showCompleteDialogInEmbeddedSessionMetadata: SettingsMetadata? = nil, showConditionalRoutingOnSend: String? = nil, showConditionalRoutingOnSendMetadata: SettingsMetadata? = nil, showInitialConditionalFields: String? = nil, showInitialConditionalFieldsMetadata: SettingsMetadata? = nil, showLocalizedWatermarks: String? = nil, showLocalizedWatermarksMetadata: SettingsMetadata? = nil, showTutorials: String? = nil, showTutorialsMetadata: SettingsMetadata? = nil, signatureProviders: [String]? = nil, signatureProvidersMetadata: SettingsMetadata? = nil, signDateFormat: String? = nil, signDateFormatMetadata: SettingsMetadata? = nil, signerAttachCertificateToEnvelopePDF: String? = nil, signerAttachCertificateToEnvelopePDFMetadata: SettingsMetadata? = nil, signerAttachConcat: String? = nil, signerAttachConcatMetadata: SettingsMetadata? = nil, signerCanCreateAccount: String? = nil, signerCanCreateAccountMetadata: SettingsMetadata? = nil, signerCanSignOnMobile: String? = nil, signerCanSignOnMobileMetadata: SettingsMetadata? = nil, signerInSessionUseEnvelopeCompleteEmail: String? = nil, signerInSessionUseEnvelopeCompleteEmailMetadata: SettingsMetadata? = nil, signerLoginRequirements: String? = nil, signerLoginRequirementsMetadata: SettingsMetadata? = nil, signerMustHaveAccount: String? = nil, signerMustHaveAccountMetadata: SettingsMetadata? = nil, signerMustLoginToSign: String? = nil, signerMustLoginToSignMetadata: SettingsMetadata? = nil, signerShowSecureFieldInitialValues: String? = nil, signerShowSecureFieldInitialValuesMetadata: SettingsMetadata? = nil, signingSessionTimeout: String? = nil, signingSessionTimeoutMetadata: SettingsMetadata? = nil, signingUiVersion: String? = nil, signingUiVersionMetadata: SettingsMetadata? = nil, signTimeFormat: String? = nil, signTimeFormatMetadata: SettingsMetadata? = nil, signTimeShowAmPm: String? = nil, signTimeShowAmPmMetadata: SettingsMetadata? = nil, simplifiedSendingEnabled: String? = nil, simplifiedSendingEnabledMetadata: SettingsMetadata? = nil, singleSignOnEnabled: String? = nil, singleSignOnEnabledMetadata: SettingsMetadata? = nil, skipAuthCompletedEnvelopes: String? = nil, skipAuthCompletedEnvelopesMetadata: SettingsMetadata? = nil, socialIdRecipAuth: String? = nil, socialIdRecipAuthMetadata: SettingsMetadata? = nil, specifyDocumentVisibility: String? = nil, specifyDocumentVisibilityMetadata: SettingsMetadata? = nil, startInAdvancedCorrect: String? = nil, startInAdvancedCorrectMetadata: SettingsMetadata? = nil, supplementalDocumentsMustAccept: String? = nil, supplementalDocumentsMustAcceptMetadata: SettingsMetadata? = nil, supplementalDocumentsMustRead: String? = nil, supplementalDocumentsMustReadMetadata: SettingsMetadata? = nil, supplementalDocumentsMustView: String? = nil, supplementalDocumentsMustViewMetadata: SettingsMetadata? = nil, suppressCertificateEnforcement: String? = nil, suppressCertificateEnforcementMetadata: SettingsMetadata? = nil, tabAccountSettings: TabAccountSettings? = nil, timezoneOffsetAPI: String? = nil, timezoneOffsetAPIMetadata: SettingsMetadata? = nil, timezoneOffsetUI: String? = nil, timezoneOffsetUIMetadata: SettingsMetadata? = nil, universalSignatureOptIn: String? = nil, useAccountLevelEmail: String? = nil, useAccountLevelEmailMetadata: SettingsMetadata? = nil, useConsumerDisclosure: String? = nil, useConsumerDisclosureMetadata: SettingsMetadata? = nil, useConsumerDisclosureWithinAccount: String? = nil, useConsumerDisclosureWithinAccountMetadata: SettingsMetadata? = nil, useDerivedKeys: String? = nil, useDerivedKeysMetadata: SettingsMetadata? = nil, useDocuSignExpressSignerCertificate: String? = nil, useDocuSignExpressSignerCertificateMetadata: SettingsMetadata? = nil, useMultiAppGroupsData: String? = nil, useMultiAppGroupsDataMetadata: SettingsMetadata? = nil, useNewBlobForPdf: String? = nil, useNewBlobForPdfMetadata: SettingsMetadata? = nil, useSAFESignerCertificates: String? = nil, useSAFESignerCertificatesMetadata: SettingsMetadata? = nil, usesAPI: String? = nil, usesAPIMetadata: SettingsMetadata? = nil, useSignatureProviderPlatform: String? = nil, useSignatureProviderPlatformMetadata: SettingsMetadata? = nil, validationsAllowed: String? = nil, validationsAllowedMetadata: SettingsMetadata? = nil, validationsBrand: String? = nil, validationsBrandMetadata: SettingsMetadata? = nil, validationsCadence: String? = nil, validationsCadenceMetadata: SettingsMetadata? = nil, validationsEnabled: String? = nil, validationsEnabledMetadata: SettingsMetadata? = nil, validationsReport: String? = nil, validationsReportMetadata: SettingsMetadata? = nil, waterMarkEnabled: String? = nil, waterMarkEnabledMetadata: SettingsMetadata? = nil, writeReminderToEnvelopeHistory: String? = nil, writeReminderToEnvelopeHistoryMetadata: SettingsMetadata? = nil, wurflMinAllowableScreenSize: String? = nil, wurflMinAllowableScreenSizeMetadata: SettingsMetadata? = nil) {
        self.accessCodeFormat = accessCodeFormat
        self.accountDateTimeFormat = accountDateTimeFormat
        self.accountDateTimeFormatMetadata = accountDateTimeFormatMetadata
        self.accountDefaultLanguage = accountDefaultLanguage
        self.accountDefaultLanguageMetadata = accountDefaultLanguageMetadata
        self.accountName = accountName
        self.accountNameMetadata = accountNameMetadata
        self.accountNotification = accountNotification
        self.accountUISettings = accountUISettings
        self.adoptSigConfig = adoptSigConfig
        self.adoptSigConfigMetadata = adoptSigConfigMetadata
        self.advancedCorrect = advancedCorrect
        self.advancedCorrectMetadata = advancedCorrectMetadata
        self.allowAccessCodeFormat = allowAccessCodeFormat
        self.allowAccessCodeFormatMetadata = allowAccessCodeFormatMetadata
        self.allowAccountManagementGranular = allowAccountManagementGranular
        self.allowAccountManagementGranularMetadata = allowAccountManagementGranularMetadata
        self.allowAccountMemberNameChange = allowAccountMemberNameChange
        self.allowAccountMemberNameChangeMetadata = allowAccountMemberNameChangeMetadata
        self.allowAdvancedRecipientRoutingConditional = allowAdvancedRecipientRoutingConditional
        self.allowAdvancedRecipientRoutingConditionalMetadata = allowAdvancedRecipientRoutingConditionalMetadata
        self.allowAgentNameEmailEdit = allowAgentNameEmailEdit
        self.allowAgentNameEmailEditMetadata = allowAgentNameEmailEditMetadata
        self.allowAgreementActions = allowAgreementActions
        self.allowAgreementActionsMetadata = allowAgreementActionsMetadata
        self.allowAutoNavSettings = allowAutoNavSettings
        self.allowAutoNavSettingsMetadata = allowAutoNavSettingsMetadata
        self.allowAutoTagging = allowAutoTagging
        self.allowAutoTaggingMetadata = allowAutoTaggingMetadata
        self.allowBulkSend = allowBulkSend
        self.allowBulkSendMetadata = allowBulkSendMetadata
        self.allowCDWithdraw = allowCDWithdraw
        self.allowCDWithdrawMetadata = allowCDWithdrawMetadata
        self.allowConnectHttpListenerConfigs = allowConnectHttpListenerConfigs
        self.allowConnectSendFinishLater = allowConnectSendFinishLater
        self.allowConnectSendFinishLaterMetadata = allowConnectSendFinishLaterMetadata
        self.allowConnectUnifiedPayloadUI = allowConnectUnifiedPayloadUI
        self.allowConsumerDisclosureOverride = allowConsumerDisclosureOverride
        self.allowConsumerDisclosureOverrideMetadata = allowConsumerDisclosureOverrideMetadata
        self.allowDataDownload = allowDataDownload
        self.allowDataDownloadMetadata = allowDataDownloadMetadata
        self.allowDocumentDisclosures = allowDocumentDisclosures
        self.allowDocumentDisclosuresMetadata = allowDocumentDisclosuresMetadata
        self.allowDocumentsOnSignedEnvelopes = allowDocumentsOnSignedEnvelopes
        self.allowDocumentsOnSignedEnvelopesMetadata = allowDocumentsOnSignedEnvelopesMetadata
        self.allowDocumentVisibility = allowDocumentVisibility
        self.allowDocumentVisibilityMetadata = allowDocumentVisibilityMetadata
        self.allowEHankoStamps = allowEHankoStamps
        self.allowEHankoStampsMetadata = allowEHankoStampsMetadata
        self.allowENoteEOriginal = allowENoteEOriginal
        self.allowENoteEOriginalMetadata = allowENoteEOriginalMetadata
        self.allowEnvelopeCorrect = allowEnvelopeCorrect
        self.allowEnvelopeCorrectMetadata = allowEnvelopeCorrectMetadata
        self.allowEnvelopeCustodyTransfer = allowEnvelopeCustodyTransfer
        self.allowEnvelopeCustodyTransferMetadata = allowEnvelopeCustodyTransferMetadata
        self.allowEnvelopeCustomFields = allowEnvelopeCustomFields
        self.allowEnvelopeCustomFieldsMetadata = allowEnvelopeCustomFieldsMetadata
        self.allowEnvelopePublishReporting = allowEnvelopePublishReporting
        self.allowEnvelopePublishReportingMetadata = allowEnvelopePublishReportingMetadata
        self.allowEnvelopeReporting = allowEnvelopeReporting
        self.allowEnvelopeReportingMetadata = allowEnvelopeReportingMetadata
        self.allowExpression = allowExpression
        self.allowExpressionMetadata = allowExpressionMetadata
        self.allowExpressSignerCertificate = allowExpressSignerCertificate
        self.allowExpressSignerCertificateMetadata = allowExpressSignerCertificateMetadata
        self.allowExtendedSendingResourceFile = allowExtendedSendingResourceFile
        self.allowExtendedSendingResourceFileMetadata = allowExtendedSendingResourceFileMetadata
        self.allowExternalSignaturePad = allowExternalSignaturePad
        self.allowExternalSignaturePadMetadata = allowExternalSignaturePadMetadata
        self.allowIDVLevel1 = allowIDVLevel1
        self.allowIDVLevel1Metadata = allowIDVLevel1Metadata
        self.allowIDVPlatform = allowIDVPlatform
        self.allowIDVPlatformMetadata = allowIDVPlatformMetadata
        self.allowInPerson = allowInPerson
        self.allowInPersonMetadata = allowInPersonMetadata
        self.allowManagedStamps = allowManagedStamps
        self.allowManagedStampsMetadata = allowManagedStampsMetadata
        self.allowMarkup = allowMarkup
        self.allowMarkupMetadata = allowMarkupMetadata
        self.allowMemberTimeZone = allowMemberTimeZone
        self.allowMemberTimeZoneMetadata = allowMemberTimeZoneMetadata
        self.allowMergeFields = allowMergeFields
        self.allowMergeFieldsMetadata = allowMergeFieldsMetadata
        self.allowMultipleBrandProfiles = allowMultipleBrandProfiles
        self.allowMultipleBrandProfilesMetadata = allowMultipleBrandProfilesMetadata
        self.allowMultipleSignerAttachments = allowMultipleSignerAttachments
        self.allowMultipleSignerAttachmentsMetadata = allowMultipleSignerAttachmentsMetadata
        self.allowNonUSPhoneAuth = allowNonUSPhoneAuth
        self.allowNonUSPhoneAuthMetadata = allowNonUSPhoneAuthMetadata
        self.allowOcrOfEnvelopeDocuments = allowOcrOfEnvelopeDocuments
        self.allowOcrOfEnvelopeDocumentsMetadata = allowOcrOfEnvelopeDocumentsMetadata
        self.allowOfflineSigning = allowOfflineSigning
        self.allowOfflineSigningMetadata = allowOfflineSigningMetadata
        self.allowOpenTrustSignerCertificate = allowOpenTrustSignerCertificate
        self.allowOpenTrustSignerCertificateMetadata = allowOpenTrustSignerCertificateMetadata
        self.allowOrganizations = allowOrganizations
        self.allowOrganizationsMetadata = allowOrganizationsMetadata
        self.allowPaymentProcessing = allowPaymentProcessing
        self.allowPaymentProcessingMetadata = allowPaymentProcessingMetadata
        self.allowPersonalSignerCertificate = allowPersonalSignerCertificate
        self.allowPersonalSignerCertificateMetadata = allowPersonalSignerCertificateMetadata
        self.allowPhoneAuthentication = allowPhoneAuthentication
        self.allowPhoneAuthenticationMetadata = allowPhoneAuthenticationMetadata
        self.allowPhoneAuthOverride = allowPhoneAuthOverride
        self.allowPhoneAuthOverrideMetadata = allowPhoneAuthOverrideMetadata
        self.allowPrivateSigningGroups = allowPrivateSigningGroups
        self.allowPrivateSigningGroupsMetadata = allowPrivateSigningGroupsMetadata
        self.allowReminders = allowReminders
        self.allowRemindersMetadata = allowRemindersMetadata
        self.allowRemoteNotary = allowRemoteNotary
        self.allowRemoteNotaryMetadata = allowRemoteNotaryMetadata
        self.allowResourceFileBranding = allowResourceFileBranding
        self.allowResourceFileBrandingMetadata = allowResourceFileBrandingMetadata
        self.allowSafeBioPharmaSignerCertificate = allowSafeBioPharmaSignerCertificate
        self.allowSafeBioPharmaSignerCertificateMetadata = allowSafeBioPharmaSignerCertificateMetadata
        self.allowSecurityAppliance = allowSecurityAppliance
        self.allowSecurityApplianceMetadata = allowSecurityApplianceMetadata
        self.allowSendToCertifiedDelivery = allowSendToCertifiedDelivery
        self.allowSendToCertifiedDeliveryMetadata = allowSendToCertifiedDeliveryMetadata
        self.allowSendToIntermediary = allowSendToIntermediary
        self.allowSendToIntermediaryMetadata = allowSendToIntermediaryMetadata
        self.allowServerTemplates = allowServerTemplates
        self.allowServerTemplatesMetadata = allowServerTemplatesMetadata
        self.allowSetEmbeddedRecipientStartURL = allowSetEmbeddedRecipientStartURL
        self.allowSetEmbeddedRecipientStartURLMetadata = allowSetEmbeddedRecipientStartURLMetadata
        self.allowSharedTabs = allowSharedTabs
        self.allowSharedTabsMetadata = allowSharedTabsMetadata
        self.allowSignatureStamps = allowSignatureStamps
        self.allowSignatureStampsMetadata = allowSignatureStampsMetadata
        self.allowSignDocumentFromHomePage = allowSignDocumentFromHomePage
        self.allowSignDocumentFromHomePageMetadata = allowSignDocumentFromHomePageMetadata
        self.allowSignerReassign = allowSignerReassign
        self.allowSignerReassignMetadata = allowSignerReassignMetadata
        self.allowSignerReassignOverride = allowSignerReassignOverride
        self.allowSignerReassignOverrideMetadata = allowSignerReassignOverrideMetadata
        self.allowSigningExtensions = allowSigningExtensions
        self.allowSigningExtensionsMetadata = allowSigningExtensionsMetadata
        self.allowSigningGroups = allowSigningGroups
        self.allowSigningGroupsMetadata = allowSigningGroupsMetadata
        self.allowSigningRadioDeselect = allowSigningRadioDeselect
        self.allowSigningRadioDeselectMetadata = allowSigningRadioDeselectMetadata
        self.allowSignNow = allowSignNow
        self.allowSignNowMetadata = allowSignNowMetadata
        self.allowSMSDelivery = allowSMSDelivery
        self.allowSMSDeliveryMetadata = allowSMSDeliveryMetadata
        self.allowSocialIdLogin = allowSocialIdLogin
        self.allowSocialIdLoginMetadata = allowSocialIdLoginMetadata
        self.allowSupplementalDocuments = allowSupplementalDocuments
        self.allowSupplementalDocumentsMetadata = allowSupplementalDocumentsMetadata
        self.allowUsersToAccessDirectory = allowUsersToAccessDirectory
        self.allowUsersToAccessDirectoryMetadata = allowUsersToAccessDirectoryMetadata
        self.allowValueInsights = allowValueInsights
        self.allowValueInsightsMetadata = allowValueInsightsMetadata
        self.anchorPopulationScope = anchorPopulationScope
        self.anchorPopulationScopeMetadata = anchorPopulationScopeMetadata
        self.anchorTagVersionedPlacementEnabled = anchorTagVersionedPlacementEnabled
        self.anchorTagVersionedPlacementMetadataEnabled = anchorTagVersionedPlacementMetadataEnabled
        self.attachCompletedEnvelope = attachCompletedEnvelope
        self.attachCompletedEnvelopeMetadata = attachCompletedEnvelopeMetadata
        self.authenticationCheck = authenticationCheck
        self.authenticationCheckMetadata = authenticationCheckMetadata
        self.autoNavRule = autoNavRule
        self.autoNavRuleMetadata = autoNavRuleMetadata
        self.autoProvisionSignerAccount = autoProvisionSignerAccount
        self.autoProvisionSignerAccountMetadata = autoProvisionSignerAccountMetadata
        self.bccEmailArchive = bccEmailArchive
        self.bccEmailArchiveMetadata = bccEmailArchiveMetadata
        self.betaSwitchConfiguration = betaSwitchConfiguration
        self.betaSwitchConfigurationMetadata = betaSwitchConfigurationMetadata
        self.billingAddress = billingAddress
        self.billingAddressMetadata = billingAddressMetadata
        self.bulkSend = bulkSend
        self.bulkSendMaxCopiesInBatch = bulkSendMaxCopiesInBatch
        self.bulkSendMaxUnprocessedEnvelopesCount = bulkSendMaxUnprocessedEnvelopesCount
        self.bulkSendMetadata = bulkSendMetadata
        self.canSelfBrandSend = canSelfBrandSend
        self.canSelfBrandSendMetadata = canSelfBrandSendMetadata
        self.canSelfBrandSign = canSelfBrandSign
        self.canSelfBrandSignMetadata = canSelfBrandSignMetadata
        self.canUseSalesforceOAuth = canUseSalesforceOAuth
        self.canUseSalesforceOAuthMetadata = canUseSalesforceOAuthMetadata
        self.captureVoiceRecording = captureVoiceRecording
        self.captureVoiceRecordingMetadata = captureVoiceRecordingMetadata
        self.cfrUseWideImage = cfrUseWideImage
        self.cfrUseWideImageMetadata = cfrUseWideImageMetadata
        self.checkForMultipleAdminsOnAccount = checkForMultipleAdminsOnAccount
        self.checkForMultipleAdminsOnAccountMetadata = checkForMultipleAdminsOnAccountMetadata
        self.chromeSignatureEnabled = chromeSignatureEnabled
        self.chromeSignatureEnabledMetadata = chromeSignatureEnabledMetadata
        self.commentEmailShowMessageText = commentEmailShowMessageText
        self.commentEmailShowMessageTextMetadata = commentEmailShowMessageTextMetadata
        self.commentsAllowEnvelopeOverride = commentsAllowEnvelopeOverride
        self.commentsAllowEnvelopeOverrideMetadata = commentsAllowEnvelopeOverrideMetadata
        self.conditionalFieldsEnabled = conditionalFieldsEnabled
        self.conditionalFieldsEnabledMetadata = conditionalFieldsEnabledMetadata
        self.consumerDisclosureFrequency = consumerDisclosureFrequency
        self.consumerDisclosureFrequencyMetadata = consumerDisclosureFrequencyMetadata
        self.convertPdfFields = convertPdfFields
        self.convertPdfFieldsMetadata = convertPdfFieldsMetadata
        self.dataPopulationScope = dataPopulationScope
        self.dataPopulationScopeMetadata = dataPopulationScopeMetadata
        self.disableMobileApp = disableMobileApp
        self.disableMobileAppMetadata = disableMobileAppMetadata
        self.disableMobilePushNotifications = disableMobilePushNotifications
        self.disableMobilePushNotificationsMetadata = disableMobilePushNotificationsMetadata
        self.disableMobileSending = disableMobileSending
        self.disableMobileSendingMetadata = disableMobileSendingMetadata
        self.disableMultipleSessions = disableMultipleSessions
        self.disableMultipleSessionsMetadata = disableMultipleSessionsMetadata
        self.disablePurgeNotificationsForSenderMetadata = disablePurgeNotificationsForSenderMetadata
        self.disableSignerCertView = disableSignerCertView
        self.disableSignerCertViewMetadata = disableSignerCertViewMetadata
        self.disableSignerHistoryView = disableSignerHistoryView
        self.disableSignerHistoryViewMetadata = disableSignerHistoryViewMetadata
        self.disableStyleSignature = disableStyleSignature
        self.disableStyleSignatureMetadata = disableStyleSignatureMetadata
        self.disableUploadSignature = disableUploadSignature
        self.disableUploadSignatureMetadata = disableUploadSignatureMetadata
        self.disableUserSharing = disableUserSharing
        self.disableUserSharingMetadata = disableUserSharingMetadata
        self.displayBetaSwitch = displayBetaSwitch
        self.displayBetaSwitchMetadata = displayBetaSwitchMetadata
        self.documentConversionRestrictions = documentConversionRestrictions
        self.documentConversionRestrictionsMetadata = documentConversionRestrictionsMetadata
        self.documentRetention = documentRetention
        self.documentRetentionMetadata = documentRetentionMetadata
        self.documentRetentionPurgeTabs = documentRetentionPurgeTabs
        self.documentVisibility = documentVisibility
        self.documentVisibilityMetadata = documentVisibilityMetadata
        self.emailTemplateVersion = emailTemplateVersion
        self.emailTemplateVersionMetadata = emailTemplateVersionMetadata
        self.enableAccessCodeGenerator = enableAccessCodeGenerator
        self.enableAccessCodeGeneratorMetadata = enableAccessCodeGeneratorMetadata
        self.enableAdvancedPayments = enableAdvancedPayments
        self.enableAdvancedPaymentsMetadata = enableAdvancedPaymentsMetadata
        self.enableAdvancedPowerForms = enableAdvancedPowerForms
        self.enableAdvancedPowerFormsMetadata = enableAdvancedPowerFormsMetadata
        self.enableAgreementActionsForCLM = enableAgreementActionsForCLM
        self.enableAgreementActionsForCLMMetadata = enableAgreementActionsForCLMMetadata
        self.enableAgreementActionsForESign = enableAgreementActionsForESign
        self.enableAgreementActionsForESignMetadata = enableAgreementActionsForESignMetadata
        self.enableAutoNav = enableAutoNav
        self.enableAutoNavMetadata = enableAutoNavMetadata
        self.enableCalculatedFields = enableCalculatedFields
        self.enableCalculatedFieldsMetadata = enableCalculatedFieldsMetadata
        self.enableClickwraps = enableClickwraps
        self.enableClickwrapsMetadata = enableClickwrapsMetadata
        self.enableCommentsHistoryDownloadInSigning = enableCommentsHistoryDownloadInSigning
        self.enableCommentsHistoryDownloadInSigningMetadata = enableCommentsHistoryDownloadInSigningMetadata
        self.enableCustomerSatisfactionMetricTracking = enableCustomerSatisfactionMetricTracking
        self.enableCustomerSatisfactionMetricTrackingMetadata = enableCustomerSatisfactionMetricTrackingMetadata
        self.enableDSPro = enableDSPro
        self.enableDSProMetadata = enableDSProMetadata
        self.enableEnvelopeStampingByAccountAdmin = enableEnvelopeStampingByAccountAdmin
        self.enableEnvelopeStampingByAccountAdminMetadata = enableEnvelopeStampingByAccountAdminMetadata
        self.enableEnvelopeStampingByDSAdmin = enableEnvelopeStampingByDSAdmin
        self.enableEnvelopeStampingByDSAdminMetadata = enableEnvelopeStampingByDSAdminMetadata
        self.enableInBrowserEditor = enableInBrowserEditor
        self.enableInBrowserEditorMetadata = enableInBrowserEditorMetadata
        self.enablePaymentProcessing = enablePaymentProcessing
        self.enablePaymentProcessingMetadata = enablePaymentProcessingMetadata
        self.enablePowerForm = enablePowerForm
        self.enablePowerFormDirect = enablePowerFormDirect
        self.enablePowerFormDirectMetadata = enablePowerFormDirectMetadata
        self.enablePowerFormMetadata = enablePowerFormMetadata
        self.enableRecipientDomainValidation = enableRecipientDomainValidation
        self.enableRecipientDomainValidationMetadata = enableRecipientDomainValidationMetadata
        self.enableReportLinks = enableReportLinks
        self.enableReportLinksMetadata = enableReportLinksMetadata
        self.enableRequireSignOnPaper = enableRequireSignOnPaper
        self.enableRequireSignOnPaperMetadata = enableRequireSignOnPaperMetadata
        self.enableReservedDomain = enableReservedDomain
        self.enableReservedDomainMetadata = enableReservedDomainMetadata
        self.enableResponsiveSigning = enableResponsiveSigning
        self.enableResponsiveSigningMetadata = enableResponsiveSigningMetadata
        self.enableScheduledRelease = enableScheduledRelease
        self.enableScheduledReleaseMetadata = enableScheduledReleaseMetadata
        self.enableSearchUI = enableSearchUI
        self.enableSearchUIMetadata = enableSearchUIMetadata
        self.enableSendingTagsFontSettings = enableSendingTagsFontSettings
        self.enableSendingTagsFontSettingsMetadata = enableSendingTagsFontSettingsMetadata
        self.enableSendToAgent = enableSendToAgent
        self.enableSendToAgentMetadata = enableSendToAgentMetadata
        self.enableSendToIntermediary = enableSendToIntermediary
        self.enableSendToIntermediaryMetadata = enableSendToIntermediaryMetadata
        self.enableSendToManage = enableSendToManage
        self.enableSendToManageMetadata = enableSendToManageMetadata
        self.enableSequentialSigningAPI = enableSequentialSigningAPI
        self.enableSequentialSigningAPIMetadata = enableSequentialSigningAPIMetadata
        self.enableSequentialSigningUI = enableSequentialSigningUI
        self.enableSequentialSigningUIMetadata = enableSequentialSigningUIMetadata
        self.enableSignerAttachments = enableSignerAttachments
        self.enableSignerAttachmentsMetadata = enableSignerAttachmentsMetadata
        self.enableSigningExtensionComments = enableSigningExtensionComments
        self.enableSigningExtensionCommentsMetadata = enableSigningExtensionCommentsMetadata
        self.enableSigningExtensionConversations = enableSigningExtensionConversations
        self.enableSigningExtensionConversationsMetadata = enableSigningExtensionConversationsMetadata
        self.enableSigningOrderSettingsForAccount = enableSigningOrderSettingsForAccount
        self.enableSigningOrderSettingsForAccountMetadata = enableSigningOrderSettingsForAccountMetadata
        self.enableSignOnPaper = enableSignOnPaper
        self.enableSignOnPaperMetadata = enableSignOnPaperMetadata
        self.enableSignOnPaperOverride = enableSignOnPaperOverride
        self.enableSignOnPaperOverrideMetadata = enableSignOnPaperOverrideMetadata
        self.enableSignWithNotary = enableSignWithNotary
        self.enableSignWithNotaryMetadata = enableSignWithNotaryMetadata
        self.enableSmartContracts = enableSmartContracts
        self.enableSmartContractsMetadata = enableSmartContractsMetadata
        self.enableSMSAuthentication = enableSMSAuthentication
        self.enableSMSAuthenticationMetadata = enableSMSAuthenticationMetadata
        self.enableSocialIdLogin = enableSocialIdLogin
        self.enableSocialIdLoginMetadata = enableSocialIdLoginMetadata
        self.enableStrikeThrough = enableStrikeThrough
        self.enableStrikeThroughMetadata = enableStrikeThroughMetadata
        self.enableTransactionPoint = enableTransactionPoint
        self.enableTransactionPointMetadata = enableTransactionPointMetadata
        self.enableVaulting = enableVaulting
        self.enableVaultingMetadata = enableVaultingMetadata
        self.enableWitnessing = enableWitnessing
        self.enableWitnessingMetadata = enableWitnessingMetadata
        self.enforceTemplateNameUniqueness = enforceTemplateNameUniqueness
        self.enforceTemplateNameUniquenessMetadata = enforceTemplateNameUniquenessMetadata
        self.envelopeIntegrationAllowed = envelopeIntegrationAllowed
        self.envelopeIntegrationAllowedMetadata = envelopeIntegrationAllowedMetadata
        self.envelopeIntegrationEnabled = envelopeIntegrationEnabled
        self.envelopeIntegrationEnabledMetadata = envelopeIntegrationEnabledMetadata
        self.envelopeStampingDefaultValue = envelopeStampingDefaultValue
        self.envelopeStampingDefaultValueMetadata = envelopeStampingDefaultValueMetadata
        self.expressSend = expressSend
        self.expressSendAllowTabs = expressSendAllowTabs
        self.expressSendAllowTabsMetadata = expressSendAllowTabsMetadata
        self.expressSendMetadata = expressSendMetadata
        self.externalDocumentSources = externalDocumentSources
        self.externalSignaturePadType = externalSignaturePadType
        self.externalSignaturePadTypeMetadata = externalSignaturePadTypeMetadata
        self.faxOutEnabled = faxOutEnabled
        self.faxOutEnabledMetadata = faxOutEnabledMetadata
        self.guidedFormsHtmlAllowed = guidedFormsHtmlAllowed
        self.guidedFormsHtmlAllowedMetadata = guidedFormsHtmlAllowedMetadata
        self.hideAccountAddressInCoC = hideAccountAddressInCoC
        self.hideAccountAddressInCoCMetadata = hideAccountAddressInCoCMetadata
        self.hidePricing = hidePricing
        self.hidePricingMetadata = hidePricingMetadata
        self.idCheckConfigurations = idCheckConfigurations
        self.idCheckExpire = idCheckExpire
        self.idCheckExpireDays = idCheckExpireDays
        self.idCheckExpireDaysMetadata = idCheckExpireDaysMetadata
        self.idCheckExpireMetadata = idCheckExpireMetadata
        self.idCheckExpireMinutes = idCheckExpireMinutes
        self.idCheckExpireMinutesMetadata = idCheckExpireMinutesMetadata
        self.idCheckRequired = idCheckRequired
        self.idCheckRequiredMetadata = idCheckRequiredMetadata
        self.identityVerification = identityVerification
        self.identityVerificationMetadata = identityVerificationMetadata
        self.ignoreErrorIfAnchorTabNotFound = ignoreErrorIfAnchorTabNotFound
        self.ignoreErrorIfAnchorTabNotFoundMetadataEnabled = ignoreErrorIfAnchorTabNotFoundMetadataEnabled
        self.inPersonIDCheckQuestion = inPersonIDCheckQuestion
        self.inPersonIDCheckQuestionMetadata = inPersonIDCheckQuestionMetadata
        self.inPersonSigningEnabled = inPersonSigningEnabled
        self.inPersonSigningEnabledMetadata = inPersonSigningEnabledMetadata
        self.inSessionEnabled = inSessionEnabled
        self.inSessionEnabledMetadata = inSessionEnabledMetadata
        self.inSessionSuppressEmails = inSessionSuppressEmails
        self.inSessionSuppressEmailsMetadata = inSessionSuppressEmailsMetadata
        self.maximumSigningGroups = maximumSigningGroups
        self.maximumSigningGroupsMetadata = maximumSigningGroupsMetadata
        self.maximumUsersPerSigningGroup = maximumUsersPerSigningGroup
        self.maximumUsersPerSigningGroupMetadata = maximumUsersPerSigningGroupMetadata
        self.maxNumberOfCustomStamps = maxNumberOfCustomStamps
        self.mobileSessionTimeout = mobileSessionTimeout
        self.mobileSessionTimeoutMetadata = mobileSessionTimeoutMetadata
        self.numberOfActiveCustomStamps = numberOfActiveCustomStamps
        self.optInMobileSigningV02 = optInMobileSigningV02
        self.optInMobileSigningV02Metadata = optInMobileSigningV02Metadata
        self.optOutAutoNavTextAndTabColorUpdates = optOutAutoNavTextAndTabColorUpdates
        self.optOutAutoNavTextAndTabColorUpdatesMetadata = optOutAutoNavTextAndTabColorUpdatesMetadata
        self.optOutNewPlatformSeal = optOutNewPlatformSeal
        self.optOutNewPlatformSealPlatformMetadata = optOutNewPlatformSealPlatformMetadata
        self.phoneAuthRecipientMayProvidePhoneNumber = phoneAuthRecipientMayProvidePhoneNumber
        self.phoneAuthRecipientMayProvidePhoneNumberMetadata = phoneAuthRecipientMayProvidePhoneNumberMetadata
        self.pkiSignDownloadedPDFDocs = pkiSignDownloadedPDFDocs
        self.pkiSignDownloadedPDFDocsMetadata = pkiSignDownloadedPDFDocsMetadata
        self.recipientsCanSignOffline = recipientsCanSignOffline
        self.recipientsCanSignOfflineMetadata = recipientsCanSignOfflineMetadata
        self.recipientSigningAutoNavigationControl = recipientSigningAutoNavigationControl
        self.recipientSigningAutoNavigationControlMetadata = recipientSigningAutoNavigationControlMetadata
        self.require21CFRpt11Compliance = require21CFRpt11Compliance
        self.require21CFRpt11ComplianceMetadata = require21CFRpt11ComplianceMetadata
        self.requireDeclineReason = requireDeclineReason
        self.requireDeclineReasonMetadata = requireDeclineReasonMetadata
        self.requireExternalUserManagement = requireExternalUserManagement
        self.requireExternalUserManagementMetadata = requireExternalUserManagementMetadata
        self.requireSignerCertificateType = requireSignerCertificateType
        self.requireSignerCertificateTypeMetadata = requireSignerCertificateTypeMetadata
        self.rsaVeridAccountName = rsaVeridAccountName
        self.rsaVeridPassword = rsaVeridPassword
        self.rsaVeridRuleset = rsaVeridRuleset
        self.rsaVeridUserId = rsaVeridUserId
        self.selfSignedRecipientEmailDocument = selfSignedRecipientEmailDocument
        self.selfSignedRecipientEmailDocumentMetadata = selfSignedRecipientEmailDocumentMetadata
        self.selfSignedRecipientEmailDocumentUserOverride = selfSignedRecipientEmailDocumentUserOverride
        self.selfSignedRecipientEmailDocumentUserOverrideMetadata = selfSignedRecipientEmailDocumentUserOverrideMetadata
        self.senderCanSignInEachLocation = senderCanSignInEachLocation
        self.senderCanSignInEachLocationMetadata = senderCanSignInEachLocationMetadata
        self.senderMustAuthenticateSigning = senderMustAuthenticateSigning
        self.senderMustAuthenticateSigningMetadata = senderMustAuthenticateSigningMetadata
        self.sendingTagsFontColor = sendingTagsFontColor
        self.sendingTagsFontColorMetadata = sendingTagsFontColorMetadata
        self.sendingTagsFontName = sendingTagsFontName
        self.sendingTagsFontNameMetadata = sendingTagsFontNameMetadata
        self.sendingTagsFontSize = sendingTagsFontSize
        self.sendingTagsFontSizeMetadata = sendingTagsFontSizeMetadata
        self.sendToCertifiedDeliveryEnabled = sendToCertifiedDeliveryEnabled
        self.sendToCertifiedDeliveryEnabledMetadata = sendToCertifiedDeliveryEnabledMetadata
        self.sessionTimeout = sessionTimeout
        self.sessionTimeoutMetadata = sessionTimeoutMetadata
        self.setRecipEmailLang = setRecipEmailLang
        self.setRecipEmailLangMetadata = setRecipEmailLangMetadata
        self.setRecipSignLang = setRecipSignLang
        self.setRecipSignLangMetadata = setRecipSignLangMetadata
        self.sharedTemplateFolders = sharedTemplateFolders
        self.sharedTemplateFoldersMetadata = sharedTemplateFoldersMetadata
        self.showCompleteDialogInEmbeddedSession = showCompleteDialogInEmbeddedSession
        self.showCompleteDialogInEmbeddedSessionMetadata = showCompleteDialogInEmbeddedSessionMetadata
        self.showConditionalRoutingOnSend = showConditionalRoutingOnSend
        self.showConditionalRoutingOnSendMetadata = showConditionalRoutingOnSendMetadata
        self.showInitialConditionalFields = showInitialConditionalFields
        self.showInitialConditionalFieldsMetadata = showInitialConditionalFieldsMetadata
        self.showLocalizedWatermarks = showLocalizedWatermarks
        self.showLocalizedWatermarksMetadata = showLocalizedWatermarksMetadata
        self.showTutorials = showTutorials
        self.showTutorialsMetadata = showTutorialsMetadata
        self.signatureProviders = signatureProviders
        self.signatureProvidersMetadata = signatureProvidersMetadata
        self.signDateFormat = signDateFormat
        self.signDateFormatMetadata = signDateFormatMetadata
        self.signerAttachCertificateToEnvelopePDF = signerAttachCertificateToEnvelopePDF
        self.signerAttachCertificateToEnvelopePDFMetadata = signerAttachCertificateToEnvelopePDFMetadata
        self.signerAttachConcat = signerAttachConcat
        self.signerAttachConcatMetadata = signerAttachConcatMetadata
        self.signerCanCreateAccount = signerCanCreateAccount
        self.signerCanCreateAccountMetadata = signerCanCreateAccountMetadata
        self.signerCanSignOnMobile = signerCanSignOnMobile
        self.signerCanSignOnMobileMetadata = signerCanSignOnMobileMetadata
        self.signerInSessionUseEnvelopeCompleteEmail = signerInSessionUseEnvelopeCompleteEmail
        self.signerInSessionUseEnvelopeCompleteEmailMetadata = signerInSessionUseEnvelopeCompleteEmailMetadata
        self.signerLoginRequirements = signerLoginRequirements
        self.signerLoginRequirementsMetadata = signerLoginRequirementsMetadata
        self.signerMustHaveAccount = signerMustHaveAccount
        self.signerMustHaveAccountMetadata = signerMustHaveAccountMetadata
        self.signerMustLoginToSign = signerMustLoginToSign
        self.signerMustLoginToSignMetadata = signerMustLoginToSignMetadata
        self.signerShowSecureFieldInitialValues = signerShowSecureFieldInitialValues
        self.signerShowSecureFieldInitialValuesMetadata = signerShowSecureFieldInitialValuesMetadata
        self.signingSessionTimeout = signingSessionTimeout
        self.signingSessionTimeoutMetadata = signingSessionTimeoutMetadata
        self.signingUiVersion = signingUiVersion
        self.signingUiVersionMetadata = signingUiVersionMetadata
        self.signTimeFormat = signTimeFormat
        self.signTimeFormatMetadata = signTimeFormatMetadata
        self.signTimeShowAmPm = signTimeShowAmPm
        self.signTimeShowAmPmMetadata = signTimeShowAmPmMetadata
        self.simplifiedSendingEnabled = simplifiedSendingEnabled
        self.simplifiedSendingEnabledMetadata = simplifiedSendingEnabledMetadata
        self.singleSignOnEnabled = singleSignOnEnabled
        self.singleSignOnEnabledMetadata = singleSignOnEnabledMetadata
        self.skipAuthCompletedEnvelopes = skipAuthCompletedEnvelopes
        self.skipAuthCompletedEnvelopesMetadata = skipAuthCompletedEnvelopesMetadata
        self.socialIdRecipAuth = socialIdRecipAuth
        self.socialIdRecipAuthMetadata = socialIdRecipAuthMetadata
        self.specifyDocumentVisibility = specifyDocumentVisibility
        self.specifyDocumentVisibilityMetadata = specifyDocumentVisibilityMetadata
        self.startInAdvancedCorrect = startInAdvancedCorrect
        self.startInAdvancedCorrectMetadata = startInAdvancedCorrectMetadata
        self.supplementalDocumentsMustAccept = supplementalDocumentsMustAccept
        self.supplementalDocumentsMustAcceptMetadata = supplementalDocumentsMustAcceptMetadata
        self.supplementalDocumentsMustRead = supplementalDocumentsMustRead
        self.supplementalDocumentsMustReadMetadata = supplementalDocumentsMustReadMetadata
        self.supplementalDocumentsMustView = supplementalDocumentsMustView
        self.supplementalDocumentsMustViewMetadata = supplementalDocumentsMustViewMetadata
        self.suppressCertificateEnforcement = suppressCertificateEnforcement
        self.suppressCertificateEnforcementMetadata = suppressCertificateEnforcementMetadata
        self.tabAccountSettings = tabAccountSettings
        self.timezoneOffsetAPI = timezoneOffsetAPI
        self.timezoneOffsetAPIMetadata = timezoneOffsetAPIMetadata
        self.timezoneOffsetUI = timezoneOffsetUI
        self.timezoneOffsetUIMetadata = timezoneOffsetUIMetadata
        self.universalSignatureOptIn = universalSignatureOptIn
        self.useAccountLevelEmail = useAccountLevelEmail
        self.useAccountLevelEmailMetadata = useAccountLevelEmailMetadata
        self.useConsumerDisclosure = useConsumerDisclosure
        self.useConsumerDisclosureMetadata = useConsumerDisclosureMetadata
        self.useConsumerDisclosureWithinAccount = useConsumerDisclosureWithinAccount
        self.useConsumerDisclosureWithinAccountMetadata = useConsumerDisclosureWithinAccountMetadata
        self.useDerivedKeys = useDerivedKeys
        self.useDerivedKeysMetadata = useDerivedKeysMetadata
        self.useDocuSignExpressSignerCertificate = useDocuSignExpressSignerCertificate
        self.useDocuSignExpressSignerCertificateMetadata = useDocuSignExpressSignerCertificateMetadata
        self.useMultiAppGroupsData = useMultiAppGroupsData
        self.useMultiAppGroupsDataMetadata = useMultiAppGroupsDataMetadata
        self.useNewBlobForPdf = useNewBlobForPdf
        self.useNewBlobForPdfMetadata = useNewBlobForPdfMetadata
        self.useSAFESignerCertificates = useSAFESignerCertificates
        self.useSAFESignerCertificatesMetadata = useSAFESignerCertificatesMetadata
        self.usesAPI = usesAPI
        self.usesAPIMetadata = usesAPIMetadata
        self.useSignatureProviderPlatform = useSignatureProviderPlatform
        self.useSignatureProviderPlatformMetadata = useSignatureProviderPlatformMetadata
        self.validationsAllowed = validationsAllowed
        self.validationsAllowedMetadata = validationsAllowedMetadata
        self.validationsBrand = validationsBrand
        self.validationsBrandMetadata = validationsBrandMetadata
        self.validationsCadence = validationsCadence
        self.validationsCadenceMetadata = validationsCadenceMetadata
        self.validationsEnabled = validationsEnabled
        self.validationsEnabledMetadata = validationsEnabledMetadata
        self.validationsReport = validationsReport
        self.validationsReportMetadata = validationsReportMetadata
        self.waterMarkEnabled = waterMarkEnabled
        self.waterMarkEnabledMetadata = waterMarkEnabledMetadata
        self.writeReminderToEnvelopeHistory = writeReminderToEnvelopeHistory
        self.writeReminderToEnvelopeHistoryMetadata = writeReminderToEnvelopeHistoryMetadata
        self.wurflMinAllowableScreenSize = wurflMinAllowableScreenSize
        self.wurflMinAllowableScreenSizeMetadata = wurflMinAllowableScreenSizeMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCodeFormat
        case accountDateTimeFormat
        case accountDateTimeFormatMetadata
        case accountDefaultLanguage
        case accountDefaultLanguageMetadata
        case accountName
        case accountNameMetadata
        case accountNotification
        case accountUISettings
        case adoptSigConfig
        case adoptSigConfigMetadata
        case advancedCorrect
        case advancedCorrectMetadata
        case allowAccessCodeFormat
        case allowAccessCodeFormatMetadata
        case allowAccountManagementGranular
        case allowAccountManagementGranularMetadata
        case allowAccountMemberNameChange
        case allowAccountMemberNameChangeMetadata
        case allowAdvancedRecipientRoutingConditional
        case allowAdvancedRecipientRoutingConditionalMetadata
        case allowAgentNameEmailEdit
        case allowAgentNameEmailEditMetadata
        case allowAgreementActions
        case allowAgreementActionsMetadata
        case allowAutoNavSettings
        case allowAutoNavSettingsMetadata
        case allowAutoTagging
        case allowAutoTaggingMetadata
        case allowBulkSend
        case allowBulkSendMetadata
        case allowCDWithdraw
        case allowCDWithdrawMetadata
        case allowConnectHttpListenerConfigs
        case allowConnectSendFinishLater
        case allowConnectSendFinishLaterMetadata
        case allowConnectUnifiedPayloadUI
        case allowConsumerDisclosureOverride
        case allowConsumerDisclosureOverrideMetadata
        case allowDataDownload
        case allowDataDownloadMetadata
        case allowDocumentDisclosures
        case allowDocumentDisclosuresMetadata
        case allowDocumentsOnSignedEnvelopes
        case allowDocumentsOnSignedEnvelopesMetadata
        case allowDocumentVisibility
        case allowDocumentVisibilityMetadata
        case allowEHankoStamps
        case allowEHankoStampsMetadata
        case allowENoteEOriginal
        case allowENoteEOriginalMetadata
        case allowEnvelopeCorrect
        case allowEnvelopeCorrectMetadata
        case allowEnvelopeCustodyTransfer
        case allowEnvelopeCustodyTransferMetadata
        case allowEnvelopeCustomFields
        case allowEnvelopeCustomFieldsMetadata
        case allowEnvelopePublishReporting
        case allowEnvelopePublishReportingMetadata
        case allowEnvelopeReporting
        case allowEnvelopeReportingMetadata
        case allowExpression
        case allowExpressionMetadata
        case allowExpressSignerCertificate
        case allowExpressSignerCertificateMetadata
        case allowExtendedSendingResourceFile
        case allowExtendedSendingResourceFileMetadata
        case allowExternalSignaturePad
        case allowExternalSignaturePadMetadata
        case allowIDVLevel1
        case allowIDVLevel1Metadata
        case allowIDVPlatform
        case allowIDVPlatformMetadata
        case allowInPerson
        case allowInPersonMetadata
        case allowManagedStamps
        case allowManagedStampsMetadata
        case allowMarkup
        case allowMarkupMetadata
        case allowMemberTimeZone
        case allowMemberTimeZoneMetadata
        case allowMergeFields
        case allowMergeFieldsMetadata
        case allowMultipleBrandProfiles
        case allowMultipleBrandProfilesMetadata
        case allowMultipleSignerAttachments
        case allowMultipleSignerAttachmentsMetadata
        case allowNonUSPhoneAuth
        case allowNonUSPhoneAuthMetadata
        case allowOcrOfEnvelopeDocuments
        case allowOcrOfEnvelopeDocumentsMetadata
        case allowOfflineSigning
        case allowOfflineSigningMetadata
        case allowOpenTrustSignerCertificate
        case allowOpenTrustSignerCertificateMetadata
        case allowOrganizations
        case allowOrganizationsMetadata
        case allowPaymentProcessing
        case allowPaymentProcessingMetadata
        case allowPersonalSignerCertificate
        case allowPersonalSignerCertificateMetadata
        case allowPhoneAuthentication
        case allowPhoneAuthenticationMetadata
        case allowPhoneAuthOverride
        case allowPhoneAuthOverrideMetadata
        case allowPrivateSigningGroups
        case allowPrivateSigningGroupsMetadata
        case allowReminders
        case allowRemindersMetadata
        case allowRemoteNotary
        case allowRemoteNotaryMetadata
        case allowResourceFileBranding
        case allowResourceFileBrandingMetadata
        case allowSafeBioPharmaSignerCertificate
        case allowSafeBioPharmaSignerCertificateMetadata
        case allowSecurityAppliance
        case allowSecurityApplianceMetadata
        case allowSendToCertifiedDelivery
        case allowSendToCertifiedDeliveryMetadata
        case allowSendToIntermediary
        case allowSendToIntermediaryMetadata
        case allowServerTemplates
        case allowServerTemplatesMetadata
        case allowSetEmbeddedRecipientStartURL
        case allowSetEmbeddedRecipientStartURLMetadata
        case allowSharedTabs
        case allowSharedTabsMetadata
        case allowSignatureStamps
        case allowSignatureStampsMetadata
        case allowSignDocumentFromHomePage
        case allowSignDocumentFromHomePageMetadata
        case allowSignerReassign
        case allowSignerReassignMetadata
        case allowSignerReassignOverride
        case allowSignerReassignOverrideMetadata
        case allowSigningExtensions
        case allowSigningExtensionsMetadata
        case allowSigningGroups
        case allowSigningGroupsMetadata
        case allowSigningRadioDeselect
        case allowSigningRadioDeselectMetadata
        case allowSignNow
        case allowSignNowMetadata
        case allowSMSDelivery
        case allowSMSDeliveryMetadata
        case allowSocialIdLogin
        case allowSocialIdLoginMetadata
        case allowSupplementalDocuments
        case allowSupplementalDocumentsMetadata
        case allowUsersToAccessDirectory
        case allowUsersToAccessDirectoryMetadata
        case allowValueInsights
        case allowValueInsightsMetadata
        case anchorPopulationScope
        case anchorPopulationScopeMetadata
        case anchorTagVersionedPlacementEnabled
        case anchorTagVersionedPlacementMetadataEnabled
        case attachCompletedEnvelope
        case attachCompletedEnvelopeMetadata
        case authenticationCheck
        case authenticationCheckMetadata
        case autoNavRule
        case autoNavRuleMetadata
        case autoProvisionSignerAccount
        case autoProvisionSignerAccountMetadata
        case bccEmailArchive
        case bccEmailArchiveMetadata
        case betaSwitchConfiguration
        case betaSwitchConfigurationMetadata
        case billingAddress
        case billingAddressMetadata
        case bulkSend
        case bulkSendMaxCopiesInBatch
        case bulkSendMaxUnprocessedEnvelopesCount
        case bulkSendMetadata
        case canSelfBrandSend
        case canSelfBrandSendMetadata
        case canSelfBrandSign
        case canSelfBrandSignMetadata
        case canUseSalesforceOAuth
        case canUseSalesforceOAuthMetadata
        case captureVoiceRecording
        case captureVoiceRecordingMetadata
        case cfrUseWideImage
        case cfrUseWideImageMetadata
        case checkForMultipleAdminsOnAccount
        case checkForMultipleAdminsOnAccountMetadata
        case chromeSignatureEnabled
        case chromeSignatureEnabledMetadata
        case commentEmailShowMessageText
        case commentEmailShowMessageTextMetadata
        case commentsAllowEnvelopeOverride
        case commentsAllowEnvelopeOverrideMetadata
        case conditionalFieldsEnabled
        case conditionalFieldsEnabledMetadata
        case consumerDisclosureFrequency
        case consumerDisclosureFrequencyMetadata
        case convertPdfFields
        case convertPdfFieldsMetadata
        case dataPopulationScope
        case dataPopulationScopeMetadata
        case disableMobileApp
        case disableMobileAppMetadata
        case disableMobilePushNotifications
        case disableMobilePushNotificationsMetadata
        case disableMobileSending
        case disableMobileSendingMetadata
        case disableMultipleSessions
        case disableMultipleSessionsMetadata
        case disablePurgeNotificationsForSenderMetadata
        case disableSignerCertView
        case disableSignerCertViewMetadata
        case disableSignerHistoryView
        case disableSignerHistoryViewMetadata
        case disableStyleSignature
        case disableStyleSignatureMetadata
        case disableUploadSignature
        case disableUploadSignatureMetadata
        case disableUserSharing
        case disableUserSharingMetadata
        case displayBetaSwitch
        case displayBetaSwitchMetadata
        case documentConversionRestrictions
        case documentConversionRestrictionsMetadata
        case documentRetention
        case documentRetentionMetadata
        case documentRetentionPurgeTabs
        case documentVisibility
        case documentVisibilityMetadata
        case emailTemplateVersion
        case emailTemplateVersionMetadata
        case enableAccessCodeGenerator
        case enableAccessCodeGeneratorMetadata
        case enableAdvancedPayments
        case enableAdvancedPaymentsMetadata
        case enableAdvancedPowerForms
        case enableAdvancedPowerFormsMetadata
        case enableAgreementActionsForCLM
        case enableAgreementActionsForCLMMetadata
        case enableAgreementActionsForESign
        case enableAgreementActionsForESignMetadata
        case enableAutoNav
        case enableAutoNavMetadata
        case enableCalculatedFields
        case enableCalculatedFieldsMetadata
        case enableClickwraps
        case enableClickwrapsMetadata
        case enableCommentsHistoryDownloadInSigning
        case enableCommentsHistoryDownloadInSigningMetadata
        case enableCustomerSatisfactionMetricTracking
        case enableCustomerSatisfactionMetricTrackingMetadata
        case enableDSPro
        case enableDSProMetadata
        case enableEnvelopeStampingByAccountAdmin
        case enableEnvelopeStampingByAccountAdminMetadata
        case enableEnvelopeStampingByDSAdmin
        case enableEnvelopeStampingByDSAdminMetadata
        case enableInBrowserEditor
        case enableInBrowserEditorMetadata
        case enablePaymentProcessing
        case enablePaymentProcessingMetadata
        case enablePowerForm
        case enablePowerFormDirect
        case enablePowerFormDirectMetadata
        case enablePowerFormMetadata
        case enableRecipientDomainValidation
        case enableRecipientDomainValidationMetadata
        case enableReportLinks
        case enableReportLinksMetadata
        case enableRequireSignOnPaper
        case enableRequireSignOnPaperMetadata
        case enableReservedDomain
        case enableReservedDomainMetadata
        case enableResponsiveSigning
        case enableResponsiveSigningMetadata
        case enableScheduledRelease
        case enableScheduledReleaseMetadata
        case enableSearchUI
        case enableSearchUIMetadata
        case enableSendingTagsFontSettings
        case enableSendingTagsFontSettingsMetadata
        case enableSendToAgent
        case enableSendToAgentMetadata
        case enableSendToIntermediary
        case enableSendToIntermediaryMetadata
        case enableSendToManage
        case enableSendToManageMetadata
        case enableSequentialSigningAPI
        case enableSequentialSigningAPIMetadata
        case enableSequentialSigningUI
        case enableSequentialSigningUIMetadata
        case enableSignerAttachments
        case enableSignerAttachmentsMetadata
        case enableSigningExtensionComments
        case enableSigningExtensionCommentsMetadata
        case enableSigningExtensionConversations
        case enableSigningExtensionConversationsMetadata
        case enableSigningOrderSettingsForAccount
        case enableSigningOrderSettingsForAccountMetadata
        case enableSignOnPaper
        case enableSignOnPaperMetadata
        case enableSignOnPaperOverride
        case enableSignOnPaperOverrideMetadata
        case enableSignWithNotary
        case enableSignWithNotaryMetadata
        case enableSmartContracts
        case enableSmartContractsMetadata
        case enableSMSAuthentication
        case enableSMSAuthenticationMetadata
        case enableSocialIdLogin
        case enableSocialIdLoginMetadata
        case enableStrikeThrough
        case enableStrikeThroughMetadata
        case enableTransactionPoint
        case enableTransactionPointMetadata
        case enableVaulting
        case enableVaultingMetadata
        case enableWitnessing
        case enableWitnessingMetadata
        case enforceTemplateNameUniqueness
        case enforceTemplateNameUniquenessMetadata
        case envelopeIntegrationAllowed
        case envelopeIntegrationAllowedMetadata
        case envelopeIntegrationEnabled
        case envelopeIntegrationEnabledMetadata
        case envelopeStampingDefaultValue
        case envelopeStampingDefaultValueMetadata
        case expressSend
        case expressSendAllowTabs
        case expressSendAllowTabsMetadata
        case expressSendMetadata
        case externalDocumentSources
        case externalSignaturePadType
        case externalSignaturePadTypeMetadata
        case faxOutEnabled
        case faxOutEnabledMetadata
        case guidedFormsHtmlAllowed
        case guidedFormsHtmlAllowedMetadata
        case hideAccountAddressInCoC
        case hideAccountAddressInCoCMetadata
        case hidePricing
        case hidePricingMetadata
        case idCheckConfigurations
        case idCheckExpire
        case idCheckExpireDays
        case idCheckExpireDaysMetadata
        case idCheckExpireMetadata
        case idCheckExpireMinutes
        case idCheckExpireMinutesMetadata
        case idCheckRequired
        case idCheckRequiredMetadata
        case identityVerification
        case identityVerificationMetadata
        case ignoreErrorIfAnchorTabNotFound
        case ignoreErrorIfAnchorTabNotFoundMetadataEnabled
        case inPersonIDCheckQuestion
        case inPersonIDCheckQuestionMetadata
        case inPersonSigningEnabled
        case inPersonSigningEnabledMetadata
        case inSessionEnabled
        case inSessionEnabledMetadata
        case inSessionSuppressEmails
        case inSessionSuppressEmailsMetadata
        case maximumSigningGroups
        case maximumSigningGroupsMetadata
        case maximumUsersPerSigningGroup
        case maximumUsersPerSigningGroupMetadata
        case maxNumberOfCustomStamps
        case mobileSessionTimeout
        case mobileSessionTimeoutMetadata
        case numberOfActiveCustomStamps
        case optInMobileSigningV02
        case optInMobileSigningV02Metadata
        case optOutAutoNavTextAndTabColorUpdates
        case optOutAutoNavTextAndTabColorUpdatesMetadata
        case optOutNewPlatformSeal
        case optOutNewPlatformSealPlatformMetadata
        case phoneAuthRecipientMayProvidePhoneNumber
        case phoneAuthRecipientMayProvidePhoneNumberMetadata
        case pkiSignDownloadedPDFDocs
        case pkiSignDownloadedPDFDocsMetadata
        case recipientsCanSignOffline
        case recipientsCanSignOfflineMetadata
        case recipientSigningAutoNavigationControl
        case recipientSigningAutoNavigationControlMetadata
        case require21CFRpt11Compliance
        case require21CFRpt11ComplianceMetadata
        case requireDeclineReason
        case requireDeclineReasonMetadata
        case requireExternalUserManagement
        case requireExternalUserManagementMetadata
        case requireSignerCertificateType
        case requireSignerCertificateTypeMetadata
        case rsaVeridAccountName
        case rsaVeridPassword
        case rsaVeridRuleset
        case rsaVeridUserId
        case selfSignedRecipientEmailDocument
        case selfSignedRecipientEmailDocumentMetadata
        case selfSignedRecipientEmailDocumentUserOverride
        case selfSignedRecipientEmailDocumentUserOverrideMetadata
        case senderCanSignInEachLocation
        case senderCanSignInEachLocationMetadata
        case senderMustAuthenticateSigning
        case senderMustAuthenticateSigningMetadata
        case sendingTagsFontColor
        case sendingTagsFontColorMetadata
        case sendingTagsFontName
        case sendingTagsFontNameMetadata
        case sendingTagsFontSize
        case sendingTagsFontSizeMetadata
        case sendToCertifiedDeliveryEnabled
        case sendToCertifiedDeliveryEnabledMetadata
        case sessionTimeout
        case sessionTimeoutMetadata
        case setRecipEmailLang
        case setRecipEmailLangMetadata
        case setRecipSignLang
        case setRecipSignLangMetadata
        case sharedTemplateFolders
        case sharedTemplateFoldersMetadata
        case showCompleteDialogInEmbeddedSession
        case showCompleteDialogInEmbeddedSessionMetadata
        case showConditionalRoutingOnSend
        case showConditionalRoutingOnSendMetadata
        case showInitialConditionalFields
        case showInitialConditionalFieldsMetadata
        case showLocalizedWatermarks
        case showLocalizedWatermarksMetadata
        case showTutorials
        case showTutorialsMetadata
        case signatureProviders
        case signatureProvidersMetadata
        case signDateFormat
        case signDateFormatMetadata
        case signerAttachCertificateToEnvelopePDF
        case signerAttachCertificateToEnvelopePDFMetadata
        case signerAttachConcat
        case signerAttachConcatMetadata
        case signerCanCreateAccount
        case signerCanCreateAccountMetadata
        case signerCanSignOnMobile
        case signerCanSignOnMobileMetadata
        case signerInSessionUseEnvelopeCompleteEmail
        case signerInSessionUseEnvelopeCompleteEmailMetadata
        case signerLoginRequirements
        case signerLoginRequirementsMetadata
        case signerMustHaveAccount
        case signerMustHaveAccountMetadata
        case signerMustLoginToSign
        case signerMustLoginToSignMetadata
        case signerShowSecureFieldInitialValues
        case signerShowSecureFieldInitialValuesMetadata
        case signingSessionTimeout
        case signingSessionTimeoutMetadata
        case signingUiVersion
        case signingUiVersionMetadata
        case signTimeFormat
        case signTimeFormatMetadata
        case signTimeShowAmPm
        case signTimeShowAmPmMetadata
        case simplifiedSendingEnabled
        case simplifiedSendingEnabledMetadata
        case singleSignOnEnabled
        case singleSignOnEnabledMetadata
        case skipAuthCompletedEnvelopes
        case skipAuthCompletedEnvelopesMetadata
        case socialIdRecipAuth
        case socialIdRecipAuthMetadata
        case specifyDocumentVisibility
        case specifyDocumentVisibilityMetadata
        case startInAdvancedCorrect
        case startInAdvancedCorrectMetadata
        case supplementalDocumentsMustAccept
        case supplementalDocumentsMustAcceptMetadata
        case supplementalDocumentsMustRead
        case supplementalDocumentsMustReadMetadata
        case supplementalDocumentsMustView
        case supplementalDocumentsMustViewMetadata
        case suppressCertificateEnforcement
        case suppressCertificateEnforcementMetadata
        case tabAccountSettings
        case timezoneOffsetAPI
        case timezoneOffsetAPIMetadata
        case timezoneOffsetUI
        case timezoneOffsetUIMetadata
        case universalSignatureOptIn
        case useAccountLevelEmail
        case useAccountLevelEmailMetadata
        case useConsumerDisclosure
        case useConsumerDisclosureMetadata
        case useConsumerDisclosureWithinAccount
        case useConsumerDisclosureWithinAccountMetadata
        case useDerivedKeys
        case useDerivedKeysMetadata
        case useDocuSignExpressSignerCertificate
        case useDocuSignExpressSignerCertificateMetadata
        case useMultiAppGroupsData
        case useMultiAppGroupsDataMetadata
        case useNewBlobForPdf
        case useNewBlobForPdfMetadata
        case useSAFESignerCertificates
        case useSAFESignerCertificatesMetadata
        case usesAPI
        case usesAPIMetadata
        case useSignatureProviderPlatform
        case useSignatureProviderPlatformMetadata
        case validationsAllowed
        case validationsAllowedMetadata
        case validationsBrand
        case validationsBrandMetadata
        case validationsCadence
        case validationsCadenceMetadata
        case validationsEnabled
        case validationsEnabledMetadata
        case validationsReport
        case validationsReportMetadata
        case waterMarkEnabled
        case waterMarkEnabledMetadata
        case writeReminderToEnvelopeHistory
        case writeReminderToEnvelopeHistoryMetadata
        case wurflMinAllowableScreenSize
        case wurflMinAllowableScreenSizeMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accessCodeFormat, forKey: .accessCodeFormat)
        try container.encodeIfPresent(accountDateTimeFormat, forKey: .accountDateTimeFormat)
        try container.encodeIfPresent(accountDateTimeFormatMetadata, forKey: .accountDateTimeFormatMetadata)
        try container.encodeIfPresent(accountDefaultLanguage, forKey: .accountDefaultLanguage)
        try container.encodeIfPresent(accountDefaultLanguageMetadata, forKey: .accountDefaultLanguageMetadata)
        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(accountNameMetadata, forKey: .accountNameMetadata)
        try container.encodeIfPresent(accountNotification, forKey: .accountNotification)
        try container.encodeIfPresent(accountUISettings, forKey: .accountUISettings)
        try container.encodeIfPresent(adoptSigConfig, forKey: .adoptSigConfig)
        try container.encodeIfPresent(adoptSigConfigMetadata, forKey: .adoptSigConfigMetadata)
        try container.encodeIfPresent(advancedCorrect, forKey: .advancedCorrect)
        try container.encodeIfPresent(advancedCorrectMetadata, forKey: .advancedCorrectMetadata)
        try container.encodeIfPresent(allowAccessCodeFormat, forKey: .allowAccessCodeFormat)
        try container.encodeIfPresent(allowAccessCodeFormatMetadata, forKey: .allowAccessCodeFormatMetadata)
        try container.encodeIfPresent(allowAccountManagementGranular, forKey: .allowAccountManagementGranular)
        try container.encodeIfPresent(allowAccountManagementGranularMetadata, forKey: .allowAccountManagementGranularMetadata)
        try container.encodeIfPresent(allowAccountMemberNameChange, forKey: .allowAccountMemberNameChange)
        try container.encodeIfPresent(allowAccountMemberNameChangeMetadata, forKey: .allowAccountMemberNameChangeMetadata)
        try container.encodeIfPresent(allowAdvancedRecipientRoutingConditional, forKey: .allowAdvancedRecipientRoutingConditional)
        try container.encodeIfPresent(allowAdvancedRecipientRoutingConditionalMetadata, forKey: .allowAdvancedRecipientRoutingConditionalMetadata)
        try container.encodeIfPresent(allowAgentNameEmailEdit, forKey: .allowAgentNameEmailEdit)
        try container.encodeIfPresent(allowAgentNameEmailEditMetadata, forKey: .allowAgentNameEmailEditMetadata)
        try container.encodeIfPresent(allowAgreementActions, forKey: .allowAgreementActions)
        try container.encodeIfPresent(allowAgreementActionsMetadata, forKey: .allowAgreementActionsMetadata)
        try container.encodeIfPresent(allowAutoNavSettings, forKey: .allowAutoNavSettings)
        try container.encodeIfPresent(allowAutoNavSettingsMetadata, forKey: .allowAutoNavSettingsMetadata)
        try container.encodeIfPresent(allowAutoTagging, forKey: .allowAutoTagging)
        try container.encodeIfPresent(allowAutoTaggingMetadata, forKey: .allowAutoTaggingMetadata)
        try container.encodeIfPresent(allowBulkSend, forKey: .allowBulkSend)
        try container.encodeIfPresent(allowBulkSendMetadata, forKey: .allowBulkSendMetadata)
        try container.encodeIfPresent(allowCDWithdraw, forKey: .allowCDWithdraw)
        try container.encodeIfPresent(allowCDWithdrawMetadata, forKey: .allowCDWithdrawMetadata)
        try container.encodeIfPresent(allowConnectHttpListenerConfigs, forKey: .allowConnectHttpListenerConfigs)
        try container.encodeIfPresent(allowConnectSendFinishLater, forKey: .allowConnectSendFinishLater)
        try container.encodeIfPresent(allowConnectSendFinishLaterMetadata, forKey: .allowConnectSendFinishLaterMetadata)
        try container.encodeIfPresent(allowConnectUnifiedPayloadUI, forKey: .allowConnectUnifiedPayloadUI)
        try container.encodeIfPresent(allowConsumerDisclosureOverride, forKey: .allowConsumerDisclosureOverride)
        try container.encodeIfPresent(allowConsumerDisclosureOverrideMetadata, forKey: .allowConsumerDisclosureOverrideMetadata)
        try container.encodeIfPresent(allowDataDownload, forKey: .allowDataDownload)
        try container.encodeIfPresent(allowDataDownloadMetadata, forKey: .allowDataDownloadMetadata)
        try container.encodeIfPresent(allowDocumentDisclosures, forKey: .allowDocumentDisclosures)
        try container.encodeIfPresent(allowDocumentDisclosuresMetadata, forKey: .allowDocumentDisclosuresMetadata)
        try container.encodeIfPresent(allowDocumentsOnSignedEnvelopes, forKey: .allowDocumentsOnSignedEnvelopes)
        try container.encodeIfPresent(allowDocumentsOnSignedEnvelopesMetadata, forKey: .allowDocumentsOnSignedEnvelopesMetadata)
        try container.encodeIfPresent(allowDocumentVisibility, forKey: .allowDocumentVisibility)
        try container.encodeIfPresent(allowDocumentVisibilityMetadata, forKey: .allowDocumentVisibilityMetadata)
        try container.encodeIfPresent(allowEHankoStamps, forKey: .allowEHankoStamps)
        try container.encodeIfPresent(allowEHankoStampsMetadata, forKey: .allowEHankoStampsMetadata)
        try container.encodeIfPresent(allowENoteEOriginal, forKey: .allowENoteEOriginal)
        try container.encodeIfPresent(allowENoteEOriginalMetadata, forKey: .allowENoteEOriginalMetadata)
        try container.encodeIfPresent(allowEnvelopeCorrect, forKey: .allowEnvelopeCorrect)
        try container.encodeIfPresent(allowEnvelopeCorrectMetadata, forKey: .allowEnvelopeCorrectMetadata)
        try container.encodeIfPresent(allowEnvelopeCustodyTransfer, forKey: .allowEnvelopeCustodyTransfer)
        try container.encodeIfPresent(allowEnvelopeCustodyTransferMetadata, forKey: .allowEnvelopeCustodyTransferMetadata)
        try container.encodeIfPresent(allowEnvelopeCustomFields, forKey: .allowEnvelopeCustomFields)
        try container.encodeIfPresent(allowEnvelopeCustomFieldsMetadata, forKey: .allowEnvelopeCustomFieldsMetadata)
        try container.encodeIfPresent(allowEnvelopePublishReporting, forKey: .allowEnvelopePublishReporting)
        try container.encodeIfPresent(allowEnvelopePublishReportingMetadata, forKey: .allowEnvelopePublishReportingMetadata)
        try container.encodeIfPresent(allowEnvelopeReporting, forKey: .allowEnvelopeReporting)
        try container.encodeIfPresent(allowEnvelopeReportingMetadata, forKey: .allowEnvelopeReportingMetadata)
        try container.encodeIfPresent(allowExpression, forKey: .allowExpression)
        try container.encodeIfPresent(allowExpressionMetadata, forKey: .allowExpressionMetadata)
        try container.encodeIfPresent(allowExpressSignerCertificate, forKey: .allowExpressSignerCertificate)
        try container.encodeIfPresent(allowExpressSignerCertificateMetadata, forKey: .allowExpressSignerCertificateMetadata)
        try container.encodeIfPresent(allowExtendedSendingResourceFile, forKey: .allowExtendedSendingResourceFile)
        try container.encodeIfPresent(allowExtendedSendingResourceFileMetadata, forKey: .allowExtendedSendingResourceFileMetadata)
        try container.encodeIfPresent(allowExternalSignaturePad, forKey: .allowExternalSignaturePad)
        try container.encodeIfPresent(allowExternalSignaturePadMetadata, forKey: .allowExternalSignaturePadMetadata)
        try container.encodeIfPresent(allowIDVLevel1, forKey: .allowIDVLevel1)
        try container.encodeIfPresent(allowIDVLevel1Metadata, forKey: .allowIDVLevel1Metadata)
        try container.encodeIfPresent(allowIDVPlatform, forKey: .allowIDVPlatform)
        try container.encodeIfPresent(allowIDVPlatformMetadata, forKey: .allowIDVPlatformMetadata)
        try container.encodeIfPresent(allowInPerson, forKey: .allowInPerson)
        try container.encodeIfPresent(allowInPersonMetadata, forKey: .allowInPersonMetadata)
        try container.encodeIfPresent(allowManagedStamps, forKey: .allowManagedStamps)
        try container.encodeIfPresent(allowManagedStampsMetadata, forKey: .allowManagedStampsMetadata)
        try container.encodeIfPresent(allowMarkup, forKey: .allowMarkup)
        try container.encodeIfPresent(allowMarkupMetadata, forKey: .allowMarkupMetadata)
        try container.encodeIfPresent(allowMemberTimeZone, forKey: .allowMemberTimeZone)
        try container.encodeIfPresent(allowMemberTimeZoneMetadata, forKey: .allowMemberTimeZoneMetadata)
        try container.encodeIfPresent(allowMergeFields, forKey: .allowMergeFields)
        try container.encodeIfPresent(allowMergeFieldsMetadata, forKey: .allowMergeFieldsMetadata)
        try container.encodeIfPresent(allowMultipleBrandProfiles, forKey: .allowMultipleBrandProfiles)
        try container.encodeIfPresent(allowMultipleBrandProfilesMetadata, forKey: .allowMultipleBrandProfilesMetadata)
        try container.encodeIfPresent(allowMultipleSignerAttachments, forKey: .allowMultipleSignerAttachments)
        try container.encodeIfPresent(allowMultipleSignerAttachmentsMetadata, forKey: .allowMultipleSignerAttachmentsMetadata)
        try container.encodeIfPresent(allowNonUSPhoneAuth, forKey: .allowNonUSPhoneAuth)
        try container.encodeIfPresent(allowNonUSPhoneAuthMetadata, forKey: .allowNonUSPhoneAuthMetadata)
        try container.encodeIfPresent(allowOcrOfEnvelopeDocuments, forKey: .allowOcrOfEnvelopeDocuments)
        try container.encodeIfPresent(allowOcrOfEnvelopeDocumentsMetadata, forKey: .allowOcrOfEnvelopeDocumentsMetadata)
        try container.encodeIfPresent(allowOfflineSigning, forKey: .allowOfflineSigning)
        try container.encodeIfPresent(allowOfflineSigningMetadata, forKey: .allowOfflineSigningMetadata)
        try container.encodeIfPresent(allowOpenTrustSignerCertificate, forKey: .allowOpenTrustSignerCertificate)
        try container.encodeIfPresent(allowOpenTrustSignerCertificateMetadata, forKey: .allowOpenTrustSignerCertificateMetadata)
        try container.encodeIfPresent(allowOrganizations, forKey: .allowOrganizations)
        try container.encodeIfPresent(allowOrganizationsMetadata, forKey: .allowOrganizationsMetadata)
        try container.encodeIfPresent(allowPaymentProcessing, forKey: .allowPaymentProcessing)
        try container.encodeIfPresent(allowPaymentProcessingMetadata, forKey: .allowPaymentProcessingMetadata)
        try container.encodeIfPresent(allowPersonalSignerCertificate, forKey: .allowPersonalSignerCertificate)
        try container.encodeIfPresent(allowPersonalSignerCertificateMetadata, forKey: .allowPersonalSignerCertificateMetadata)
        try container.encodeIfPresent(allowPhoneAuthentication, forKey: .allowPhoneAuthentication)
        try container.encodeIfPresent(allowPhoneAuthenticationMetadata, forKey: .allowPhoneAuthenticationMetadata)
        try container.encodeIfPresent(allowPhoneAuthOverride, forKey: .allowPhoneAuthOverride)
        try container.encodeIfPresent(allowPhoneAuthOverrideMetadata, forKey: .allowPhoneAuthOverrideMetadata)
        try container.encodeIfPresent(allowPrivateSigningGroups, forKey: .allowPrivateSigningGroups)
        try container.encodeIfPresent(allowPrivateSigningGroupsMetadata, forKey: .allowPrivateSigningGroupsMetadata)
        try container.encodeIfPresent(allowReminders, forKey: .allowReminders)
        try container.encodeIfPresent(allowRemindersMetadata, forKey: .allowRemindersMetadata)
        try container.encodeIfPresent(allowRemoteNotary, forKey: .allowRemoteNotary)
        try container.encodeIfPresent(allowRemoteNotaryMetadata, forKey: .allowRemoteNotaryMetadata)
        try container.encodeIfPresent(allowResourceFileBranding, forKey: .allowResourceFileBranding)
        try container.encodeIfPresent(allowResourceFileBrandingMetadata, forKey: .allowResourceFileBrandingMetadata)
        try container.encodeIfPresent(allowSafeBioPharmaSignerCertificate, forKey: .allowSafeBioPharmaSignerCertificate)
        try container.encodeIfPresent(allowSafeBioPharmaSignerCertificateMetadata, forKey: .allowSafeBioPharmaSignerCertificateMetadata)
        try container.encodeIfPresent(allowSecurityAppliance, forKey: .allowSecurityAppliance)
        try container.encodeIfPresent(allowSecurityApplianceMetadata, forKey: .allowSecurityApplianceMetadata)
        try container.encodeIfPresent(allowSendToCertifiedDelivery, forKey: .allowSendToCertifiedDelivery)
        try container.encodeIfPresent(allowSendToCertifiedDeliveryMetadata, forKey: .allowSendToCertifiedDeliveryMetadata)
        try container.encodeIfPresent(allowSendToIntermediary, forKey: .allowSendToIntermediary)
        try container.encodeIfPresent(allowSendToIntermediaryMetadata, forKey: .allowSendToIntermediaryMetadata)
        try container.encodeIfPresent(allowServerTemplates, forKey: .allowServerTemplates)
        try container.encodeIfPresent(allowServerTemplatesMetadata, forKey: .allowServerTemplatesMetadata)
        try container.encodeIfPresent(allowSetEmbeddedRecipientStartURL, forKey: .allowSetEmbeddedRecipientStartURL)
        try container.encodeIfPresent(allowSetEmbeddedRecipientStartURLMetadata, forKey: .allowSetEmbeddedRecipientStartURLMetadata)
        try container.encodeIfPresent(allowSharedTabs, forKey: .allowSharedTabs)
        try container.encodeIfPresent(allowSharedTabsMetadata, forKey: .allowSharedTabsMetadata)
        try container.encodeIfPresent(allowSignatureStamps, forKey: .allowSignatureStamps)
        try container.encodeIfPresent(allowSignatureStampsMetadata, forKey: .allowSignatureStampsMetadata)
        try container.encodeIfPresent(allowSignDocumentFromHomePage, forKey: .allowSignDocumentFromHomePage)
        try container.encodeIfPresent(allowSignDocumentFromHomePageMetadata, forKey: .allowSignDocumentFromHomePageMetadata)
        try container.encodeIfPresent(allowSignerReassign, forKey: .allowSignerReassign)
        try container.encodeIfPresent(allowSignerReassignMetadata, forKey: .allowSignerReassignMetadata)
        try container.encodeIfPresent(allowSignerReassignOverride, forKey: .allowSignerReassignOverride)
        try container.encodeIfPresent(allowSignerReassignOverrideMetadata, forKey: .allowSignerReassignOverrideMetadata)
        try container.encodeIfPresent(allowSigningExtensions, forKey: .allowSigningExtensions)
        try container.encodeIfPresent(allowSigningExtensionsMetadata, forKey: .allowSigningExtensionsMetadata)
        try container.encodeIfPresent(allowSigningGroups, forKey: .allowSigningGroups)
        try container.encodeIfPresent(allowSigningGroupsMetadata, forKey: .allowSigningGroupsMetadata)
        try container.encodeIfPresent(allowSigningRadioDeselect, forKey: .allowSigningRadioDeselect)
        try container.encodeIfPresent(allowSigningRadioDeselectMetadata, forKey: .allowSigningRadioDeselectMetadata)
        try container.encodeIfPresent(allowSignNow, forKey: .allowSignNow)
        try container.encodeIfPresent(allowSignNowMetadata, forKey: .allowSignNowMetadata)
        try container.encodeIfPresent(allowSMSDelivery, forKey: .allowSMSDelivery)
        try container.encodeIfPresent(allowSMSDeliveryMetadata, forKey: .allowSMSDeliveryMetadata)
        try container.encodeIfPresent(allowSocialIdLogin, forKey: .allowSocialIdLogin)
        try container.encodeIfPresent(allowSocialIdLoginMetadata, forKey: .allowSocialIdLoginMetadata)
        try container.encodeIfPresent(allowSupplementalDocuments, forKey: .allowSupplementalDocuments)
        try container.encodeIfPresent(allowSupplementalDocumentsMetadata, forKey: .allowSupplementalDocumentsMetadata)
        try container.encodeIfPresent(allowUsersToAccessDirectory, forKey: .allowUsersToAccessDirectory)
        try container.encodeIfPresent(allowUsersToAccessDirectoryMetadata, forKey: .allowUsersToAccessDirectoryMetadata)
        try container.encodeIfPresent(allowValueInsights, forKey: .allowValueInsights)
        try container.encodeIfPresent(allowValueInsightsMetadata, forKey: .allowValueInsightsMetadata)
        try container.encodeIfPresent(anchorPopulationScope, forKey: .anchorPopulationScope)
        try container.encodeIfPresent(anchorPopulationScopeMetadata, forKey: .anchorPopulationScopeMetadata)
        try container.encodeIfPresent(anchorTagVersionedPlacementEnabled, forKey: .anchorTagVersionedPlacementEnabled)
        try container.encodeIfPresent(anchorTagVersionedPlacementMetadataEnabled, forKey: .anchorTagVersionedPlacementMetadataEnabled)
        try container.encodeIfPresent(attachCompletedEnvelope, forKey: .attachCompletedEnvelope)
        try container.encodeIfPresent(attachCompletedEnvelopeMetadata, forKey: .attachCompletedEnvelopeMetadata)
        try container.encodeIfPresent(authenticationCheck, forKey: .authenticationCheck)
        try container.encodeIfPresent(authenticationCheckMetadata, forKey: .authenticationCheckMetadata)
        try container.encodeIfPresent(autoNavRule, forKey: .autoNavRule)
        try container.encodeIfPresent(autoNavRuleMetadata, forKey: .autoNavRuleMetadata)
        try container.encodeIfPresent(autoProvisionSignerAccount, forKey: .autoProvisionSignerAccount)
        try container.encodeIfPresent(autoProvisionSignerAccountMetadata, forKey: .autoProvisionSignerAccountMetadata)
        try container.encodeIfPresent(bccEmailArchive, forKey: .bccEmailArchive)
        try container.encodeIfPresent(bccEmailArchiveMetadata, forKey: .bccEmailArchiveMetadata)
        try container.encodeIfPresent(betaSwitchConfiguration, forKey: .betaSwitchConfiguration)
        try container.encodeIfPresent(betaSwitchConfigurationMetadata, forKey: .betaSwitchConfigurationMetadata)
        try container.encodeIfPresent(billingAddress, forKey: .billingAddress)
        try container.encodeIfPresent(billingAddressMetadata, forKey: .billingAddressMetadata)
        try container.encodeIfPresent(bulkSend, forKey: .bulkSend)
        try container.encodeIfPresent(bulkSendMaxCopiesInBatch, forKey: .bulkSendMaxCopiesInBatch)
        try container.encodeIfPresent(bulkSendMaxUnprocessedEnvelopesCount, forKey: .bulkSendMaxUnprocessedEnvelopesCount)
        try container.encodeIfPresent(bulkSendMetadata, forKey: .bulkSendMetadata)
        try container.encodeIfPresent(canSelfBrandSend, forKey: .canSelfBrandSend)
        try container.encodeIfPresent(canSelfBrandSendMetadata, forKey: .canSelfBrandSendMetadata)
        try container.encodeIfPresent(canSelfBrandSign, forKey: .canSelfBrandSign)
        try container.encodeIfPresent(canSelfBrandSignMetadata, forKey: .canSelfBrandSignMetadata)
        try container.encodeIfPresent(canUseSalesforceOAuth, forKey: .canUseSalesforceOAuth)
        try container.encodeIfPresent(canUseSalesforceOAuthMetadata, forKey: .canUseSalesforceOAuthMetadata)
        try container.encodeIfPresent(captureVoiceRecording, forKey: .captureVoiceRecording)
        try container.encodeIfPresent(captureVoiceRecordingMetadata, forKey: .captureVoiceRecordingMetadata)
        try container.encodeIfPresent(cfrUseWideImage, forKey: .cfrUseWideImage)
        try container.encodeIfPresent(cfrUseWideImageMetadata, forKey: .cfrUseWideImageMetadata)
        try container.encodeIfPresent(checkForMultipleAdminsOnAccount, forKey: .checkForMultipleAdminsOnAccount)
        try container.encodeIfPresent(checkForMultipleAdminsOnAccountMetadata, forKey: .checkForMultipleAdminsOnAccountMetadata)
        try container.encodeIfPresent(chromeSignatureEnabled, forKey: .chromeSignatureEnabled)
        try container.encodeIfPresent(chromeSignatureEnabledMetadata, forKey: .chromeSignatureEnabledMetadata)
        try container.encodeIfPresent(commentEmailShowMessageText, forKey: .commentEmailShowMessageText)
        try container.encodeIfPresent(commentEmailShowMessageTextMetadata, forKey: .commentEmailShowMessageTextMetadata)
        try container.encodeIfPresent(commentsAllowEnvelopeOverride, forKey: .commentsAllowEnvelopeOverride)
        try container.encodeIfPresent(commentsAllowEnvelopeOverrideMetadata, forKey: .commentsAllowEnvelopeOverrideMetadata)
        try container.encodeIfPresent(conditionalFieldsEnabled, forKey: .conditionalFieldsEnabled)
        try container.encodeIfPresent(conditionalFieldsEnabledMetadata, forKey: .conditionalFieldsEnabledMetadata)
        try container.encodeIfPresent(consumerDisclosureFrequency, forKey: .consumerDisclosureFrequency)
        try container.encodeIfPresent(consumerDisclosureFrequencyMetadata, forKey: .consumerDisclosureFrequencyMetadata)
        try container.encodeIfPresent(convertPdfFields, forKey: .convertPdfFields)
        try container.encodeIfPresent(convertPdfFieldsMetadata, forKey: .convertPdfFieldsMetadata)
        try container.encodeIfPresent(dataPopulationScope, forKey: .dataPopulationScope)
        try container.encodeIfPresent(dataPopulationScopeMetadata, forKey: .dataPopulationScopeMetadata)
        try container.encodeIfPresent(disableMobileApp, forKey: .disableMobileApp)
        try container.encodeIfPresent(disableMobileAppMetadata, forKey: .disableMobileAppMetadata)
        try container.encodeIfPresent(disableMobilePushNotifications, forKey: .disableMobilePushNotifications)
        try container.encodeIfPresent(disableMobilePushNotificationsMetadata, forKey: .disableMobilePushNotificationsMetadata)
        try container.encodeIfPresent(disableMobileSending, forKey: .disableMobileSending)
        try container.encodeIfPresent(disableMobileSendingMetadata, forKey: .disableMobileSendingMetadata)
        try container.encodeIfPresent(disableMultipleSessions, forKey: .disableMultipleSessions)
        try container.encodeIfPresent(disableMultipleSessionsMetadata, forKey: .disableMultipleSessionsMetadata)
        try container.encodeIfPresent(disablePurgeNotificationsForSenderMetadata, forKey: .disablePurgeNotificationsForSenderMetadata)
        try container.encodeIfPresent(disableSignerCertView, forKey: .disableSignerCertView)
        try container.encodeIfPresent(disableSignerCertViewMetadata, forKey: .disableSignerCertViewMetadata)
        try container.encodeIfPresent(disableSignerHistoryView, forKey: .disableSignerHistoryView)
        try container.encodeIfPresent(disableSignerHistoryViewMetadata, forKey: .disableSignerHistoryViewMetadata)
        try container.encodeIfPresent(disableStyleSignature, forKey: .disableStyleSignature)
        try container.encodeIfPresent(disableStyleSignatureMetadata, forKey: .disableStyleSignatureMetadata)
        try container.encodeIfPresent(disableUploadSignature, forKey: .disableUploadSignature)
        try container.encodeIfPresent(disableUploadSignatureMetadata, forKey: .disableUploadSignatureMetadata)
        try container.encodeIfPresent(disableUserSharing, forKey: .disableUserSharing)
        try container.encodeIfPresent(disableUserSharingMetadata, forKey: .disableUserSharingMetadata)
        try container.encodeIfPresent(displayBetaSwitch, forKey: .displayBetaSwitch)
        try container.encodeIfPresent(displayBetaSwitchMetadata, forKey: .displayBetaSwitchMetadata)
        try container.encodeIfPresent(documentConversionRestrictions, forKey: .documentConversionRestrictions)
        try container.encodeIfPresent(documentConversionRestrictionsMetadata, forKey: .documentConversionRestrictionsMetadata)
        try container.encodeIfPresent(documentRetention, forKey: .documentRetention)
        try container.encodeIfPresent(documentRetentionMetadata, forKey: .documentRetentionMetadata)
        try container.encodeIfPresent(documentRetentionPurgeTabs, forKey: .documentRetentionPurgeTabs)
        try container.encodeIfPresent(documentVisibility, forKey: .documentVisibility)
        try container.encodeIfPresent(documentVisibilityMetadata, forKey: .documentVisibilityMetadata)
        try container.encodeIfPresent(emailTemplateVersion, forKey: .emailTemplateVersion)
        try container.encodeIfPresent(emailTemplateVersionMetadata, forKey: .emailTemplateVersionMetadata)
        try container.encodeIfPresent(enableAccessCodeGenerator, forKey: .enableAccessCodeGenerator)
        try container.encodeIfPresent(enableAccessCodeGeneratorMetadata, forKey: .enableAccessCodeGeneratorMetadata)
        try container.encodeIfPresent(enableAdvancedPayments, forKey: .enableAdvancedPayments)
        try container.encodeIfPresent(enableAdvancedPaymentsMetadata, forKey: .enableAdvancedPaymentsMetadata)
        try container.encodeIfPresent(enableAdvancedPowerForms, forKey: .enableAdvancedPowerForms)
        try container.encodeIfPresent(enableAdvancedPowerFormsMetadata, forKey: .enableAdvancedPowerFormsMetadata)
        try container.encodeIfPresent(enableAgreementActionsForCLM, forKey: .enableAgreementActionsForCLM)
        try container.encodeIfPresent(enableAgreementActionsForCLMMetadata, forKey: .enableAgreementActionsForCLMMetadata)
        try container.encodeIfPresent(enableAgreementActionsForESign, forKey: .enableAgreementActionsForESign)
        try container.encodeIfPresent(enableAgreementActionsForESignMetadata, forKey: .enableAgreementActionsForESignMetadata)
        try container.encodeIfPresent(enableAutoNav, forKey: .enableAutoNav)
        try container.encodeIfPresent(enableAutoNavMetadata, forKey: .enableAutoNavMetadata)
        try container.encodeIfPresent(enableCalculatedFields, forKey: .enableCalculatedFields)
        try container.encodeIfPresent(enableCalculatedFieldsMetadata, forKey: .enableCalculatedFieldsMetadata)
        try container.encodeIfPresent(enableClickwraps, forKey: .enableClickwraps)
        try container.encodeIfPresent(enableClickwrapsMetadata, forKey: .enableClickwrapsMetadata)
        try container.encodeIfPresent(enableCommentsHistoryDownloadInSigning, forKey: .enableCommentsHistoryDownloadInSigning)
        try container.encodeIfPresent(enableCommentsHistoryDownloadInSigningMetadata, forKey: .enableCommentsHistoryDownloadInSigningMetadata)
        try container.encodeIfPresent(enableCustomerSatisfactionMetricTracking, forKey: .enableCustomerSatisfactionMetricTracking)
        try container.encodeIfPresent(enableCustomerSatisfactionMetricTrackingMetadata, forKey: .enableCustomerSatisfactionMetricTrackingMetadata)
        try container.encodeIfPresent(enableDSPro, forKey: .enableDSPro)
        try container.encodeIfPresent(enableDSProMetadata, forKey: .enableDSProMetadata)
        try container.encodeIfPresent(enableEnvelopeStampingByAccountAdmin, forKey: .enableEnvelopeStampingByAccountAdmin)
        try container.encodeIfPresent(enableEnvelopeStampingByAccountAdminMetadata, forKey: .enableEnvelopeStampingByAccountAdminMetadata)
        try container.encodeIfPresent(enableEnvelopeStampingByDSAdmin, forKey: .enableEnvelopeStampingByDSAdmin)
        try container.encodeIfPresent(enableEnvelopeStampingByDSAdminMetadata, forKey: .enableEnvelopeStampingByDSAdminMetadata)
        try container.encodeIfPresent(enableInBrowserEditor, forKey: .enableInBrowserEditor)
        try container.encodeIfPresent(enableInBrowserEditorMetadata, forKey: .enableInBrowserEditorMetadata)
        try container.encodeIfPresent(enablePaymentProcessing, forKey: .enablePaymentProcessing)
        try container.encodeIfPresent(enablePaymentProcessingMetadata, forKey: .enablePaymentProcessingMetadata)
        try container.encodeIfPresent(enablePowerForm, forKey: .enablePowerForm)
        try container.encodeIfPresent(enablePowerFormDirect, forKey: .enablePowerFormDirect)
        try container.encodeIfPresent(enablePowerFormDirectMetadata, forKey: .enablePowerFormDirectMetadata)
        try container.encodeIfPresent(enablePowerFormMetadata, forKey: .enablePowerFormMetadata)
        try container.encodeIfPresent(enableRecipientDomainValidation, forKey: .enableRecipientDomainValidation)
        try container.encodeIfPresent(enableRecipientDomainValidationMetadata, forKey: .enableRecipientDomainValidationMetadata)
        try container.encodeIfPresent(enableReportLinks, forKey: .enableReportLinks)
        try container.encodeIfPresent(enableReportLinksMetadata, forKey: .enableReportLinksMetadata)
        try container.encodeIfPresent(enableRequireSignOnPaper, forKey: .enableRequireSignOnPaper)
        try container.encodeIfPresent(enableRequireSignOnPaperMetadata, forKey: .enableRequireSignOnPaperMetadata)
        try container.encodeIfPresent(enableReservedDomain, forKey: .enableReservedDomain)
        try container.encodeIfPresent(enableReservedDomainMetadata, forKey: .enableReservedDomainMetadata)
        try container.encodeIfPresent(enableResponsiveSigning, forKey: .enableResponsiveSigning)
        try container.encodeIfPresent(enableResponsiveSigningMetadata, forKey: .enableResponsiveSigningMetadata)
        try container.encodeIfPresent(enableScheduledRelease, forKey: .enableScheduledRelease)
        try container.encodeIfPresent(enableScheduledReleaseMetadata, forKey: .enableScheduledReleaseMetadata)
        try container.encodeIfPresent(enableSearchUI, forKey: .enableSearchUI)
        try container.encodeIfPresent(enableSearchUIMetadata, forKey: .enableSearchUIMetadata)
        try container.encodeIfPresent(enableSendingTagsFontSettings, forKey: .enableSendingTagsFontSettings)
        try container.encodeIfPresent(enableSendingTagsFontSettingsMetadata, forKey: .enableSendingTagsFontSettingsMetadata)
        try container.encodeIfPresent(enableSendToAgent, forKey: .enableSendToAgent)
        try container.encodeIfPresent(enableSendToAgentMetadata, forKey: .enableSendToAgentMetadata)
        try container.encodeIfPresent(enableSendToIntermediary, forKey: .enableSendToIntermediary)
        try container.encodeIfPresent(enableSendToIntermediaryMetadata, forKey: .enableSendToIntermediaryMetadata)
        try container.encodeIfPresent(enableSendToManage, forKey: .enableSendToManage)
        try container.encodeIfPresent(enableSendToManageMetadata, forKey: .enableSendToManageMetadata)
        try container.encodeIfPresent(enableSequentialSigningAPI, forKey: .enableSequentialSigningAPI)
        try container.encodeIfPresent(enableSequentialSigningAPIMetadata, forKey: .enableSequentialSigningAPIMetadata)
        try container.encodeIfPresent(enableSequentialSigningUI, forKey: .enableSequentialSigningUI)
        try container.encodeIfPresent(enableSequentialSigningUIMetadata, forKey: .enableSequentialSigningUIMetadata)
        try container.encodeIfPresent(enableSignerAttachments, forKey: .enableSignerAttachments)
        try container.encodeIfPresent(enableSignerAttachmentsMetadata, forKey: .enableSignerAttachmentsMetadata)
        try container.encodeIfPresent(enableSigningExtensionComments, forKey: .enableSigningExtensionComments)
        try container.encodeIfPresent(enableSigningExtensionCommentsMetadata, forKey: .enableSigningExtensionCommentsMetadata)
        try container.encodeIfPresent(enableSigningExtensionConversations, forKey: .enableSigningExtensionConversations)
        try container.encodeIfPresent(enableSigningExtensionConversationsMetadata, forKey: .enableSigningExtensionConversationsMetadata)
        try container.encodeIfPresent(enableSigningOrderSettingsForAccount, forKey: .enableSigningOrderSettingsForAccount)
        try container.encodeIfPresent(enableSigningOrderSettingsForAccountMetadata, forKey: .enableSigningOrderSettingsForAccountMetadata)
        try container.encodeIfPresent(enableSignOnPaper, forKey: .enableSignOnPaper)
        try container.encodeIfPresent(enableSignOnPaperMetadata, forKey: .enableSignOnPaperMetadata)
        try container.encodeIfPresent(enableSignOnPaperOverride, forKey: .enableSignOnPaperOverride)
        try container.encodeIfPresent(enableSignOnPaperOverrideMetadata, forKey: .enableSignOnPaperOverrideMetadata)
        try container.encodeIfPresent(enableSignWithNotary, forKey: .enableSignWithNotary)
        try container.encodeIfPresent(enableSignWithNotaryMetadata, forKey: .enableSignWithNotaryMetadata)
        try container.encodeIfPresent(enableSmartContracts, forKey: .enableSmartContracts)
        try container.encodeIfPresent(enableSmartContractsMetadata, forKey: .enableSmartContractsMetadata)
        try container.encodeIfPresent(enableSMSAuthentication, forKey: .enableSMSAuthentication)
        try container.encodeIfPresent(enableSMSAuthenticationMetadata, forKey: .enableSMSAuthenticationMetadata)
        try container.encodeIfPresent(enableSocialIdLogin, forKey: .enableSocialIdLogin)
        try container.encodeIfPresent(enableSocialIdLoginMetadata, forKey: .enableSocialIdLoginMetadata)
        try container.encodeIfPresent(enableStrikeThrough, forKey: .enableStrikeThrough)
        try container.encodeIfPresent(enableStrikeThroughMetadata, forKey: .enableStrikeThroughMetadata)
        try container.encodeIfPresent(enableTransactionPoint, forKey: .enableTransactionPoint)
        try container.encodeIfPresent(enableTransactionPointMetadata, forKey: .enableTransactionPointMetadata)
        try container.encodeIfPresent(enableVaulting, forKey: .enableVaulting)
        try container.encodeIfPresent(enableVaultingMetadata, forKey: .enableVaultingMetadata)
        try container.encodeIfPresent(enableWitnessing, forKey: .enableWitnessing)
        try container.encodeIfPresent(enableWitnessingMetadata, forKey: .enableWitnessingMetadata)
        try container.encodeIfPresent(enforceTemplateNameUniqueness, forKey: .enforceTemplateNameUniqueness)
        try container.encodeIfPresent(enforceTemplateNameUniquenessMetadata, forKey: .enforceTemplateNameUniquenessMetadata)
        try container.encodeIfPresent(envelopeIntegrationAllowed, forKey: .envelopeIntegrationAllowed)
        try container.encodeIfPresent(envelopeIntegrationAllowedMetadata, forKey: .envelopeIntegrationAllowedMetadata)
        try container.encodeIfPresent(envelopeIntegrationEnabled, forKey: .envelopeIntegrationEnabled)
        try container.encodeIfPresent(envelopeIntegrationEnabledMetadata, forKey: .envelopeIntegrationEnabledMetadata)
        try container.encodeIfPresent(envelopeStampingDefaultValue, forKey: .envelopeStampingDefaultValue)
        try container.encodeIfPresent(envelopeStampingDefaultValueMetadata, forKey: .envelopeStampingDefaultValueMetadata)
        try container.encodeIfPresent(expressSend, forKey: .expressSend)
        try container.encodeIfPresent(expressSendAllowTabs, forKey: .expressSendAllowTabs)
        try container.encodeIfPresent(expressSendAllowTabsMetadata, forKey: .expressSendAllowTabsMetadata)
        try container.encodeIfPresent(expressSendMetadata, forKey: .expressSendMetadata)
        try container.encodeIfPresent(externalDocumentSources, forKey: .externalDocumentSources)
        try container.encodeIfPresent(externalSignaturePadType, forKey: .externalSignaturePadType)
        try container.encodeIfPresent(externalSignaturePadTypeMetadata, forKey: .externalSignaturePadTypeMetadata)
        try container.encodeIfPresent(faxOutEnabled, forKey: .faxOutEnabled)
        try container.encodeIfPresent(faxOutEnabledMetadata, forKey: .faxOutEnabledMetadata)
        try container.encodeIfPresent(guidedFormsHtmlAllowed, forKey: .guidedFormsHtmlAllowed)
        try container.encodeIfPresent(guidedFormsHtmlAllowedMetadata, forKey: .guidedFormsHtmlAllowedMetadata)
        try container.encodeIfPresent(hideAccountAddressInCoC, forKey: .hideAccountAddressInCoC)
        try container.encodeIfPresent(hideAccountAddressInCoCMetadata, forKey: .hideAccountAddressInCoCMetadata)
        try container.encodeIfPresent(hidePricing, forKey: .hidePricing)
        try container.encodeIfPresent(hidePricingMetadata, forKey: .hidePricingMetadata)
        try container.encodeIfPresent(idCheckConfigurations, forKey: .idCheckConfigurations)
        try container.encodeIfPresent(idCheckExpire, forKey: .idCheckExpire)
        try container.encodeIfPresent(idCheckExpireDays, forKey: .idCheckExpireDays)
        try container.encodeIfPresent(idCheckExpireDaysMetadata, forKey: .idCheckExpireDaysMetadata)
        try container.encodeIfPresent(idCheckExpireMetadata, forKey: .idCheckExpireMetadata)
        try container.encodeIfPresent(idCheckExpireMinutes, forKey: .idCheckExpireMinutes)
        try container.encodeIfPresent(idCheckExpireMinutesMetadata, forKey: .idCheckExpireMinutesMetadata)
        try container.encodeIfPresent(idCheckRequired, forKey: .idCheckRequired)
        try container.encodeIfPresent(idCheckRequiredMetadata, forKey: .idCheckRequiredMetadata)
        try container.encodeIfPresent(identityVerification, forKey: .identityVerification)
        try container.encodeIfPresent(identityVerificationMetadata, forKey: .identityVerificationMetadata)
        try container.encodeIfPresent(ignoreErrorIfAnchorTabNotFound, forKey: .ignoreErrorIfAnchorTabNotFound)
        try container.encodeIfPresent(ignoreErrorIfAnchorTabNotFoundMetadataEnabled, forKey: .ignoreErrorIfAnchorTabNotFoundMetadataEnabled)
        try container.encodeIfPresent(inPersonIDCheckQuestion, forKey: .inPersonIDCheckQuestion)
        try container.encodeIfPresent(inPersonIDCheckQuestionMetadata, forKey: .inPersonIDCheckQuestionMetadata)
        try container.encodeIfPresent(inPersonSigningEnabled, forKey: .inPersonSigningEnabled)
        try container.encodeIfPresent(inPersonSigningEnabledMetadata, forKey: .inPersonSigningEnabledMetadata)
        try container.encodeIfPresent(inSessionEnabled, forKey: .inSessionEnabled)
        try container.encodeIfPresent(inSessionEnabledMetadata, forKey: .inSessionEnabledMetadata)
        try container.encodeIfPresent(inSessionSuppressEmails, forKey: .inSessionSuppressEmails)
        try container.encodeIfPresent(inSessionSuppressEmailsMetadata, forKey: .inSessionSuppressEmailsMetadata)
        try container.encodeIfPresent(maximumSigningGroups, forKey: .maximumSigningGroups)
        try container.encodeIfPresent(maximumSigningGroupsMetadata, forKey: .maximumSigningGroupsMetadata)
        try container.encodeIfPresent(maximumUsersPerSigningGroup, forKey: .maximumUsersPerSigningGroup)
        try container.encodeIfPresent(maximumUsersPerSigningGroupMetadata, forKey: .maximumUsersPerSigningGroupMetadata)
        try container.encodeIfPresent(maxNumberOfCustomStamps, forKey: .maxNumberOfCustomStamps)
        try container.encodeIfPresent(mobileSessionTimeout, forKey: .mobileSessionTimeout)
        try container.encodeIfPresent(mobileSessionTimeoutMetadata, forKey: .mobileSessionTimeoutMetadata)
        try container.encodeIfPresent(numberOfActiveCustomStamps, forKey: .numberOfActiveCustomStamps)
        try container.encodeIfPresent(optInMobileSigningV02, forKey: .optInMobileSigningV02)
        try container.encodeIfPresent(optInMobileSigningV02Metadata, forKey: .optInMobileSigningV02Metadata)
        try container.encodeIfPresent(optOutAutoNavTextAndTabColorUpdates, forKey: .optOutAutoNavTextAndTabColorUpdates)
        try container.encodeIfPresent(optOutAutoNavTextAndTabColorUpdatesMetadata, forKey: .optOutAutoNavTextAndTabColorUpdatesMetadata)
        try container.encodeIfPresent(optOutNewPlatformSeal, forKey: .optOutNewPlatformSeal)
        try container.encodeIfPresent(optOutNewPlatformSealPlatformMetadata, forKey: .optOutNewPlatformSealPlatformMetadata)
        try container.encodeIfPresent(phoneAuthRecipientMayProvidePhoneNumber, forKey: .phoneAuthRecipientMayProvidePhoneNumber)
        try container.encodeIfPresent(phoneAuthRecipientMayProvidePhoneNumberMetadata, forKey: .phoneAuthRecipientMayProvidePhoneNumberMetadata)
        try container.encodeIfPresent(pkiSignDownloadedPDFDocs, forKey: .pkiSignDownloadedPDFDocs)
        try container.encodeIfPresent(pkiSignDownloadedPDFDocsMetadata, forKey: .pkiSignDownloadedPDFDocsMetadata)
        try container.encodeIfPresent(recipientsCanSignOffline, forKey: .recipientsCanSignOffline)
        try container.encodeIfPresent(recipientsCanSignOfflineMetadata, forKey: .recipientsCanSignOfflineMetadata)
        try container.encodeIfPresent(recipientSigningAutoNavigationControl, forKey: .recipientSigningAutoNavigationControl)
        try container.encodeIfPresent(recipientSigningAutoNavigationControlMetadata, forKey: .recipientSigningAutoNavigationControlMetadata)
        try container.encodeIfPresent(require21CFRpt11Compliance, forKey: .require21CFRpt11Compliance)
        try container.encodeIfPresent(require21CFRpt11ComplianceMetadata, forKey: .require21CFRpt11ComplianceMetadata)
        try container.encodeIfPresent(requireDeclineReason, forKey: .requireDeclineReason)
        try container.encodeIfPresent(requireDeclineReasonMetadata, forKey: .requireDeclineReasonMetadata)
        try container.encodeIfPresent(requireExternalUserManagement, forKey: .requireExternalUserManagement)
        try container.encodeIfPresent(requireExternalUserManagementMetadata, forKey: .requireExternalUserManagementMetadata)
        try container.encodeIfPresent(requireSignerCertificateType, forKey: .requireSignerCertificateType)
        try container.encodeIfPresent(requireSignerCertificateTypeMetadata, forKey: .requireSignerCertificateTypeMetadata)
        try container.encodeIfPresent(rsaVeridAccountName, forKey: .rsaVeridAccountName)
        try container.encodeIfPresent(rsaVeridPassword, forKey: .rsaVeridPassword)
        try container.encodeIfPresent(rsaVeridRuleset, forKey: .rsaVeridRuleset)
        try container.encodeIfPresent(rsaVeridUserId, forKey: .rsaVeridUserId)
        try container.encodeIfPresent(selfSignedRecipientEmailDocument, forKey: .selfSignedRecipientEmailDocument)
        try container.encodeIfPresent(selfSignedRecipientEmailDocumentMetadata, forKey: .selfSignedRecipientEmailDocumentMetadata)
        try container.encodeIfPresent(selfSignedRecipientEmailDocumentUserOverride, forKey: .selfSignedRecipientEmailDocumentUserOverride)
        try container.encodeIfPresent(selfSignedRecipientEmailDocumentUserOverrideMetadata, forKey: .selfSignedRecipientEmailDocumentUserOverrideMetadata)
        try container.encodeIfPresent(senderCanSignInEachLocation, forKey: .senderCanSignInEachLocation)
        try container.encodeIfPresent(senderCanSignInEachLocationMetadata, forKey: .senderCanSignInEachLocationMetadata)
        try container.encodeIfPresent(senderMustAuthenticateSigning, forKey: .senderMustAuthenticateSigning)
        try container.encodeIfPresent(senderMustAuthenticateSigningMetadata, forKey: .senderMustAuthenticateSigningMetadata)
        try container.encodeIfPresent(sendingTagsFontColor, forKey: .sendingTagsFontColor)
        try container.encodeIfPresent(sendingTagsFontColorMetadata, forKey: .sendingTagsFontColorMetadata)
        try container.encodeIfPresent(sendingTagsFontName, forKey: .sendingTagsFontName)
        try container.encodeIfPresent(sendingTagsFontNameMetadata, forKey: .sendingTagsFontNameMetadata)
        try container.encodeIfPresent(sendingTagsFontSize, forKey: .sendingTagsFontSize)
        try container.encodeIfPresent(sendingTagsFontSizeMetadata, forKey: .sendingTagsFontSizeMetadata)
        try container.encodeIfPresent(sendToCertifiedDeliveryEnabled, forKey: .sendToCertifiedDeliveryEnabled)
        try container.encodeIfPresent(sendToCertifiedDeliveryEnabledMetadata, forKey: .sendToCertifiedDeliveryEnabledMetadata)
        try container.encodeIfPresent(sessionTimeout, forKey: .sessionTimeout)
        try container.encodeIfPresent(sessionTimeoutMetadata, forKey: .sessionTimeoutMetadata)
        try container.encodeIfPresent(setRecipEmailLang, forKey: .setRecipEmailLang)
        try container.encodeIfPresent(setRecipEmailLangMetadata, forKey: .setRecipEmailLangMetadata)
        try container.encodeIfPresent(setRecipSignLang, forKey: .setRecipSignLang)
        try container.encodeIfPresent(setRecipSignLangMetadata, forKey: .setRecipSignLangMetadata)
        try container.encodeIfPresent(sharedTemplateFolders, forKey: .sharedTemplateFolders)
        try container.encodeIfPresent(sharedTemplateFoldersMetadata, forKey: .sharedTemplateFoldersMetadata)
        try container.encodeIfPresent(showCompleteDialogInEmbeddedSession, forKey: .showCompleteDialogInEmbeddedSession)
        try container.encodeIfPresent(showCompleteDialogInEmbeddedSessionMetadata, forKey: .showCompleteDialogInEmbeddedSessionMetadata)
        try container.encodeIfPresent(showConditionalRoutingOnSend, forKey: .showConditionalRoutingOnSend)
        try container.encodeIfPresent(showConditionalRoutingOnSendMetadata, forKey: .showConditionalRoutingOnSendMetadata)
        try container.encodeIfPresent(showInitialConditionalFields, forKey: .showInitialConditionalFields)
        try container.encodeIfPresent(showInitialConditionalFieldsMetadata, forKey: .showInitialConditionalFieldsMetadata)
        try container.encodeIfPresent(showLocalizedWatermarks, forKey: .showLocalizedWatermarks)
        try container.encodeIfPresent(showLocalizedWatermarksMetadata, forKey: .showLocalizedWatermarksMetadata)
        try container.encodeIfPresent(showTutorials, forKey: .showTutorials)
        try container.encodeIfPresent(showTutorialsMetadata, forKey: .showTutorialsMetadata)
        try container.encodeIfPresent(signatureProviders, forKey: .signatureProviders)
        try container.encodeIfPresent(signatureProvidersMetadata, forKey: .signatureProvidersMetadata)
        try container.encodeIfPresent(signDateFormat, forKey: .signDateFormat)
        try container.encodeIfPresent(signDateFormatMetadata, forKey: .signDateFormatMetadata)
        try container.encodeIfPresent(signerAttachCertificateToEnvelopePDF, forKey: .signerAttachCertificateToEnvelopePDF)
        try container.encodeIfPresent(signerAttachCertificateToEnvelopePDFMetadata, forKey: .signerAttachCertificateToEnvelopePDFMetadata)
        try container.encodeIfPresent(signerAttachConcat, forKey: .signerAttachConcat)
        try container.encodeIfPresent(signerAttachConcatMetadata, forKey: .signerAttachConcatMetadata)
        try container.encodeIfPresent(signerCanCreateAccount, forKey: .signerCanCreateAccount)
        try container.encodeIfPresent(signerCanCreateAccountMetadata, forKey: .signerCanCreateAccountMetadata)
        try container.encodeIfPresent(signerCanSignOnMobile, forKey: .signerCanSignOnMobile)
        try container.encodeIfPresent(signerCanSignOnMobileMetadata, forKey: .signerCanSignOnMobileMetadata)
        try container.encodeIfPresent(signerInSessionUseEnvelopeCompleteEmail, forKey: .signerInSessionUseEnvelopeCompleteEmail)
        try container.encodeIfPresent(signerInSessionUseEnvelopeCompleteEmailMetadata, forKey: .signerInSessionUseEnvelopeCompleteEmailMetadata)
        try container.encodeIfPresent(signerLoginRequirements, forKey: .signerLoginRequirements)
        try container.encodeIfPresent(signerLoginRequirementsMetadata, forKey: .signerLoginRequirementsMetadata)
        try container.encodeIfPresent(signerMustHaveAccount, forKey: .signerMustHaveAccount)
        try container.encodeIfPresent(signerMustHaveAccountMetadata, forKey: .signerMustHaveAccountMetadata)
        try container.encodeIfPresent(signerMustLoginToSign, forKey: .signerMustLoginToSign)
        try container.encodeIfPresent(signerMustLoginToSignMetadata, forKey: .signerMustLoginToSignMetadata)
        try container.encodeIfPresent(signerShowSecureFieldInitialValues, forKey: .signerShowSecureFieldInitialValues)
        try container.encodeIfPresent(signerShowSecureFieldInitialValuesMetadata, forKey: .signerShowSecureFieldInitialValuesMetadata)
        try container.encodeIfPresent(signingSessionTimeout, forKey: .signingSessionTimeout)
        try container.encodeIfPresent(signingSessionTimeoutMetadata, forKey: .signingSessionTimeoutMetadata)
        try container.encodeIfPresent(signingUiVersion, forKey: .signingUiVersion)
        try container.encodeIfPresent(signingUiVersionMetadata, forKey: .signingUiVersionMetadata)
        try container.encodeIfPresent(signTimeFormat, forKey: .signTimeFormat)
        try container.encodeIfPresent(signTimeFormatMetadata, forKey: .signTimeFormatMetadata)
        try container.encodeIfPresent(signTimeShowAmPm, forKey: .signTimeShowAmPm)
        try container.encodeIfPresent(signTimeShowAmPmMetadata, forKey: .signTimeShowAmPmMetadata)
        try container.encodeIfPresent(simplifiedSendingEnabled, forKey: .simplifiedSendingEnabled)
        try container.encodeIfPresent(simplifiedSendingEnabledMetadata, forKey: .simplifiedSendingEnabledMetadata)
        try container.encodeIfPresent(singleSignOnEnabled, forKey: .singleSignOnEnabled)
        try container.encodeIfPresent(singleSignOnEnabledMetadata, forKey: .singleSignOnEnabledMetadata)
        try container.encodeIfPresent(skipAuthCompletedEnvelopes, forKey: .skipAuthCompletedEnvelopes)
        try container.encodeIfPresent(skipAuthCompletedEnvelopesMetadata, forKey: .skipAuthCompletedEnvelopesMetadata)
        try container.encodeIfPresent(socialIdRecipAuth, forKey: .socialIdRecipAuth)
        try container.encodeIfPresent(socialIdRecipAuthMetadata, forKey: .socialIdRecipAuthMetadata)
        try container.encodeIfPresent(specifyDocumentVisibility, forKey: .specifyDocumentVisibility)
        try container.encodeIfPresent(specifyDocumentVisibilityMetadata, forKey: .specifyDocumentVisibilityMetadata)
        try container.encodeIfPresent(startInAdvancedCorrect, forKey: .startInAdvancedCorrect)
        try container.encodeIfPresent(startInAdvancedCorrectMetadata, forKey: .startInAdvancedCorrectMetadata)
        try container.encodeIfPresent(supplementalDocumentsMustAccept, forKey: .supplementalDocumentsMustAccept)
        try container.encodeIfPresent(supplementalDocumentsMustAcceptMetadata, forKey: .supplementalDocumentsMustAcceptMetadata)
        try container.encodeIfPresent(supplementalDocumentsMustRead, forKey: .supplementalDocumentsMustRead)
        try container.encodeIfPresent(supplementalDocumentsMustReadMetadata, forKey: .supplementalDocumentsMustReadMetadata)
        try container.encodeIfPresent(supplementalDocumentsMustView, forKey: .supplementalDocumentsMustView)
        try container.encodeIfPresent(supplementalDocumentsMustViewMetadata, forKey: .supplementalDocumentsMustViewMetadata)
        try container.encodeIfPresent(suppressCertificateEnforcement, forKey: .suppressCertificateEnforcement)
        try container.encodeIfPresent(suppressCertificateEnforcementMetadata, forKey: .suppressCertificateEnforcementMetadata)
        try container.encodeIfPresent(tabAccountSettings, forKey: .tabAccountSettings)
        try container.encodeIfPresent(timezoneOffsetAPI, forKey: .timezoneOffsetAPI)
        try container.encodeIfPresent(timezoneOffsetAPIMetadata, forKey: .timezoneOffsetAPIMetadata)
        try container.encodeIfPresent(timezoneOffsetUI, forKey: .timezoneOffsetUI)
        try container.encodeIfPresent(timezoneOffsetUIMetadata, forKey: .timezoneOffsetUIMetadata)
        try container.encodeIfPresent(universalSignatureOptIn, forKey: .universalSignatureOptIn)
        try container.encodeIfPresent(useAccountLevelEmail, forKey: .useAccountLevelEmail)
        try container.encodeIfPresent(useAccountLevelEmailMetadata, forKey: .useAccountLevelEmailMetadata)
        try container.encodeIfPresent(useConsumerDisclosure, forKey: .useConsumerDisclosure)
        try container.encodeIfPresent(useConsumerDisclosureMetadata, forKey: .useConsumerDisclosureMetadata)
        try container.encodeIfPresent(useConsumerDisclosureWithinAccount, forKey: .useConsumerDisclosureWithinAccount)
        try container.encodeIfPresent(useConsumerDisclosureWithinAccountMetadata, forKey: .useConsumerDisclosureWithinAccountMetadata)
        try container.encodeIfPresent(useDerivedKeys, forKey: .useDerivedKeys)
        try container.encodeIfPresent(useDerivedKeysMetadata, forKey: .useDerivedKeysMetadata)
        try container.encodeIfPresent(useDocuSignExpressSignerCertificate, forKey: .useDocuSignExpressSignerCertificate)
        try container.encodeIfPresent(useDocuSignExpressSignerCertificateMetadata, forKey: .useDocuSignExpressSignerCertificateMetadata)
        try container.encodeIfPresent(useMultiAppGroupsData, forKey: .useMultiAppGroupsData)
        try container.encodeIfPresent(useMultiAppGroupsDataMetadata, forKey: .useMultiAppGroupsDataMetadata)
        try container.encodeIfPresent(useNewBlobForPdf, forKey: .useNewBlobForPdf)
        try container.encodeIfPresent(useNewBlobForPdfMetadata, forKey: .useNewBlobForPdfMetadata)
        try container.encodeIfPresent(useSAFESignerCertificates, forKey: .useSAFESignerCertificates)
        try container.encodeIfPresent(useSAFESignerCertificatesMetadata, forKey: .useSAFESignerCertificatesMetadata)
        try container.encodeIfPresent(usesAPI, forKey: .usesAPI)
        try container.encodeIfPresent(usesAPIMetadata, forKey: .usesAPIMetadata)
        try container.encodeIfPresent(useSignatureProviderPlatform, forKey: .useSignatureProviderPlatform)
        try container.encodeIfPresent(useSignatureProviderPlatformMetadata, forKey: .useSignatureProviderPlatformMetadata)
        try container.encodeIfPresent(validationsAllowed, forKey: .validationsAllowed)
        try container.encodeIfPresent(validationsAllowedMetadata, forKey: .validationsAllowedMetadata)
        try container.encodeIfPresent(validationsBrand, forKey: .validationsBrand)
        try container.encodeIfPresent(validationsBrandMetadata, forKey: .validationsBrandMetadata)
        try container.encodeIfPresent(validationsCadence, forKey: .validationsCadence)
        try container.encodeIfPresent(validationsCadenceMetadata, forKey: .validationsCadenceMetadata)
        try container.encodeIfPresent(validationsEnabled, forKey: .validationsEnabled)
        try container.encodeIfPresent(validationsEnabledMetadata, forKey: .validationsEnabledMetadata)
        try container.encodeIfPresent(validationsReport, forKey: .validationsReport)
        try container.encodeIfPresent(validationsReportMetadata, forKey: .validationsReportMetadata)
        try container.encodeIfPresent(waterMarkEnabled, forKey: .waterMarkEnabled)
        try container.encodeIfPresent(waterMarkEnabledMetadata, forKey: .waterMarkEnabledMetadata)
        try container.encodeIfPresent(writeReminderToEnvelopeHistory, forKey: .writeReminderToEnvelopeHistory)
        try container.encodeIfPresent(writeReminderToEnvelopeHistoryMetadata, forKey: .writeReminderToEnvelopeHistoryMetadata)
        try container.encodeIfPresent(wurflMinAllowableScreenSize, forKey: .wurflMinAllowableScreenSize)
        try container.encodeIfPresent(wurflMinAllowableScreenSizeMetadata, forKey: .wurflMinAllowableScreenSizeMetadata)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accessCodeFormat = try container.decodeIfPresent(AccessCodeFormat.self, forKey: .accessCodeFormat)
        accountDateTimeFormat = try container.decodeIfPresent(String.self, forKey: .accountDateTimeFormat)
        accountDateTimeFormatMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .accountDateTimeFormatMetadata)
        accountDefaultLanguage = try container.decodeIfPresent(String.self, forKey: .accountDefaultLanguage)
        accountDefaultLanguageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .accountDefaultLanguageMetadata)
        accountName = try container.decodeIfPresent(String.self, forKey: .accountName)
        accountNameMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .accountNameMetadata)
        accountNotification = try container.decodeIfPresent(AccountNotification.self, forKey: .accountNotification)
        accountUISettings = try container.decodeIfPresent(AccountUISettings.self, forKey: .accountUISettings)
        adoptSigConfig = try container.decodeIfPresent(String.self, forKey: .adoptSigConfig)
        adoptSigConfigMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .adoptSigConfigMetadata)
        advancedCorrect = try container.decodeIfPresent(String.self, forKey: .advancedCorrect)
        advancedCorrectMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .advancedCorrectMetadata)
        allowAccessCodeFormat = try container.decodeIfPresent(String.self, forKey: .allowAccessCodeFormat)
        allowAccessCodeFormatMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAccessCodeFormatMetadata)
        allowAccountManagementGranular = try container.decodeIfPresent(String.self, forKey: .allowAccountManagementGranular)
        allowAccountManagementGranularMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAccountManagementGranularMetadata)
        allowAccountMemberNameChange = try container.decodeIfPresent(String.self, forKey: .allowAccountMemberNameChange)
        allowAccountMemberNameChangeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAccountMemberNameChangeMetadata)
        allowAdvancedRecipientRoutingConditional = try container.decodeIfPresent(String.self, forKey: .allowAdvancedRecipientRoutingConditional)
        allowAdvancedRecipientRoutingConditionalMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAdvancedRecipientRoutingConditionalMetadata)
        allowAgentNameEmailEdit = try container.decodeIfPresent(String.self, forKey: .allowAgentNameEmailEdit)
        allowAgentNameEmailEditMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAgentNameEmailEditMetadata)
        allowAgreementActions = try container.decodeIfPresent(String.self, forKey: .allowAgreementActions)
        allowAgreementActionsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAgreementActionsMetadata)
        allowAutoNavSettings = try container.decodeIfPresent(String.self, forKey: .allowAutoNavSettings)
        allowAutoNavSettingsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAutoNavSettingsMetadata)
        allowAutoTagging = try container.decodeIfPresent(String.self, forKey: .allowAutoTagging)
        allowAutoTaggingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowAutoTaggingMetadata)
        allowBulkSend = try container.decodeIfPresent(String.self, forKey: .allowBulkSend)
        allowBulkSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowBulkSendMetadata)
        allowCDWithdraw = try container.decodeIfPresent(String.self, forKey: .allowCDWithdraw)
        allowCDWithdrawMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowCDWithdrawMetadata)
        allowConnectHttpListenerConfigs = try container.decodeIfPresent(String.self, forKey: .allowConnectHttpListenerConfigs)
        allowConnectSendFinishLater = try container.decodeIfPresent(String.self, forKey: .allowConnectSendFinishLater)
        allowConnectSendFinishLaterMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowConnectSendFinishLaterMetadata)
        allowConnectUnifiedPayloadUI = try container.decodeIfPresent(String.self, forKey: .allowConnectUnifiedPayloadUI)
        allowConsumerDisclosureOverride = try container.decodeIfPresent(String.self, forKey: .allowConsumerDisclosureOverride)
        allowConsumerDisclosureOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowConsumerDisclosureOverrideMetadata)
        allowDataDownload = try container.decodeIfPresent(String.self, forKey: .allowDataDownload)
        allowDataDownloadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowDataDownloadMetadata)
        allowDocumentDisclosures = try container.decodeIfPresent(String.self, forKey: .allowDocumentDisclosures)
        allowDocumentDisclosuresMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowDocumentDisclosuresMetadata)
        allowDocumentsOnSignedEnvelopes = try container.decodeIfPresent(String.self, forKey: .allowDocumentsOnSignedEnvelopes)
        allowDocumentsOnSignedEnvelopesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowDocumentsOnSignedEnvelopesMetadata)
        allowDocumentVisibility = try container.decodeIfPresent(String.self, forKey: .allowDocumentVisibility)
        allowDocumentVisibilityMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowDocumentVisibilityMetadata)
        allowEHankoStamps = try container.decodeIfPresent(String.self, forKey: .allowEHankoStamps)
        allowEHankoStampsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEHankoStampsMetadata)
        allowENoteEOriginal = try container.decodeIfPresent(String.self, forKey: .allowENoteEOriginal)
        allowENoteEOriginalMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowENoteEOriginalMetadata)
        allowEnvelopeCorrect = try container.decodeIfPresent(String.self, forKey: .allowEnvelopeCorrect)
        allowEnvelopeCorrectMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopeCorrectMetadata)
        allowEnvelopeCustodyTransfer = try container.decodeIfPresent(String.self, forKey: .allowEnvelopeCustodyTransfer)
        allowEnvelopeCustodyTransferMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopeCustodyTransferMetadata)
        allowEnvelopeCustomFields = try container.decodeIfPresent(String.self, forKey: .allowEnvelopeCustomFields)
        allowEnvelopeCustomFieldsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopeCustomFieldsMetadata)
        allowEnvelopePublishReporting = try container.decodeIfPresent(String.self, forKey: .allowEnvelopePublishReporting)
        allowEnvelopePublishReportingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopePublishReportingMetadata)
        allowEnvelopeReporting = try container.decodeIfPresent(String.self, forKey: .allowEnvelopeReporting)
        allowEnvelopeReportingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopeReportingMetadata)
        allowExpression = try container.decodeIfPresent(String.self, forKey: .allowExpression)
        allowExpressionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowExpressionMetadata)
        allowExpressSignerCertificate = try container.decodeIfPresent(String.self, forKey: .allowExpressSignerCertificate)
        allowExpressSignerCertificateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowExpressSignerCertificateMetadata)
        allowExtendedSendingResourceFile = try container.decodeIfPresent(String.self, forKey: .allowExtendedSendingResourceFile)
        allowExtendedSendingResourceFileMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowExtendedSendingResourceFileMetadata)
        allowExternalSignaturePad = try container.decodeIfPresent(String.self, forKey: .allowExternalSignaturePad)
        allowExternalSignaturePadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowExternalSignaturePadMetadata)
        allowIDVLevel1 = try container.decodeIfPresent(String.self, forKey: .allowIDVLevel1)
        allowIDVLevel1Metadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowIDVLevel1Metadata)
        allowIDVPlatform = try container.decodeIfPresent(String.self, forKey: .allowIDVPlatform)
        allowIDVPlatformMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowIDVPlatformMetadata)
        allowInPerson = try container.decodeIfPresent(String.self, forKey: .allowInPerson)
        allowInPersonMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowInPersonMetadata)
        allowManagedStamps = try container.decodeIfPresent(String.self, forKey: .allowManagedStamps)
        allowManagedStampsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowManagedStampsMetadata)
        allowMarkup = try container.decodeIfPresent(String.self, forKey: .allowMarkup)
        allowMarkupMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowMarkupMetadata)
        allowMemberTimeZone = try container.decodeIfPresent(String.self, forKey: .allowMemberTimeZone)
        allowMemberTimeZoneMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowMemberTimeZoneMetadata)
        allowMergeFields = try container.decodeIfPresent(String.self, forKey: .allowMergeFields)
        allowMergeFieldsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowMergeFieldsMetadata)
        allowMultipleBrandProfiles = try container.decodeIfPresent(String.self, forKey: .allowMultipleBrandProfiles)
        allowMultipleBrandProfilesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowMultipleBrandProfilesMetadata)
        allowMultipleSignerAttachments = try container.decodeIfPresent(String.self, forKey: .allowMultipleSignerAttachments)
        allowMultipleSignerAttachmentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowMultipleSignerAttachmentsMetadata)
        allowNonUSPhoneAuth = try container.decodeIfPresent(String.self, forKey: .allowNonUSPhoneAuth)
        allowNonUSPhoneAuthMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowNonUSPhoneAuthMetadata)
        allowOcrOfEnvelopeDocuments = try container.decodeIfPresent(String.self, forKey: .allowOcrOfEnvelopeDocuments)
        allowOcrOfEnvelopeDocumentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowOcrOfEnvelopeDocumentsMetadata)
        allowOfflineSigning = try container.decodeIfPresent(String.self, forKey: .allowOfflineSigning)
        allowOfflineSigningMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowOfflineSigningMetadata)
        allowOpenTrustSignerCertificate = try container.decodeIfPresent(String.self, forKey: .allowOpenTrustSignerCertificate)
        allowOpenTrustSignerCertificateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowOpenTrustSignerCertificateMetadata)
        allowOrganizations = try container.decodeIfPresent(String.self, forKey: .allowOrganizations)
        allowOrganizationsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowOrganizationsMetadata)
        allowPaymentProcessing = try container.decodeIfPresent(String.self, forKey: .allowPaymentProcessing)
        allowPaymentProcessingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPaymentProcessingMetadata)
        allowPersonalSignerCertificate = try container.decodeIfPresent(String.self, forKey: .allowPersonalSignerCertificate)
        allowPersonalSignerCertificateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPersonalSignerCertificateMetadata)
        allowPhoneAuthentication = try container.decodeIfPresent(String.self, forKey: .allowPhoneAuthentication)
        allowPhoneAuthenticationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPhoneAuthenticationMetadata)
        allowPhoneAuthOverride = try container.decodeIfPresent(String.self, forKey: .allowPhoneAuthOverride)
        allowPhoneAuthOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPhoneAuthOverrideMetadata)
        allowPrivateSigningGroups = try container.decodeIfPresent(String.self, forKey: .allowPrivateSigningGroups)
        allowPrivateSigningGroupsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPrivateSigningGroupsMetadata)
        allowReminders = try container.decodeIfPresent(String.self, forKey: .allowReminders)
        allowRemindersMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowRemindersMetadata)
        allowRemoteNotary = try container.decodeIfPresent(String.self, forKey: .allowRemoteNotary)
        allowRemoteNotaryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowRemoteNotaryMetadata)
        allowResourceFileBranding = try container.decodeIfPresent(String.self, forKey: .allowResourceFileBranding)
        allowResourceFileBrandingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowResourceFileBrandingMetadata)
        allowSafeBioPharmaSignerCertificate = try container.decodeIfPresent(String.self, forKey: .allowSafeBioPharmaSignerCertificate)
        allowSafeBioPharmaSignerCertificateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSafeBioPharmaSignerCertificateMetadata)
        allowSecurityAppliance = try container.decodeIfPresent(String.self, forKey: .allowSecurityAppliance)
        allowSecurityApplianceMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSecurityApplianceMetadata)
        allowSendToCertifiedDelivery = try container.decodeIfPresent(String.self, forKey: .allowSendToCertifiedDelivery)
        allowSendToCertifiedDeliveryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSendToCertifiedDeliveryMetadata)
        allowSendToIntermediary = try container.decodeIfPresent(String.self, forKey: .allowSendToIntermediary)
        allowSendToIntermediaryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSendToIntermediaryMetadata)
        allowServerTemplates = try container.decodeIfPresent(String.self, forKey: .allowServerTemplates)
        allowServerTemplatesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowServerTemplatesMetadata)
        allowSetEmbeddedRecipientStartURL = try container.decodeIfPresent(String.self, forKey: .allowSetEmbeddedRecipientStartURL)
        allowSetEmbeddedRecipientStartURLMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSetEmbeddedRecipientStartURLMetadata)
        allowSharedTabs = try container.decodeIfPresent(String.self, forKey: .allowSharedTabs)
        allowSharedTabsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSharedTabsMetadata)
        allowSignatureStamps = try container.decodeIfPresent(String.self, forKey: .allowSignatureStamps)
        allowSignatureStampsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSignatureStampsMetadata)
        allowSignDocumentFromHomePage = try container.decodeIfPresent(String.self, forKey: .allowSignDocumentFromHomePage)
        allowSignDocumentFromHomePageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSignDocumentFromHomePageMetadata)
        allowSignerReassign = try container.decodeIfPresent(String.self, forKey: .allowSignerReassign)
        allowSignerReassignMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSignerReassignMetadata)
        allowSignerReassignOverride = try container.decodeIfPresent(String.self, forKey: .allowSignerReassignOverride)
        allowSignerReassignOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSignerReassignOverrideMetadata)
        allowSigningExtensions = try container.decodeIfPresent(String.self, forKey: .allowSigningExtensions)
        allowSigningExtensionsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSigningExtensionsMetadata)
        allowSigningGroups = try container.decodeIfPresent(String.self, forKey: .allowSigningGroups)
        allowSigningGroupsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSigningGroupsMetadata)
        allowSigningRadioDeselect = try container.decodeIfPresent(String.self, forKey: .allowSigningRadioDeselect)
        allowSigningRadioDeselectMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSigningRadioDeselectMetadata)
        allowSignNow = try container.decodeIfPresent(String.self, forKey: .allowSignNow)
        allowSignNowMetadata = try container.decodeIfPresent(String.self, forKey: .allowSignNowMetadata)
        allowSMSDelivery = try container.decodeIfPresent(String.self, forKey: .allowSMSDelivery)
        allowSMSDeliveryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSMSDeliveryMetadata)
        allowSocialIdLogin = try container.decodeIfPresent(String.self, forKey: .allowSocialIdLogin)
        allowSocialIdLoginMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSocialIdLoginMetadata)
        allowSupplementalDocuments = try container.decodeIfPresent(String.self, forKey: .allowSupplementalDocuments)
        allowSupplementalDocumentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSupplementalDocumentsMetadata)
        allowUsersToAccessDirectory = try container.decodeIfPresent(String.self, forKey: .allowUsersToAccessDirectory)
        allowUsersToAccessDirectoryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowUsersToAccessDirectoryMetadata)
        allowValueInsights = try container.decodeIfPresent(String.self, forKey: .allowValueInsights)
        allowValueInsightsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowValueInsightsMetadata)
        anchorPopulationScope = try container.decodeIfPresent(String.self, forKey: .anchorPopulationScope)
        anchorPopulationScopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .anchorPopulationScopeMetadata)
        anchorTagVersionedPlacementEnabled = try container.decodeIfPresent(String.self, forKey: .anchorTagVersionedPlacementEnabled)
        anchorTagVersionedPlacementMetadataEnabled = try container.decodeIfPresent(SettingsMetadata.self, forKey: .anchorTagVersionedPlacementMetadataEnabled)
        attachCompletedEnvelope = try container.decodeIfPresent(String.self, forKey: .attachCompletedEnvelope)
        attachCompletedEnvelopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .attachCompletedEnvelopeMetadata)
        authenticationCheck = try container.decodeIfPresent(String.self, forKey: .authenticationCheck)
        authenticationCheckMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .authenticationCheckMetadata)
        autoNavRule = try container.decodeIfPresent(String.self, forKey: .autoNavRule)
        autoNavRuleMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .autoNavRuleMetadata)
        autoProvisionSignerAccount = try container.decodeIfPresent(String.self, forKey: .autoProvisionSignerAccount)
        autoProvisionSignerAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .autoProvisionSignerAccountMetadata)
        bccEmailArchive = try container.decodeIfPresent(String.self, forKey: .bccEmailArchive)
        bccEmailArchiveMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .bccEmailArchiveMetadata)
        betaSwitchConfiguration = try container.decodeIfPresent(String.self, forKey: .betaSwitchConfiguration)
        betaSwitchConfigurationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .betaSwitchConfigurationMetadata)
        billingAddress = try container.decodeIfPresent(AddressInformation.self, forKey: .billingAddress)
        billingAddressMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .billingAddressMetadata)
        bulkSend = try container.decodeIfPresent(String.self, forKey: .bulkSend)
        bulkSendMaxCopiesInBatch = try container.decodeIfPresent(String.self, forKey: .bulkSendMaxCopiesInBatch)
        bulkSendMaxUnprocessedEnvelopesCount = try container.decodeIfPresent(String.self, forKey: .bulkSendMaxUnprocessedEnvelopesCount)
        bulkSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .bulkSendMetadata)
        canSelfBrandSend = try container.decodeIfPresent(String.self, forKey: .canSelfBrandSend)
        canSelfBrandSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canSelfBrandSendMetadata)
        canSelfBrandSign = try container.decodeIfPresent(String.self, forKey: .canSelfBrandSign)
        canSelfBrandSignMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canSelfBrandSignMetadata)
        canUseSalesforceOAuth = try container.decodeIfPresent(String.self, forKey: .canUseSalesforceOAuth)
        canUseSalesforceOAuthMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canUseSalesforceOAuthMetadata)
        captureVoiceRecording = try container.decodeIfPresent(String.self, forKey: .captureVoiceRecording)
        captureVoiceRecordingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .captureVoiceRecordingMetadata)
        cfrUseWideImage = try container.decodeIfPresent(String.self, forKey: .cfrUseWideImage)
        cfrUseWideImageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .cfrUseWideImageMetadata)
        checkForMultipleAdminsOnAccount = try container.decodeIfPresent(String.self, forKey: .checkForMultipleAdminsOnAccount)
        checkForMultipleAdminsOnAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .checkForMultipleAdminsOnAccountMetadata)
        chromeSignatureEnabled = try container.decodeIfPresent(String.self, forKey: .chromeSignatureEnabled)
        chromeSignatureEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .chromeSignatureEnabledMetadata)
        commentEmailShowMessageText = try container.decodeIfPresent(String.self, forKey: .commentEmailShowMessageText)
        commentEmailShowMessageTextMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .commentEmailShowMessageTextMetadata)
        commentsAllowEnvelopeOverride = try container.decodeIfPresent(String.self, forKey: .commentsAllowEnvelopeOverride)
        commentsAllowEnvelopeOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .commentsAllowEnvelopeOverrideMetadata)
        conditionalFieldsEnabled = try container.decodeIfPresent(String.self, forKey: .conditionalFieldsEnabled)
        conditionalFieldsEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .conditionalFieldsEnabledMetadata)
        consumerDisclosureFrequency = try container.decodeIfPresent(String.self, forKey: .consumerDisclosureFrequency)
        consumerDisclosureFrequencyMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .consumerDisclosureFrequencyMetadata)
        convertPdfFields = try container.decodeIfPresent(String.self, forKey: .convertPdfFields)
        convertPdfFieldsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .convertPdfFieldsMetadata)
        dataPopulationScope = try container.decodeIfPresent(String.self, forKey: .dataPopulationScope)
        dataPopulationScopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .dataPopulationScopeMetadata)
        disableMobileApp = try container.decodeIfPresent(String.self, forKey: .disableMobileApp)
        disableMobileAppMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableMobileAppMetadata)
        disableMobilePushNotifications = try container.decodeIfPresent(String.self, forKey: .disableMobilePushNotifications)
        disableMobilePushNotificationsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableMobilePushNotificationsMetadata)
        disableMobileSending = try container.decodeIfPresent(String.self, forKey: .disableMobileSending)
        disableMobileSendingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableMobileSendingMetadata)
        disableMultipleSessions = try container.decodeIfPresent(String.self, forKey: .disableMultipleSessions)
        disableMultipleSessionsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableMultipleSessionsMetadata)
        disablePurgeNotificationsForSenderMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disablePurgeNotificationsForSenderMetadata)
        disableSignerCertView = try container.decodeIfPresent(String.self, forKey: .disableSignerCertView)
        disableSignerCertViewMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableSignerCertViewMetadata)
        disableSignerHistoryView = try container.decodeIfPresent(String.self, forKey: .disableSignerHistoryView)
        disableSignerHistoryViewMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableSignerHistoryViewMetadata)
        disableStyleSignature = try container.decodeIfPresent(String.self, forKey: .disableStyleSignature)
        disableStyleSignatureMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableStyleSignatureMetadata)
        disableUploadSignature = try container.decodeIfPresent(String.self, forKey: .disableUploadSignature)
        disableUploadSignatureMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableUploadSignatureMetadata)
        disableUserSharing = try container.decodeIfPresent(String.self, forKey: .disableUserSharing)
        disableUserSharingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableUserSharingMetadata)
        displayBetaSwitch = try container.decodeIfPresent(String.self, forKey: .displayBetaSwitch)
        displayBetaSwitchMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .displayBetaSwitchMetadata)
        documentConversionRestrictions = try container.decodeIfPresent(String.self, forKey: .documentConversionRestrictions)
        documentConversionRestrictionsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .documentConversionRestrictionsMetadata)
        documentRetention = try container.decodeIfPresent(String.self, forKey: .documentRetention)
        documentRetentionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .documentRetentionMetadata)
        documentRetentionPurgeTabs = try container.decodeIfPresent(String.self, forKey: .documentRetentionPurgeTabs)
        documentVisibility = try container.decodeIfPresent(String.self, forKey: .documentVisibility)
        documentVisibilityMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .documentVisibilityMetadata)
        emailTemplateVersion = try container.decodeIfPresent(String.self, forKey: .emailTemplateVersion)
        emailTemplateVersionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .emailTemplateVersionMetadata)
        enableAccessCodeGenerator = try container.decodeIfPresent(String.self, forKey: .enableAccessCodeGenerator)
        enableAccessCodeGeneratorMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAccessCodeGeneratorMetadata)
        enableAdvancedPayments = try container.decodeIfPresent(String.self, forKey: .enableAdvancedPayments)
        enableAdvancedPaymentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAdvancedPaymentsMetadata)
        enableAdvancedPowerForms = try container.decodeIfPresent(String.self, forKey: .enableAdvancedPowerForms)
        enableAdvancedPowerFormsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAdvancedPowerFormsMetadata)
        enableAgreementActionsForCLM = try container.decodeIfPresent(String.self, forKey: .enableAgreementActionsForCLM)
        enableAgreementActionsForCLMMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAgreementActionsForCLMMetadata)
        enableAgreementActionsForESign = try container.decodeIfPresent(String.self, forKey: .enableAgreementActionsForESign)
        enableAgreementActionsForESignMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAgreementActionsForESignMetadata)
        enableAutoNav = try container.decodeIfPresent(String.self, forKey: .enableAutoNav)
        enableAutoNavMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAutoNavMetadata)
        enableCalculatedFields = try container.decodeIfPresent(String.self, forKey: .enableCalculatedFields)
        enableCalculatedFieldsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableCalculatedFieldsMetadata)
        enableClickwraps = try container.decodeIfPresent(String.self, forKey: .enableClickwraps)
        enableClickwrapsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableClickwrapsMetadata)
        enableCommentsHistoryDownloadInSigning = try container.decodeIfPresent(String.self, forKey: .enableCommentsHistoryDownloadInSigning)
        enableCommentsHistoryDownloadInSigningMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableCommentsHistoryDownloadInSigningMetadata)
        enableCustomerSatisfactionMetricTracking = try container.decodeIfPresent(String.self, forKey: .enableCustomerSatisfactionMetricTracking)
        enableCustomerSatisfactionMetricTrackingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableCustomerSatisfactionMetricTrackingMetadata)
        enableDSPro = try container.decodeIfPresent(String.self, forKey: .enableDSPro)
        enableDSProMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableDSProMetadata)
        enableEnvelopeStampingByAccountAdmin = try container.decodeIfPresent(String.self, forKey: .enableEnvelopeStampingByAccountAdmin)
        enableEnvelopeStampingByAccountAdminMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableEnvelopeStampingByAccountAdminMetadata)
        enableEnvelopeStampingByDSAdmin = try container.decodeIfPresent(String.self, forKey: .enableEnvelopeStampingByDSAdmin)
        enableEnvelopeStampingByDSAdminMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableEnvelopeStampingByDSAdminMetadata)
        enableInBrowserEditor = try container.decodeIfPresent(String.self, forKey: .enableInBrowserEditor)
        enableInBrowserEditorMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableInBrowserEditorMetadata)
        enablePaymentProcessing = try container.decodeIfPresent(String.self, forKey: .enablePaymentProcessing)
        enablePaymentProcessingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enablePaymentProcessingMetadata)
        enablePowerForm = try container.decodeIfPresent(String.self, forKey: .enablePowerForm)
        enablePowerFormDirect = try container.decodeIfPresent(String.self, forKey: .enablePowerFormDirect)
        enablePowerFormDirectMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enablePowerFormDirectMetadata)
        enablePowerFormMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enablePowerFormMetadata)
        enableRecipientDomainValidation = try container.decodeIfPresent(String.self, forKey: .enableRecipientDomainValidation)
        enableRecipientDomainValidationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableRecipientDomainValidationMetadata)
        enableReportLinks = try container.decodeIfPresent(String.self, forKey: .enableReportLinks)
        enableReportLinksMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableReportLinksMetadata)
        enableRequireSignOnPaper = try container.decodeIfPresent(String.self, forKey: .enableRequireSignOnPaper)
        enableRequireSignOnPaperMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableRequireSignOnPaperMetadata)
        enableReservedDomain = try container.decodeIfPresent(String.self, forKey: .enableReservedDomain)
        enableReservedDomainMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableReservedDomainMetadata)
        enableResponsiveSigning = try container.decodeIfPresent(String.self, forKey: .enableResponsiveSigning)
        enableResponsiveSigningMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableResponsiveSigningMetadata)
        enableScheduledRelease = try container.decodeIfPresent(String.self, forKey: .enableScheduledRelease)
        enableScheduledReleaseMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableScheduledReleaseMetadata)
        enableSearchUI = try container.decodeIfPresent(String.self, forKey: .enableSearchUI)
        enableSearchUIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSearchUIMetadata)
        enableSendingTagsFontSettings = try container.decodeIfPresent(String.self, forKey: .enableSendingTagsFontSettings)
        enableSendingTagsFontSettingsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSendingTagsFontSettingsMetadata)
        enableSendToAgent = try container.decodeIfPresent(String.self, forKey: .enableSendToAgent)
        enableSendToAgentMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSendToAgentMetadata)
        enableSendToIntermediary = try container.decodeIfPresent(String.self, forKey: .enableSendToIntermediary)
        enableSendToIntermediaryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSendToIntermediaryMetadata)
        enableSendToManage = try container.decodeIfPresent(String.self, forKey: .enableSendToManage)
        enableSendToManageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSendToManageMetadata)
        enableSequentialSigningAPI = try container.decodeIfPresent(String.self, forKey: .enableSequentialSigningAPI)
        enableSequentialSigningAPIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSequentialSigningAPIMetadata)
        enableSequentialSigningUI = try container.decodeIfPresent(String.self, forKey: .enableSequentialSigningUI)
        enableSequentialSigningUIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSequentialSigningUIMetadata)
        enableSignerAttachments = try container.decodeIfPresent(String.self, forKey: .enableSignerAttachments)
        enableSignerAttachmentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignerAttachmentsMetadata)
        enableSigningExtensionComments = try container.decodeIfPresent(String.self, forKey: .enableSigningExtensionComments)
        enableSigningExtensionCommentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSigningExtensionCommentsMetadata)
        enableSigningExtensionConversations = try container.decodeIfPresent(String.self, forKey: .enableSigningExtensionConversations)
        enableSigningExtensionConversationsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSigningExtensionConversationsMetadata)
        enableSigningOrderSettingsForAccount = try container.decodeIfPresent(String.self, forKey: .enableSigningOrderSettingsForAccount)
        enableSigningOrderSettingsForAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSigningOrderSettingsForAccountMetadata)
        enableSignOnPaper = try container.decodeIfPresent(String.self, forKey: .enableSignOnPaper)
        enableSignOnPaperMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignOnPaperMetadata)
        enableSignOnPaperOverride = try container.decodeIfPresent(String.self, forKey: .enableSignOnPaperOverride)
        enableSignOnPaperOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignOnPaperOverrideMetadata)
        enableSignWithNotary = try container.decodeIfPresent(String.self, forKey: .enableSignWithNotary)
        enableSignWithNotaryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignWithNotaryMetadata)
        enableSmartContracts = try container.decodeIfPresent(String.self, forKey: .enableSmartContracts)
        enableSmartContractsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSmartContractsMetadata)
        enableSMSAuthentication = try container.decodeIfPresent(String.self, forKey: .enableSMSAuthentication)
        enableSMSAuthenticationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSMSAuthenticationMetadata)
        enableSocialIdLogin = try container.decodeIfPresent(String.self, forKey: .enableSocialIdLogin)
        enableSocialIdLoginMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSocialIdLoginMetadata)
        enableStrikeThrough = try container.decodeIfPresent(String.self, forKey: .enableStrikeThrough)
        enableStrikeThroughMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableStrikeThroughMetadata)
        enableTransactionPoint = try container.decodeIfPresent(String.self, forKey: .enableTransactionPoint)
        enableTransactionPointMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableTransactionPointMetadata)
        enableVaulting = try container.decodeIfPresent(String.self, forKey: .enableVaulting)
        enableVaultingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableVaultingMetadata)
        enableWitnessing = try container.decodeIfPresent(String.self, forKey: .enableWitnessing)
        enableWitnessingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableWitnessingMetadata)
        enforceTemplateNameUniqueness = try container.decodeIfPresent(String.self, forKey: .enforceTemplateNameUniqueness)
        enforceTemplateNameUniquenessMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enforceTemplateNameUniquenessMetadata)
        envelopeIntegrationAllowed = try container.decodeIfPresent(String.self, forKey: .envelopeIntegrationAllowed)
        envelopeIntegrationAllowedMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .envelopeIntegrationAllowedMetadata)
        envelopeIntegrationEnabled = try container.decodeIfPresent(String.self, forKey: .envelopeIntegrationEnabled)
        envelopeIntegrationEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .envelopeIntegrationEnabledMetadata)
        envelopeStampingDefaultValue = try container.decodeIfPresent(String.self, forKey: .envelopeStampingDefaultValue)
        envelopeStampingDefaultValueMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .envelopeStampingDefaultValueMetadata)
        expressSend = try container.decodeIfPresent(String.self, forKey: .expressSend)
        expressSendAllowTabs = try container.decodeIfPresent(String.self, forKey: .expressSendAllowTabs)
        expressSendAllowTabsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .expressSendAllowTabsMetadata)
        expressSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .expressSendMetadata)
        externalDocumentSources = try container.decodeIfPresent(ExternalDocumentSources.self, forKey: .externalDocumentSources)
        externalSignaturePadType = try container.decodeIfPresent(String.self, forKey: .externalSignaturePadType)
        externalSignaturePadTypeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .externalSignaturePadTypeMetadata)
        faxOutEnabled = try container.decodeIfPresent(String.self, forKey: .faxOutEnabled)
        faxOutEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .faxOutEnabledMetadata)
        guidedFormsHtmlAllowed = try container.decodeIfPresent(String.self, forKey: .guidedFormsHtmlAllowed)
        guidedFormsHtmlAllowedMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .guidedFormsHtmlAllowedMetadata)
        hideAccountAddressInCoC = try container.decodeIfPresent(String.self, forKey: .hideAccountAddressInCoC)
        hideAccountAddressInCoCMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .hideAccountAddressInCoCMetadata)
        hidePricing = try container.decodeIfPresent(String.self, forKey: .hidePricing)
        hidePricingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .hidePricingMetadata)
        idCheckConfigurations = try container.decodeIfPresent([IdCheckConfiguration].self, forKey: .idCheckConfigurations)
        idCheckExpire = try container.decodeIfPresent(String.self, forKey: .idCheckExpire)
        idCheckExpireDays = try container.decodeIfPresent(String.self, forKey: .idCheckExpireDays)
        idCheckExpireDaysMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .idCheckExpireDaysMetadata)
        idCheckExpireMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .idCheckExpireMetadata)
        idCheckExpireMinutes = try container.decodeIfPresent(String.self, forKey: .idCheckExpireMinutes)
        idCheckExpireMinutesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .idCheckExpireMinutesMetadata)
        idCheckRequired = try container.decodeIfPresent(String.self, forKey: .idCheckRequired)
        idCheckRequiredMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .idCheckRequiredMetadata)
        identityVerification = try container.decodeIfPresent([AccountIdentityVerificationWorkflow].self, forKey: .identityVerification)
        identityVerificationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .identityVerificationMetadata)
        ignoreErrorIfAnchorTabNotFound = try container.decodeIfPresent(String.self, forKey: .ignoreErrorIfAnchorTabNotFound)
        ignoreErrorIfAnchorTabNotFoundMetadataEnabled = try container.decodeIfPresent(SettingsMetadata.self, forKey: .ignoreErrorIfAnchorTabNotFoundMetadataEnabled)
        inPersonIDCheckQuestion = try container.decodeIfPresent(String.self, forKey: .inPersonIDCheckQuestion)
        inPersonIDCheckQuestionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .inPersonIDCheckQuestionMetadata)
        inPersonSigningEnabled = try container.decodeIfPresent(String.self, forKey: .inPersonSigningEnabled)
        inPersonSigningEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .inPersonSigningEnabledMetadata)
        inSessionEnabled = try container.decodeIfPresent(String.self, forKey: .inSessionEnabled)
        inSessionEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .inSessionEnabledMetadata)
        inSessionSuppressEmails = try container.decodeIfPresent(String.self, forKey: .inSessionSuppressEmails)
        inSessionSuppressEmailsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .inSessionSuppressEmailsMetadata)
        maximumSigningGroups = try container.decodeIfPresent(String.self, forKey: .maximumSigningGroups)
        maximumSigningGroupsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .maximumSigningGroupsMetadata)
        maximumUsersPerSigningGroup = try container.decodeIfPresent(String.self, forKey: .maximumUsersPerSigningGroup)
        maximumUsersPerSigningGroupMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .maximumUsersPerSigningGroupMetadata)
        maxNumberOfCustomStamps = try container.decodeIfPresent(String.self, forKey: .maxNumberOfCustomStamps)
        mobileSessionTimeout = try container.decodeIfPresent(String.self, forKey: .mobileSessionTimeout)
        mobileSessionTimeoutMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .mobileSessionTimeoutMetadata)
        numberOfActiveCustomStamps = try container.decodeIfPresent(String.self, forKey: .numberOfActiveCustomStamps)
        optInMobileSigningV02 = try container.decodeIfPresent(String.self, forKey: .optInMobileSigningV02)
        optInMobileSigningV02Metadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .optInMobileSigningV02Metadata)
        optOutAutoNavTextAndTabColorUpdates = try container.decodeIfPresent(String.self, forKey: .optOutAutoNavTextAndTabColorUpdates)
        optOutAutoNavTextAndTabColorUpdatesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .optOutAutoNavTextAndTabColorUpdatesMetadata)
        optOutNewPlatformSeal = try container.decodeIfPresent(String.self, forKey: .optOutNewPlatformSeal)
        optOutNewPlatformSealPlatformMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .optOutNewPlatformSealPlatformMetadata)
        phoneAuthRecipientMayProvidePhoneNumber = try container.decodeIfPresent(String.self, forKey: .phoneAuthRecipientMayProvidePhoneNumber)
        phoneAuthRecipientMayProvidePhoneNumberMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .phoneAuthRecipientMayProvidePhoneNumberMetadata)
        pkiSignDownloadedPDFDocs = try container.decodeIfPresent(String.self, forKey: .pkiSignDownloadedPDFDocs)
        pkiSignDownloadedPDFDocsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .pkiSignDownloadedPDFDocsMetadata)
        recipientsCanSignOffline = try container.decodeIfPresent(String.self, forKey: .recipientsCanSignOffline)
        recipientsCanSignOfflineMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .recipientsCanSignOfflineMetadata)
        recipientSigningAutoNavigationControl = try container.decodeIfPresent(String.self, forKey: .recipientSigningAutoNavigationControl)
        recipientSigningAutoNavigationControlMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .recipientSigningAutoNavigationControlMetadata)
        require21CFRpt11Compliance = try container.decodeIfPresent(String.self, forKey: .require21CFRpt11Compliance)
        require21CFRpt11ComplianceMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .require21CFRpt11ComplianceMetadata)
        requireDeclineReason = try container.decodeIfPresent(String.self, forKey: .requireDeclineReason)
        requireDeclineReasonMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .requireDeclineReasonMetadata)
        requireExternalUserManagement = try container.decodeIfPresent(String.self, forKey: .requireExternalUserManagement)
        requireExternalUserManagementMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .requireExternalUserManagementMetadata)
        requireSignerCertificateType = try container.decodeIfPresent(String.self, forKey: .requireSignerCertificateType)
        requireSignerCertificateTypeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .requireSignerCertificateTypeMetadata)
        rsaVeridAccountName = try container.decodeIfPresent(String.self, forKey: .rsaVeridAccountName)
        rsaVeridPassword = try container.decodeIfPresent(String.self, forKey: .rsaVeridPassword)
        rsaVeridRuleset = try container.decodeIfPresent(String.self, forKey: .rsaVeridRuleset)
        rsaVeridUserId = try container.decodeIfPresent(String.self, forKey: .rsaVeridUserId)
        selfSignedRecipientEmailDocument = try container.decodeIfPresent(String.self, forKey: .selfSignedRecipientEmailDocument)
        selfSignedRecipientEmailDocumentMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .selfSignedRecipientEmailDocumentMetadata)
        selfSignedRecipientEmailDocumentUserOverride = try container.decodeIfPresent(String.self, forKey: .selfSignedRecipientEmailDocumentUserOverride)
        selfSignedRecipientEmailDocumentUserOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .selfSignedRecipientEmailDocumentUserOverrideMetadata)
        senderCanSignInEachLocation = try container.decodeIfPresent(String.self, forKey: .senderCanSignInEachLocation)
        senderCanSignInEachLocationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .senderCanSignInEachLocationMetadata)
        senderMustAuthenticateSigning = try container.decodeIfPresent(String.self, forKey: .senderMustAuthenticateSigning)
        senderMustAuthenticateSigningMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .senderMustAuthenticateSigningMetadata)
        sendingTagsFontColor = try container.decodeIfPresent(String.self, forKey: .sendingTagsFontColor)
        sendingTagsFontColorMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sendingTagsFontColorMetadata)
        sendingTagsFontName = try container.decodeIfPresent(String.self, forKey: .sendingTagsFontName)
        sendingTagsFontNameMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sendingTagsFontNameMetadata)
        sendingTagsFontSize = try container.decodeIfPresent(String.self, forKey: .sendingTagsFontSize)
        sendingTagsFontSizeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sendingTagsFontSizeMetadata)
        sendToCertifiedDeliveryEnabled = try container.decodeIfPresent(String.self, forKey: .sendToCertifiedDeliveryEnabled)
        sendToCertifiedDeliveryEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sendToCertifiedDeliveryEnabledMetadata)
        sessionTimeout = try container.decodeIfPresent(String.self, forKey: .sessionTimeout)
        sessionTimeoutMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sessionTimeoutMetadata)
        setRecipEmailLang = try container.decodeIfPresent(String.self, forKey: .setRecipEmailLang)
        setRecipEmailLangMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .setRecipEmailLangMetadata)
        setRecipSignLang = try container.decodeIfPresent(String.self, forKey: .setRecipSignLang)
        setRecipSignLangMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .setRecipSignLangMetadata)
        sharedTemplateFolders = try container.decodeIfPresent(String.self, forKey: .sharedTemplateFolders)
        sharedTemplateFoldersMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .sharedTemplateFoldersMetadata)
        showCompleteDialogInEmbeddedSession = try container.decodeIfPresent(String.self, forKey: .showCompleteDialogInEmbeddedSession)
        showCompleteDialogInEmbeddedSessionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .showCompleteDialogInEmbeddedSessionMetadata)
        showConditionalRoutingOnSend = try container.decodeIfPresent(String.self, forKey: .showConditionalRoutingOnSend)
        showConditionalRoutingOnSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .showConditionalRoutingOnSendMetadata)
        showInitialConditionalFields = try container.decodeIfPresent(String.self, forKey: .showInitialConditionalFields)
        showInitialConditionalFieldsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .showInitialConditionalFieldsMetadata)
        showLocalizedWatermarks = try container.decodeIfPresent(String.self, forKey: .showLocalizedWatermarks)
        showLocalizedWatermarksMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .showLocalizedWatermarksMetadata)
        showTutorials = try container.decodeIfPresent(String.self, forKey: .showTutorials)
        showTutorialsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .showTutorialsMetadata)
        signatureProviders = try container.decodeIfPresent([String].self, forKey: .signatureProviders)
        signatureProvidersMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signatureProvidersMetadata)
        signDateFormat = try container.decodeIfPresent(String.self, forKey: .signDateFormat)
        signDateFormatMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signDateFormatMetadata)
        signerAttachCertificateToEnvelopePDF = try container.decodeIfPresent(String.self, forKey: .signerAttachCertificateToEnvelopePDF)
        signerAttachCertificateToEnvelopePDFMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerAttachCertificateToEnvelopePDFMetadata)
        signerAttachConcat = try container.decodeIfPresent(String.self, forKey: .signerAttachConcat)
        signerAttachConcatMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerAttachConcatMetadata)
        signerCanCreateAccount = try container.decodeIfPresent(String.self, forKey: .signerCanCreateAccount)
        signerCanCreateAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerCanCreateAccountMetadata)
        signerCanSignOnMobile = try container.decodeIfPresent(String.self, forKey: .signerCanSignOnMobile)
        signerCanSignOnMobileMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerCanSignOnMobileMetadata)
        signerInSessionUseEnvelopeCompleteEmail = try container.decodeIfPresent(String.self, forKey: .signerInSessionUseEnvelopeCompleteEmail)
        signerInSessionUseEnvelopeCompleteEmailMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerInSessionUseEnvelopeCompleteEmailMetadata)
        signerLoginRequirements = try container.decodeIfPresent(String.self, forKey: .signerLoginRequirements)
        signerLoginRequirementsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerLoginRequirementsMetadata)
        signerMustHaveAccount = try container.decodeIfPresent(String.self, forKey: .signerMustHaveAccount)
        signerMustHaveAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerMustHaveAccountMetadata)
        signerMustLoginToSign = try container.decodeIfPresent(String.self, forKey: .signerMustLoginToSign)
        signerMustLoginToSignMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerMustLoginToSignMetadata)
        signerShowSecureFieldInitialValues = try container.decodeIfPresent(String.self, forKey: .signerShowSecureFieldInitialValues)
        signerShowSecureFieldInitialValuesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signerShowSecureFieldInitialValuesMetadata)
        signingSessionTimeout = try container.decodeIfPresent(String.self, forKey: .signingSessionTimeout)
        signingSessionTimeoutMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signingSessionTimeoutMetadata)
        signingUiVersion = try container.decodeIfPresent(String.self, forKey: .signingUiVersion)
        signingUiVersionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signingUiVersionMetadata)
        signTimeFormat = try container.decodeIfPresent(String.self, forKey: .signTimeFormat)
        signTimeFormatMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signTimeFormatMetadata)
        signTimeShowAmPm = try container.decodeIfPresent(String.self, forKey: .signTimeShowAmPm)
        signTimeShowAmPmMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .signTimeShowAmPmMetadata)
        simplifiedSendingEnabled = try container.decodeIfPresent(String.self, forKey: .simplifiedSendingEnabled)
        simplifiedSendingEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .simplifiedSendingEnabledMetadata)
        singleSignOnEnabled = try container.decodeIfPresent(String.self, forKey: .singleSignOnEnabled)
        singleSignOnEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .singleSignOnEnabledMetadata)
        skipAuthCompletedEnvelopes = try container.decodeIfPresent(String.self, forKey: .skipAuthCompletedEnvelopes)
        skipAuthCompletedEnvelopesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .skipAuthCompletedEnvelopesMetadata)
        socialIdRecipAuth = try container.decodeIfPresent(String.self, forKey: .socialIdRecipAuth)
        socialIdRecipAuthMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .socialIdRecipAuthMetadata)
        specifyDocumentVisibility = try container.decodeIfPresent(String.self, forKey: .specifyDocumentVisibility)
        specifyDocumentVisibilityMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .specifyDocumentVisibilityMetadata)
        startInAdvancedCorrect = try container.decodeIfPresent(String.self, forKey: .startInAdvancedCorrect)
        startInAdvancedCorrectMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .startInAdvancedCorrectMetadata)
        supplementalDocumentsMustAccept = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustAccept)
        supplementalDocumentsMustAcceptMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustAcceptMetadata)
        supplementalDocumentsMustRead = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustRead)
        supplementalDocumentsMustReadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustReadMetadata)
        supplementalDocumentsMustView = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustView)
        supplementalDocumentsMustViewMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustViewMetadata)
        suppressCertificateEnforcement = try container.decodeIfPresent(String.self, forKey: .suppressCertificateEnforcement)
        suppressCertificateEnforcementMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .suppressCertificateEnforcementMetadata)
        tabAccountSettings = try container.decodeIfPresent(TabAccountSettings.self, forKey: .tabAccountSettings)
        timezoneOffsetAPI = try container.decodeIfPresent(String.self, forKey: .timezoneOffsetAPI)
        timezoneOffsetAPIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneOffsetAPIMetadata)
        timezoneOffsetUI = try container.decodeIfPresent(String.self, forKey: .timezoneOffsetUI)
        timezoneOffsetUIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneOffsetUIMetadata)
        universalSignatureOptIn = try container.decodeIfPresent(String.self, forKey: .universalSignatureOptIn)
        useAccountLevelEmail = try container.decodeIfPresent(String.self, forKey: .useAccountLevelEmail)
        useAccountLevelEmailMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useAccountLevelEmailMetadata)
        useConsumerDisclosure = try container.decodeIfPresent(String.self, forKey: .useConsumerDisclosure)
        useConsumerDisclosureMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useConsumerDisclosureMetadata)
        useConsumerDisclosureWithinAccount = try container.decodeIfPresent(String.self, forKey: .useConsumerDisclosureWithinAccount)
        useConsumerDisclosureWithinAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useConsumerDisclosureWithinAccountMetadata)
        useDerivedKeys = try container.decodeIfPresent(String.self, forKey: .useDerivedKeys)
        useDerivedKeysMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useDerivedKeysMetadata)
        useDocuSignExpressSignerCertificate = try container.decodeIfPresent(String.self, forKey: .useDocuSignExpressSignerCertificate)
        useDocuSignExpressSignerCertificateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useDocuSignExpressSignerCertificateMetadata)
        useMultiAppGroupsData = try container.decodeIfPresent(String.self, forKey: .useMultiAppGroupsData)
        useMultiAppGroupsDataMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useMultiAppGroupsDataMetadata)
        useNewBlobForPdf = try container.decodeIfPresent(String.self, forKey: .useNewBlobForPdf)
        useNewBlobForPdfMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useNewBlobForPdfMetadata)
        useSAFESignerCertificates = try container.decodeIfPresent(String.self, forKey: .useSAFESignerCertificates)
        useSAFESignerCertificatesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useSAFESignerCertificatesMetadata)
        usesAPI = try container.decodeIfPresent(String.self, forKey: .usesAPI)
        usesAPIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .usesAPIMetadata)
        useSignatureProviderPlatform = try container.decodeIfPresent(String.self, forKey: .useSignatureProviderPlatform)
        useSignatureProviderPlatformMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .useSignatureProviderPlatformMetadata)
        validationsAllowed = try container.decodeIfPresent(String.self, forKey: .validationsAllowed)
        validationsAllowedMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .validationsAllowedMetadata)
        validationsBrand = try container.decodeIfPresent(String.self, forKey: .validationsBrand)
        validationsBrandMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .validationsBrandMetadata)
        validationsCadence = try container.decodeIfPresent(String.self, forKey: .validationsCadence)
        validationsCadenceMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .validationsCadenceMetadata)
        validationsEnabled = try container.decodeIfPresent(String.self, forKey: .validationsEnabled)
        validationsEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .validationsEnabledMetadata)
        validationsReport = try container.decodeIfPresent(String.self, forKey: .validationsReport)
        validationsReportMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .validationsReportMetadata)
        waterMarkEnabled = try container.decodeIfPresent(String.self, forKey: .waterMarkEnabled)
        waterMarkEnabledMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .waterMarkEnabledMetadata)
        writeReminderToEnvelopeHistory = try container.decodeIfPresent(String.self, forKey: .writeReminderToEnvelopeHistory)
        writeReminderToEnvelopeHistoryMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .writeReminderToEnvelopeHistoryMetadata)
        wurflMinAllowableScreenSize = try container.decodeIfPresent(String.self, forKey: .wurflMinAllowableScreenSize)
        wurflMinAllowableScreenSizeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .wurflMinAllowableScreenSizeMetadata)
    }
}

extension AccountSettingsInformation: Hashable {
    public static func == (lhs: AccountSettingsInformation, rhs: AccountSettingsInformation) -> Bool {
        lhs.accessCodeFormat == rhs.accessCodeFormat &&
            lhs.accountDateTimeFormat == rhs.accountDateTimeFormat &&
            lhs.accountDateTimeFormatMetadata == rhs.accountDateTimeFormatMetadata &&
            lhs.accountDefaultLanguage == rhs.accountDefaultLanguage &&
            lhs.accountDefaultLanguageMetadata == rhs.accountDefaultLanguageMetadata &&
            lhs.accountName == rhs.accountName &&
            lhs.accountNameMetadata == rhs.accountNameMetadata &&
            lhs.accountNotification == rhs.accountNotification &&
            lhs.accountUISettings == rhs.accountUISettings &&
            lhs.adoptSigConfig == rhs.adoptSigConfig &&
            lhs.adoptSigConfigMetadata == rhs.adoptSigConfigMetadata &&
            lhs.advancedCorrect == rhs.advancedCorrect &&
            lhs.advancedCorrectMetadata == rhs.advancedCorrectMetadata &&
            lhs.allowAccessCodeFormat == rhs.allowAccessCodeFormat &&
            lhs.allowAccessCodeFormatMetadata == rhs.allowAccessCodeFormatMetadata &&
            lhs.allowAccountManagementGranular == rhs.allowAccountManagementGranular &&
            lhs.allowAccountManagementGranularMetadata == rhs.allowAccountManagementGranularMetadata &&
            lhs.allowAccountMemberNameChange == rhs.allowAccountMemberNameChange &&
            lhs.allowAccountMemberNameChangeMetadata == rhs.allowAccountMemberNameChangeMetadata &&
            lhs.allowAdvancedRecipientRoutingConditional == rhs.allowAdvancedRecipientRoutingConditional &&
            lhs.allowAdvancedRecipientRoutingConditionalMetadata == rhs.allowAdvancedRecipientRoutingConditionalMetadata &&
            lhs.allowAgentNameEmailEdit == rhs.allowAgentNameEmailEdit &&
            lhs.allowAgentNameEmailEditMetadata == rhs.allowAgentNameEmailEditMetadata &&
            lhs.allowAgreementActions == rhs.allowAgreementActions &&
            lhs.allowAgreementActionsMetadata == rhs.allowAgreementActionsMetadata &&
            lhs.allowAutoNavSettings == rhs.allowAutoNavSettings &&
            lhs.allowAutoNavSettingsMetadata == rhs.allowAutoNavSettingsMetadata &&
            lhs.allowAutoTagging == rhs.allowAutoTagging &&
            lhs.allowAutoTaggingMetadata == rhs.allowAutoTaggingMetadata &&
            lhs.allowBulkSend == rhs.allowBulkSend &&
            lhs.allowBulkSendMetadata == rhs.allowBulkSendMetadata &&
            lhs.allowCDWithdraw == rhs.allowCDWithdraw &&
            lhs.allowCDWithdrawMetadata == rhs.allowCDWithdrawMetadata &&
            lhs.allowConnectHttpListenerConfigs == rhs.allowConnectHttpListenerConfigs &&
            lhs.allowConnectSendFinishLater == rhs.allowConnectSendFinishLater &&
            lhs.allowConnectSendFinishLaterMetadata == rhs.allowConnectSendFinishLaterMetadata &&
            lhs.allowConnectUnifiedPayloadUI == rhs.allowConnectUnifiedPayloadUI &&
            lhs.allowConsumerDisclosureOverride == rhs.allowConsumerDisclosureOverride &&
            lhs.allowConsumerDisclosureOverrideMetadata == rhs.allowConsumerDisclosureOverrideMetadata &&
            lhs.allowDataDownload == rhs.allowDataDownload &&
            lhs.allowDataDownloadMetadata == rhs.allowDataDownloadMetadata &&
            lhs.allowDocumentDisclosures == rhs.allowDocumentDisclosures &&
            lhs.allowDocumentDisclosuresMetadata == rhs.allowDocumentDisclosuresMetadata &&
            lhs.allowDocumentsOnSignedEnvelopes == rhs.allowDocumentsOnSignedEnvelopes &&
            lhs.allowDocumentsOnSignedEnvelopesMetadata == rhs.allowDocumentsOnSignedEnvelopesMetadata &&
            lhs.allowDocumentVisibility == rhs.allowDocumentVisibility &&
            lhs.allowDocumentVisibilityMetadata == rhs.allowDocumentVisibilityMetadata &&
            lhs.allowEHankoStamps == rhs.allowEHankoStamps &&
            lhs.allowEHankoStampsMetadata == rhs.allowEHankoStampsMetadata &&
            lhs.allowENoteEOriginal == rhs.allowENoteEOriginal &&
            lhs.allowENoteEOriginalMetadata == rhs.allowENoteEOriginalMetadata &&
            lhs.allowEnvelopeCorrect == rhs.allowEnvelopeCorrect &&
            lhs.allowEnvelopeCorrectMetadata == rhs.allowEnvelopeCorrectMetadata &&
            lhs.allowEnvelopeCustodyTransfer == rhs.allowEnvelopeCustodyTransfer &&
            lhs.allowEnvelopeCustodyTransferMetadata == rhs.allowEnvelopeCustodyTransferMetadata &&
            lhs.allowEnvelopeCustomFields == rhs.allowEnvelopeCustomFields &&
            lhs.allowEnvelopeCustomFieldsMetadata == rhs.allowEnvelopeCustomFieldsMetadata &&
            lhs.allowEnvelopePublishReporting == rhs.allowEnvelopePublishReporting &&
            lhs.allowEnvelopePublishReportingMetadata == rhs.allowEnvelopePublishReportingMetadata &&
            lhs.allowEnvelopeReporting == rhs.allowEnvelopeReporting &&
            lhs.allowEnvelopeReportingMetadata == rhs.allowEnvelopeReportingMetadata &&
            lhs.allowExpression == rhs.allowExpression &&
            lhs.allowExpressionMetadata == rhs.allowExpressionMetadata &&
            lhs.allowExpressSignerCertificate == rhs.allowExpressSignerCertificate &&
            lhs.allowExpressSignerCertificateMetadata == rhs.allowExpressSignerCertificateMetadata &&
            lhs.allowExtendedSendingResourceFile == rhs.allowExtendedSendingResourceFile &&
            lhs.allowExtendedSendingResourceFileMetadata == rhs.allowExtendedSendingResourceFileMetadata &&
            lhs.allowExternalSignaturePad == rhs.allowExternalSignaturePad &&
            lhs.allowExternalSignaturePadMetadata == rhs.allowExternalSignaturePadMetadata &&
            lhs.allowIDVLevel1 == rhs.allowIDVLevel1 &&
            lhs.allowIDVLevel1Metadata == rhs.allowIDVLevel1Metadata &&
            lhs.allowIDVPlatform == rhs.allowIDVPlatform &&
            lhs.allowIDVPlatformMetadata == rhs.allowIDVPlatformMetadata &&
            lhs.allowInPerson == rhs.allowInPerson &&
            lhs.allowInPersonMetadata == rhs.allowInPersonMetadata &&
            lhs.allowManagedStamps == rhs.allowManagedStamps &&
            lhs.allowManagedStampsMetadata == rhs.allowManagedStampsMetadata &&
            lhs.allowMarkup == rhs.allowMarkup &&
            lhs.allowMarkupMetadata == rhs.allowMarkupMetadata &&
            lhs.allowMemberTimeZone == rhs.allowMemberTimeZone &&
            lhs.allowMemberTimeZoneMetadata == rhs.allowMemberTimeZoneMetadata &&
            lhs.allowMergeFields == rhs.allowMergeFields &&
            lhs.allowMergeFieldsMetadata == rhs.allowMergeFieldsMetadata &&
            lhs.allowMultipleBrandProfiles == rhs.allowMultipleBrandProfiles &&
            lhs.allowMultipleBrandProfilesMetadata == rhs.allowMultipleBrandProfilesMetadata &&
            lhs.allowMultipleSignerAttachments == rhs.allowMultipleSignerAttachments &&
            lhs.allowMultipleSignerAttachmentsMetadata == rhs.allowMultipleSignerAttachmentsMetadata &&
            lhs.allowNonUSPhoneAuth == rhs.allowNonUSPhoneAuth &&
            lhs.allowNonUSPhoneAuthMetadata == rhs.allowNonUSPhoneAuthMetadata &&
            lhs.allowOcrOfEnvelopeDocuments == rhs.allowOcrOfEnvelopeDocuments &&
            lhs.allowOcrOfEnvelopeDocumentsMetadata == rhs.allowOcrOfEnvelopeDocumentsMetadata &&
            lhs.allowOfflineSigning == rhs.allowOfflineSigning &&
            lhs.allowOfflineSigningMetadata == rhs.allowOfflineSigningMetadata &&
            lhs.allowOpenTrustSignerCertificate == rhs.allowOpenTrustSignerCertificate &&
            lhs.allowOpenTrustSignerCertificateMetadata == rhs.allowOpenTrustSignerCertificateMetadata &&
            lhs.allowOrganizations == rhs.allowOrganizations &&
            lhs.allowOrganizationsMetadata == rhs.allowOrganizationsMetadata &&
            lhs.allowPaymentProcessing == rhs.allowPaymentProcessing &&
            lhs.allowPaymentProcessingMetadata == rhs.allowPaymentProcessingMetadata &&
            lhs.allowPersonalSignerCertificate == rhs.allowPersonalSignerCertificate &&
            lhs.allowPersonalSignerCertificateMetadata == rhs.allowPersonalSignerCertificateMetadata &&
            lhs.allowPhoneAuthentication == rhs.allowPhoneAuthentication &&
            lhs.allowPhoneAuthenticationMetadata == rhs.allowPhoneAuthenticationMetadata &&
            lhs.allowPhoneAuthOverride == rhs.allowPhoneAuthOverride &&
            lhs.allowPhoneAuthOverrideMetadata == rhs.allowPhoneAuthOverrideMetadata &&
            lhs.allowPrivateSigningGroups == rhs.allowPrivateSigningGroups &&
            lhs.allowPrivateSigningGroupsMetadata == rhs.allowPrivateSigningGroupsMetadata &&
            lhs.allowReminders == rhs.allowReminders &&
            lhs.allowRemindersMetadata == rhs.allowRemindersMetadata &&
            lhs.allowRemoteNotary == rhs.allowRemoteNotary &&
            lhs.allowRemoteNotaryMetadata == rhs.allowRemoteNotaryMetadata &&
            lhs.allowResourceFileBranding == rhs.allowResourceFileBranding &&
            lhs.allowResourceFileBrandingMetadata == rhs.allowResourceFileBrandingMetadata &&
            lhs.allowSafeBioPharmaSignerCertificate == rhs.allowSafeBioPharmaSignerCertificate &&
            lhs.allowSafeBioPharmaSignerCertificateMetadata == rhs.allowSafeBioPharmaSignerCertificateMetadata &&
            lhs.allowSecurityAppliance == rhs.allowSecurityAppliance &&
            lhs.allowSecurityApplianceMetadata == rhs.allowSecurityApplianceMetadata &&
            lhs.allowSendToCertifiedDelivery == rhs.allowSendToCertifiedDelivery &&
            lhs.allowSendToCertifiedDeliveryMetadata == rhs.allowSendToCertifiedDeliveryMetadata &&
            lhs.allowSendToIntermediary == rhs.allowSendToIntermediary &&
            lhs.allowSendToIntermediaryMetadata == rhs.allowSendToIntermediaryMetadata &&
            lhs.allowServerTemplates == rhs.allowServerTemplates &&
            lhs.allowServerTemplatesMetadata == rhs.allowServerTemplatesMetadata &&
            lhs.allowSetEmbeddedRecipientStartURL == rhs.allowSetEmbeddedRecipientStartURL &&
            lhs.allowSetEmbeddedRecipientStartURLMetadata == rhs.allowSetEmbeddedRecipientStartURLMetadata &&
            lhs.allowSharedTabs == rhs.allowSharedTabs &&
            lhs.allowSharedTabsMetadata == rhs.allowSharedTabsMetadata &&
            lhs.allowSignatureStamps == rhs.allowSignatureStamps &&
            lhs.allowSignatureStampsMetadata == rhs.allowSignatureStampsMetadata &&
            lhs.allowSignDocumentFromHomePage == rhs.allowSignDocumentFromHomePage &&
            lhs.allowSignDocumentFromHomePageMetadata == rhs.allowSignDocumentFromHomePageMetadata &&
            lhs.allowSignerReassign == rhs.allowSignerReassign &&
            lhs.allowSignerReassignMetadata == rhs.allowSignerReassignMetadata &&
            lhs.allowSignerReassignOverride == rhs.allowSignerReassignOverride &&
            lhs.allowSignerReassignOverrideMetadata == rhs.allowSignerReassignOverrideMetadata &&
            lhs.allowSigningExtensions == rhs.allowSigningExtensions &&
            lhs.allowSigningExtensionsMetadata == rhs.allowSigningExtensionsMetadata &&
            lhs.allowSigningGroups == rhs.allowSigningGroups &&
            lhs.allowSigningGroupsMetadata == rhs.allowSigningGroupsMetadata &&
            lhs.allowSigningRadioDeselect == rhs.allowSigningRadioDeselect &&
            lhs.allowSigningRadioDeselectMetadata == rhs.allowSigningRadioDeselectMetadata &&
            lhs.allowSignNow == rhs.allowSignNow &&
            lhs.allowSignNowMetadata == rhs.allowSignNowMetadata &&
            lhs.allowSMSDelivery == rhs.allowSMSDelivery &&
            lhs.allowSMSDeliveryMetadata == rhs.allowSMSDeliveryMetadata &&
            lhs.allowSocialIdLogin == rhs.allowSocialIdLogin &&
            lhs.allowSocialIdLoginMetadata == rhs.allowSocialIdLoginMetadata &&
            lhs.allowSupplementalDocuments == rhs.allowSupplementalDocuments &&
            lhs.allowSupplementalDocumentsMetadata == rhs.allowSupplementalDocumentsMetadata &&
            lhs.allowUsersToAccessDirectory == rhs.allowUsersToAccessDirectory &&
            lhs.allowUsersToAccessDirectoryMetadata == rhs.allowUsersToAccessDirectoryMetadata &&
            lhs.allowValueInsights == rhs.allowValueInsights &&
            lhs.allowValueInsightsMetadata == rhs.allowValueInsightsMetadata &&
            lhs.anchorPopulationScope == rhs.anchorPopulationScope &&
            lhs.anchorPopulationScopeMetadata == rhs.anchorPopulationScopeMetadata &&
            lhs.anchorTagVersionedPlacementEnabled == rhs.anchorTagVersionedPlacementEnabled &&
            lhs.anchorTagVersionedPlacementMetadataEnabled == rhs.anchorTagVersionedPlacementMetadataEnabled &&
            lhs.attachCompletedEnvelope == rhs.attachCompletedEnvelope &&
            lhs.attachCompletedEnvelopeMetadata == rhs.attachCompletedEnvelopeMetadata &&
            lhs.authenticationCheck == rhs.authenticationCheck &&
            lhs.authenticationCheckMetadata == rhs.authenticationCheckMetadata &&
            lhs.autoNavRule == rhs.autoNavRule &&
            lhs.autoNavRuleMetadata == rhs.autoNavRuleMetadata &&
            lhs.autoProvisionSignerAccount == rhs.autoProvisionSignerAccount &&
            lhs.autoProvisionSignerAccountMetadata == rhs.autoProvisionSignerAccountMetadata &&
            lhs.bccEmailArchive == rhs.bccEmailArchive &&
            lhs.bccEmailArchiveMetadata == rhs.bccEmailArchiveMetadata &&
            lhs.betaSwitchConfiguration == rhs.betaSwitchConfiguration &&
            lhs.betaSwitchConfigurationMetadata == rhs.betaSwitchConfigurationMetadata &&
            lhs.billingAddress == rhs.billingAddress &&
            lhs.billingAddressMetadata == rhs.billingAddressMetadata &&
            lhs.bulkSend == rhs.bulkSend &&
            lhs.bulkSendMaxCopiesInBatch == rhs.bulkSendMaxCopiesInBatch &&
            lhs.bulkSendMaxUnprocessedEnvelopesCount == rhs.bulkSendMaxUnprocessedEnvelopesCount &&
            lhs.bulkSendMetadata == rhs.bulkSendMetadata &&
            lhs.canSelfBrandSend == rhs.canSelfBrandSend &&
            lhs.canSelfBrandSendMetadata == rhs.canSelfBrandSendMetadata &&
            lhs.canSelfBrandSign == rhs.canSelfBrandSign &&
            lhs.canSelfBrandSignMetadata == rhs.canSelfBrandSignMetadata &&
            lhs.canUseSalesforceOAuth == rhs.canUseSalesforceOAuth &&
            lhs.canUseSalesforceOAuthMetadata == rhs.canUseSalesforceOAuthMetadata &&
            lhs.captureVoiceRecording == rhs.captureVoiceRecording &&
            lhs.captureVoiceRecordingMetadata == rhs.captureVoiceRecordingMetadata &&
            lhs.cfrUseWideImage == rhs.cfrUseWideImage &&
            lhs.cfrUseWideImageMetadata == rhs.cfrUseWideImageMetadata &&
            lhs.checkForMultipleAdminsOnAccount == rhs.checkForMultipleAdminsOnAccount &&
            lhs.checkForMultipleAdminsOnAccountMetadata == rhs.checkForMultipleAdminsOnAccountMetadata &&
            lhs.chromeSignatureEnabled == rhs.chromeSignatureEnabled &&
            lhs.chromeSignatureEnabledMetadata == rhs.chromeSignatureEnabledMetadata &&
            lhs.commentEmailShowMessageText == rhs.commentEmailShowMessageText &&
            lhs.commentEmailShowMessageTextMetadata == rhs.commentEmailShowMessageTextMetadata &&
            lhs.commentsAllowEnvelopeOverride == rhs.commentsAllowEnvelopeOverride &&
            lhs.commentsAllowEnvelopeOverrideMetadata == rhs.commentsAllowEnvelopeOverrideMetadata &&
            lhs.conditionalFieldsEnabled == rhs.conditionalFieldsEnabled &&
            lhs.conditionalFieldsEnabledMetadata == rhs.conditionalFieldsEnabledMetadata &&
            lhs.consumerDisclosureFrequency == rhs.consumerDisclosureFrequency &&
            lhs.consumerDisclosureFrequencyMetadata == rhs.consumerDisclosureFrequencyMetadata &&
            lhs.convertPdfFields == rhs.convertPdfFields &&
            lhs.convertPdfFieldsMetadata == rhs.convertPdfFieldsMetadata &&
            lhs.dataPopulationScope == rhs.dataPopulationScope &&
            lhs.dataPopulationScopeMetadata == rhs.dataPopulationScopeMetadata &&
            lhs.disableMobileApp == rhs.disableMobileApp &&
            lhs.disableMobileAppMetadata == rhs.disableMobileAppMetadata &&
            lhs.disableMobilePushNotifications == rhs.disableMobilePushNotifications &&
            lhs.disableMobilePushNotificationsMetadata == rhs.disableMobilePushNotificationsMetadata &&
            lhs.disableMobileSending == rhs.disableMobileSending &&
            lhs.disableMobileSendingMetadata == rhs.disableMobileSendingMetadata &&
            lhs.disableMultipleSessions == rhs.disableMultipleSessions &&
            lhs.disableMultipleSessionsMetadata == rhs.disableMultipleSessionsMetadata &&
            lhs.disablePurgeNotificationsForSenderMetadata == rhs.disablePurgeNotificationsForSenderMetadata &&
            lhs.disableSignerCertView == rhs.disableSignerCertView &&
            lhs.disableSignerCertViewMetadata == rhs.disableSignerCertViewMetadata &&
            lhs.disableSignerHistoryView == rhs.disableSignerHistoryView &&
            lhs.disableSignerHistoryViewMetadata == rhs.disableSignerHistoryViewMetadata &&
            lhs.disableStyleSignature == rhs.disableStyleSignature &&
            lhs.disableStyleSignatureMetadata == rhs.disableStyleSignatureMetadata &&
            lhs.disableUploadSignature == rhs.disableUploadSignature &&
            lhs.disableUploadSignatureMetadata == rhs.disableUploadSignatureMetadata &&
            lhs.disableUserSharing == rhs.disableUserSharing &&
            lhs.disableUserSharingMetadata == rhs.disableUserSharingMetadata &&
            lhs.displayBetaSwitch == rhs.displayBetaSwitch &&
            lhs.displayBetaSwitchMetadata == rhs.displayBetaSwitchMetadata &&
            lhs.documentConversionRestrictions == rhs.documentConversionRestrictions &&
            lhs.documentConversionRestrictionsMetadata == rhs.documentConversionRestrictionsMetadata &&
            lhs.documentRetention == rhs.documentRetention &&
            lhs.documentRetentionMetadata == rhs.documentRetentionMetadata &&
            lhs.documentRetentionPurgeTabs == rhs.documentRetentionPurgeTabs &&
            lhs.documentVisibility == rhs.documentVisibility &&
            lhs.documentVisibilityMetadata == rhs.documentVisibilityMetadata &&
            lhs.emailTemplateVersion == rhs.emailTemplateVersion &&
            lhs.emailTemplateVersionMetadata == rhs.emailTemplateVersionMetadata &&
            lhs.enableAccessCodeGenerator == rhs.enableAccessCodeGenerator &&
            lhs.enableAccessCodeGeneratorMetadata == rhs.enableAccessCodeGeneratorMetadata &&
            lhs.enableAdvancedPayments == rhs.enableAdvancedPayments &&
            lhs.enableAdvancedPaymentsMetadata == rhs.enableAdvancedPaymentsMetadata &&
            lhs.enableAdvancedPowerForms == rhs.enableAdvancedPowerForms &&
            lhs.enableAdvancedPowerFormsMetadata == rhs.enableAdvancedPowerFormsMetadata &&
            lhs.enableAgreementActionsForCLM == rhs.enableAgreementActionsForCLM &&
            lhs.enableAgreementActionsForCLMMetadata == rhs.enableAgreementActionsForCLMMetadata &&
            lhs.enableAgreementActionsForESign == rhs.enableAgreementActionsForESign &&
            lhs.enableAgreementActionsForESignMetadata == rhs.enableAgreementActionsForESignMetadata &&
            lhs.enableAutoNav == rhs.enableAutoNav &&
            lhs.enableAutoNavMetadata == rhs.enableAutoNavMetadata &&
            lhs.enableCalculatedFields == rhs.enableCalculatedFields &&
            lhs.enableCalculatedFieldsMetadata == rhs.enableCalculatedFieldsMetadata &&
            lhs.enableClickwraps == rhs.enableClickwraps &&
            lhs.enableClickwrapsMetadata == rhs.enableClickwrapsMetadata &&
            lhs.enableCommentsHistoryDownloadInSigning == rhs.enableCommentsHistoryDownloadInSigning &&
            lhs.enableCommentsHistoryDownloadInSigningMetadata == rhs.enableCommentsHistoryDownloadInSigningMetadata &&
            lhs.enableCustomerSatisfactionMetricTracking == rhs.enableCustomerSatisfactionMetricTracking &&
            lhs.enableCustomerSatisfactionMetricTrackingMetadata == rhs.enableCustomerSatisfactionMetricTrackingMetadata &&
            lhs.enableDSPro == rhs.enableDSPro &&
            lhs.enableDSProMetadata == rhs.enableDSProMetadata &&
            lhs.enableEnvelopeStampingByAccountAdmin == rhs.enableEnvelopeStampingByAccountAdmin &&
            lhs.enableEnvelopeStampingByAccountAdminMetadata == rhs.enableEnvelopeStampingByAccountAdminMetadata &&
            lhs.enableEnvelopeStampingByDSAdmin == rhs.enableEnvelopeStampingByDSAdmin &&
            lhs.enableEnvelopeStampingByDSAdminMetadata == rhs.enableEnvelopeStampingByDSAdminMetadata &&
            lhs.enableInBrowserEditor == rhs.enableInBrowserEditor &&
            lhs.enableInBrowserEditorMetadata == rhs.enableInBrowserEditorMetadata &&
            lhs.enablePaymentProcessing == rhs.enablePaymentProcessing &&
            lhs.enablePaymentProcessingMetadata == rhs.enablePaymentProcessingMetadata &&
            lhs.enablePowerForm == rhs.enablePowerForm &&
            lhs.enablePowerFormDirect == rhs.enablePowerFormDirect &&
            lhs.enablePowerFormDirectMetadata == rhs.enablePowerFormDirectMetadata &&
            lhs.enablePowerFormMetadata == rhs.enablePowerFormMetadata &&
            lhs.enableRecipientDomainValidation == rhs.enableRecipientDomainValidation &&
            lhs.enableRecipientDomainValidationMetadata == rhs.enableRecipientDomainValidationMetadata &&
            lhs.enableReportLinks == rhs.enableReportLinks &&
            lhs.enableReportLinksMetadata == rhs.enableReportLinksMetadata &&
            lhs.enableRequireSignOnPaper == rhs.enableRequireSignOnPaper &&
            lhs.enableRequireSignOnPaperMetadata == rhs.enableRequireSignOnPaperMetadata &&
            lhs.enableReservedDomain == rhs.enableReservedDomain &&
            lhs.enableReservedDomainMetadata == rhs.enableReservedDomainMetadata &&
            lhs.enableResponsiveSigning == rhs.enableResponsiveSigning &&
            lhs.enableResponsiveSigningMetadata == rhs.enableResponsiveSigningMetadata &&
            lhs.enableScheduledRelease == rhs.enableScheduledRelease &&
            lhs.enableScheduledReleaseMetadata == rhs.enableScheduledReleaseMetadata &&
            lhs.enableSearchUI == rhs.enableSearchUI &&
            lhs.enableSearchUIMetadata == rhs.enableSearchUIMetadata &&
            lhs.enableSendingTagsFontSettings == rhs.enableSendingTagsFontSettings &&
            lhs.enableSendingTagsFontSettingsMetadata == rhs.enableSendingTagsFontSettingsMetadata &&
            lhs.enableSendToAgent == rhs.enableSendToAgent &&
            lhs.enableSendToAgentMetadata == rhs.enableSendToAgentMetadata &&
            lhs.enableSendToIntermediary == rhs.enableSendToIntermediary &&
            lhs.enableSendToIntermediaryMetadata == rhs.enableSendToIntermediaryMetadata &&
            lhs.enableSendToManage == rhs.enableSendToManage &&
            lhs.enableSendToManageMetadata == rhs.enableSendToManageMetadata &&
            lhs.enableSequentialSigningAPI == rhs.enableSequentialSigningAPI &&
            lhs.enableSequentialSigningAPIMetadata == rhs.enableSequentialSigningAPIMetadata &&
            lhs.enableSequentialSigningUI == rhs.enableSequentialSigningUI &&
            lhs.enableSequentialSigningUIMetadata == rhs.enableSequentialSigningUIMetadata &&
            lhs.enableSignerAttachments == rhs.enableSignerAttachments &&
            lhs.enableSignerAttachmentsMetadata == rhs.enableSignerAttachmentsMetadata &&
            lhs.enableSigningExtensionComments == rhs.enableSigningExtensionComments &&
            lhs.enableSigningExtensionCommentsMetadata == rhs.enableSigningExtensionCommentsMetadata &&
            lhs.enableSigningExtensionConversations == rhs.enableSigningExtensionConversations &&
            lhs.enableSigningExtensionConversationsMetadata == rhs.enableSigningExtensionConversationsMetadata &&
            lhs.enableSigningOrderSettingsForAccount == rhs.enableSigningOrderSettingsForAccount &&
            lhs.enableSigningOrderSettingsForAccountMetadata == rhs.enableSigningOrderSettingsForAccountMetadata &&
            lhs.enableSignOnPaper == rhs.enableSignOnPaper &&
            lhs.enableSignOnPaperMetadata == rhs.enableSignOnPaperMetadata &&
            lhs.enableSignOnPaperOverride == rhs.enableSignOnPaperOverride &&
            lhs.enableSignOnPaperOverrideMetadata == rhs.enableSignOnPaperOverrideMetadata &&
            lhs.enableSignWithNotary == rhs.enableSignWithNotary &&
            lhs.enableSignWithNotaryMetadata == rhs.enableSignWithNotaryMetadata &&
            lhs.enableSmartContracts == rhs.enableSmartContracts &&
            lhs.enableSmartContractsMetadata == rhs.enableSmartContractsMetadata &&
            lhs.enableSMSAuthentication == rhs.enableSMSAuthentication &&
            lhs.enableSMSAuthenticationMetadata == rhs.enableSMSAuthenticationMetadata &&
            lhs.enableSocialIdLogin == rhs.enableSocialIdLogin &&
            lhs.enableSocialIdLoginMetadata == rhs.enableSocialIdLoginMetadata &&
            lhs.enableStrikeThrough == rhs.enableStrikeThrough &&
            lhs.enableStrikeThroughMetadata == rhs.enableStrikeThroughMetadata &&
            lhs.enableTransactionPoint == rhs.enableTransactionPoint &&
            lhs.enableTransactionPointMetadata == rhs.enableTransactionPointMetadata &&
            lhs.enableVaulting == rhs.enableVaulting &&
            lhs.enableVaultingMetadata == rhs.enableVaultingMetadata &&
            lhs.enableWitnessing == rhs.enableWitnessing &&
            lhs.enableWitnessingMetadata == rhs.enableWitnessingMetadata &&
            lhs.enforceTemplateNameUniqueness == rhs.enforceTemplateNameUniqueness &&
            lhs.enforceTemplateNameUniquenessMetadata == rhs.enforceTemplateNameUniquenessMetadata &&
            lhs.envelopeIntegrationAllowed == rhs.envelopeIntegrationAllowed &&
            lhs.envelopeIntegrationAllowedMetadata == rhs.envelopeIntegrationAllowedMetadata &&
            lhs.envelopeIntegrationEnabled == rhs.envelopeIntegrationEnabled &&
            lhs.envelopeIntegrationEnabledMetadata == rhs.envelopeIntegrationEnabledMetadata &&
            lhs.envelopeStampingDefaultValue == rhs.envelopeStampingDefaultValue &&
            lhs.envelopeStampingDefaultValueMetadata == rhs.envelopeStampingDefaultValueMetadata &&
            lhs.expressSend == rhs.expressSend &&
            lhs.expressSendAllowTabs == rhs.expressSendAllowTabs &&
            lhs.expressSendAllowTabsMetadata == rhs.expressSendAllowTabsMetadata &&
            lhs.expressSendMetadata == rhs.expressSendMetadata &&
            lhs.externalDocumentSources == rhs.externalDocumentSources &&
            lhs.externalSignaturePadType == rhs.externalSignaturePadType &&
            lhs.externalSignaturePadTypeMetadata == rhs.externalSignaturePadTypeMetadata &&
            lhs.faxOutEnabled == rhs.faxOutEnabled &&
            lhs.faxOutEnabledMetadata == rhs.faxOutEnabledMetadata &&
            lhs.guidedFormsHtmlAllowed == rhs.guidedFormsHtmlAllowed &&
            lhs.guidedFormsHtmlAllowedMetadata == rhs.guidedFormsHtmlAllowedMetadata &&
            lhs.hideAccountAddressInCoC == rhs.hideAccountAddressInCoC &&
            lhs.hideAccountAddressInCoCMetadata == rhs.hideAccountAddressInCoCMetadata &&
            lhs.hidePricing == rhs.hidePricing &&
            lhs.hidePricingMetadata == rhs.hidePricingMetadata &&
            lhs.idCheckConfigurations == rhs.idCheckConfigurations &&
            lhs.idCheckExpire == rhs.idCheckExpire &&
            lhs.idCheckExpireDays == rhs.idCheckExpireDays &&
            lhs.idCheckExpireDaysMetadata == rhs.idCheckExpireDaysMetadata &&
            lhs.idCheckExpireMetadata == rhs.idCheckExpireMetadata &&
            lhs.idCheckExpireMinutes == rhs.idCheckExpireMinutes &&
            lhs.idCheckExpireMinutesMetadata == rhs.idCheckExpireMinutesMetadata &&
            lhs.idCheckRequired == rhs.idCheckRequired &&
            lhs.idCheckRequiredMetadata == rhs.idCheckRequiredMetadata &&
            lhs.identityVerification == rhs.identityVerification &&
            lhs.identityVerificationMetadata == rhs.identityVerificationMetadata &&
            lhs.ignoreErrorIfAnchorTabNotFound == rhs.ignoreErrorIfAnchorTabNotFound &&
            lhs.ignoreErrorIfAnchorTabNotFoundMetadataEnabled == rhs.ignoreErrorIfAnchorTabNotFoundMetadataEnabled &&
            lhs.inPersonIDCheckQuestion == rhs.inPersonIDCheckQuestion &&
            lhs.inPersonIDCheckQuestionMetadata == rhs.inPersonIDCheckQuestionMetadata &&
            lhs.inPersonSigningEnabled == rhs.inPersonSigningEnabled &&
            lhs.inPersonSigningEnabledMetadata == rhs.inPersonSigningEnabledMetadata &&
            lhs.inSessionEnabled == rhs.inSessionEnabled &&
            lhs.inSessionEnabledMetadata == rhs.inSessionEnabledMetadata &&
            lhs.inSessionSuppressEmails == rhs.inSessionSuppressEmails &&
            lhs.inSessionSuppressEmailsMetadata == rhs.inSessionSuppressEmailsMetadata &&
            lhs.maximumSigningGroups == rhs.maximumSigningGroups &&
            lhs.maximumSigningGroupsMetadata == rhs.maximumSigningGroupsMetadata &&
            lhs.maximumUsersPerSigningGroup == rhs.maximumUsersPerSigningGroup &&
            lhs.maximumUsersPerSigningGroupMetadata == rhs.maximumUsersPerSigningGroupMetadata &&
            lhs.maxNumberOfCustomStamps == rhs.maxNumberOfCustomStamps &&
            lhs.mobileSessionTimeout == rhs.mobileSessionTimeout &&
            lhs.mobileSessionTimeoutMetadata == rhs.mobileSessionTimeoutMetadata &&
            lhs.numberOfActiveCustomStamps == rhs.numberOfActiveCustomStamps &&
            lhs.optInMobileSigningV02 == rhs.optInMobileSigningV02 &&
            lhs.optInMobileSigningV02Metadata == rhs.optInMobileSigningV02Metadata &&
            lhs.optOutAutoNavTextAndTabColorUpdates == rhs.optOutAutoNavTextAndTabColorUpdates &&
            lhs.optOutAutoNavTextAndTabColorUpdatesMetadata == rhs.optOutAutoNavTextAndTabColorUpdatesMetadata &&
            lhs.optOutNewPlatformSeal == rhs.optOutNewPlatformSeal &&
            lhs.optOutNewPlatformSealPlatformMetadata == rhs.optOutNewPlatformSealPlatformMetadata &&
            lhs.phoneAuthRecipientMayProvidePhoneNumber == rhs.phoneAuthRecipientMayProvidePhoneNumber &&
            lhs.phoneAuthRecipientMayProvidePhoneNumberMetadata == rhs.phoneAuthRecipientMayProvidePhoneNumberMetadata &&
            lhs.pkiSignDownloadedPDFDocs == rhs.pkiSignDownloadedPDFDocs &&
            lhs.pkiSignDownloadedPDFDocsMetadata == rhs.pkiSignDownloadedPDFDocsMetadata &&
            lhs.recipientsCanSignOffline == rhs.recipientsCanSignOffline &&
            lhs.recipientsCanSignOfflineMetadata == rhs.recipientsCanSignOfflineMetadata &&
            lhs.recipientSigningAutoNavigationControl == rhs.recipientSigningAutoNavigationControl &&
            lhs.recipientSigningAutoNavigationControlMetadata == rhs.recipientSigningAutoNavigationControlMetadata &&
            lhs.require21CFRpt11Compliance == rhs.require21CFRpt11Compliance &&
            lhs.require21CFRpt11ComplianceMetadata == rhs.require21CFRpt11ComplianceMetadata &&
            lhs.requireDeclineReason == rhs.requireDeclineReason &&
            lhs.requireDeclineReasonMetadata == rhs.requireDeclineReasonMetadata &&
            lhs.requireExternalUserManagement == rhs.requireExternalUserManagement &&
            lhs.requireExternalUserManagementMetadata == rhs.requireExternalUserManagementMetadata &&
            lhs.requireSignerCertificateType == rhs.requireSignerCertificateType &&
            lhs.requireSignerCertificateTypeMetadata == rhs.requireSignerCertificateTypeMetadata &&
            lhs.rsaVeridAccountName == rhs.rsaVeridAccountName &&
            lhs.rsaVeridPassword == rhs.rsaVeridPassword &&
            lhs.rsaVeridRuleset == rhs.rsaVeridRuleset &&
            lhs.rsaVeridUserId == rhs.rsaVeridUserId &&
            lhs.selfSignedRecipientEmailDocument == rhs.selfSignedRecipientEmailDocument &&
            lhs.selfSignedRecipientEmailDocumentMetadata == rhs.selfSignedRecipientEmailDocumentMetadata &&
            lhs.selfSignedRecipientEmailDocumentUserOverride == rhs.selfSignedRecipientEmailDocumentUserOverride &&
            lhs.selfSignedRecipientEmailDocumentUserOverrideMetadata == rhs.selfSignedRecipientEmailDocumentUserOverrideMetadata &&
            lhs.senderCanSignInEachLocation == rhs.senderCanSignInEachLocation &&
            lhs.senderCanSignInEachLocationMetadata == rhs.senderCanSignInEachLocationMetadata &&
            lhs.senderMustAuthenticateSigning == rhs.senderMustAuthenticateSigning &&
            lhs.senderMustAuthenticateSigningMetadata == rhs.senderMustAuthenticateSigningMetadata &&
            lhs.sendingTagsFontColor == rhs.sendingTagsFontColor &&
            lhs.sendingTagsFontColorMetadata == rhs.sendingTagsFontColorMetadata &&
            lhs.sendingTagsFontName == rhs.sendingTagsFontName &&
            lhs.sendingTagsFontNameMetadata == rhs.sendingTagsFontNameMetadata &&
            lhs.sendingTagsFontSize == rhs.sendingTagsFontSize &&
            lhs.sendingTagsFontSizeMetadata == rhs.sendingTagsFontSizeMetadata &&
            lhs.sendToCertifiedDeliveryEnabled == rhs.sendToCertifiedDeliveryEnabled &&
            lhs.sendToCertifiedDeliveryEnabledMetadata == rhs.sendToCertifiedDeliveryEnabledMetadata &&
            lhs.sessionTimeout == rhs.sessionTimeout &&
            lhs.sessionTimeoutMetadata == rhs.sessionTimeoutMetadata &&
            lhs.setRecipEmailLang == rhs.setRecipEmailLang &&
            lhs.setRecipEmailLangMetadata == rhs.setRecipEmailLangMetadata &&
            lhs.setRecipSignLang == rhs.setRecipSignLang &&
            lhs.setRecipSignLangMetadata == rhs.setRecipSignLangMetadata &&
            lhs.sharedTemplateFolders == rhs.sharedTemplateFolders &&
            lhs.sharedTemplateFoldersMetadata == rhs.sharedTemplateFoldersMetadata &&
            lhs.showCompleteDialogInEmbeddedSession == rhs.showCompleteDialogInEmbeddedSession &&
            lhs.showCompleteDialogInEmbeddedSessionMetadata == rhs.showCompleteDialogInEmbeddedSessionMetadata &&
            lhs.showConditionalRoutingOnSend == rhs.showConditionalRoutingOnSend &&
            lhs.showConditionalRoutingOnSendMetadata == rhs.showConditionalRoutingOnSendMetadata &&
            lhs.showInitialConditionalFields == rhs.showInitialConditionalFields &&
            lhs.showInitialConditionalFieldsMetadata == rhs.showInitialConditionalFieldsMetadata &&
            lhs.showLocalizedWatermarks == rhs.showLocalizedWatermarks &&
            lhs.showLocalizedWatermarksMetadata == rhs.showLocalizedWatermarksMetadata &&
            lhs.showTutorials == rhs.showTutorials &&
            lhs.showTutorialsMetadata == rhs.showTutorialsMetadata &&
            lhs.signatureProviders == rhs.signatureProviders &&
            lhs.signatureProvidersMetadata == rhs.signatureProvidersMetadata &&
            lhs.signDateFormat == rhs.signDateFormat &&
            lhs.signDateFormatMetadata == rhs.signDateFormatMetadata &&
            lhs.signerAttachCertificateToEnvelopePDF == rhs.signerAttachCertificateToEnvelopePDF &&
            lhs.signerAttachCertificateToEnvelopePDFMetadata == rhs.signerAttachCertificateToEnvelopePDFMetadata &&
            lhs.signerAttachConcat == rhs.signerAttachConcat &&
            lhs.signerAttachConcatMetadata == rhs.signerAttachConcatMetadata &&
            lhs.signerCanCreateAccount == rhs.signerCanCreateAccount &&
            lhs.signerCanCreateAccountMetadata == rhs.signerCanCreateAccountMetadata &&
            lhs.signerCanSignOnMobile == rhs.signerCanSignOnMobile &&
            lhs.signerCanSignOnMobileMetadata == rhs.signerCanSignOnMobileMetadata &&
            lhs.signerInSessionUseEnvelopeCompleteEmail == rhs.signerInSessionUseEnvelopeCompleteEmail &&
            lhs.signerInSessionUseEnvelopeCompleteEmailMetadata == rhs.signerInSessionUseEnvelopeCompleteEmailMetadata &&
            lhs.signerLoginRequirements == rhs.signerLoginRequirements &&
            lhs.signerLoginRequirementsMetadata == rhs.signerLoginRequirementsMetadata &&
            lhs.signerMustHaveAccount == rhs.signerMustHaveAccount &&
            lhs.signerMustHaveAccountMetadata == rhs.signerMustHaveAccountMetadata &&
            lhs.signerMustLoginToSign == rhs.signerMustLoginToSign &&
            lhs.signerMustLoginToSignMetadata == rhs.signerMustLoginToSignMetadata &&
            lhs.signerShowSecureFieldInitialValues == rhs.signerShowSecureFieldInitialValues &&
            lhs.signerShowSecureFieldInitialValuesMetadata == rhs.signerShowSecureFieldInitialValuesMetadata &&
            lhs.signingSessionTimeout == rhs.signingSessionTimeout &&
            lhs.signingSessionTimeoutMetadata == rhs.signingSessionTimeoutMetadata &&
            lhs.signingUiVersion == rhs.signingUiVersion &&
            lhs.signingUiVersionMetadata == rhs.signingUiVersionMetadata &&
            lhs.signTimeFormat == rhs.signTimeFormat &&
            lhs.signTimeFormatMetadata == rhs.signTimeFormatMetadata &&
            lhs.signTimeShowAmPm == rhs.signTimeShowAmPm &&
            lhs.signTimeShowAmPmMetadata == rhs.signTimeShowAmPmMetadata &&
            lhs.simplifiedSendingEnabled == rhs.simplifiedSendingEnabled &&
            lhs.simplifiedSendingEnabledMetadata == rhs.simplifiedSendingEnabledMetadata &&
            lhs.singleSignOnEnabled == rhs.singleSignOnEnabled &&
            lhs.singleSignOnEnabledMetadata == rhs.singleSignOnEnabledMetadata &&
            lhs.skipAuthCompletedEnvelopes == rhs.skipAuthCompletedEnvelopes &&
            lhs.skipAuthCompletedEnvelopesMetadata == rhs.skipAuthCompletedEnvelopesMetadata &&
            lhs.socialIdRecipAuth == rhs.socialIdRecipAuth &&
            lhs.socialIdRecipAuthMetadata == rhs.socialIdRecipAuthMetadata &&
            lhs.specifyDocumentVisibility == rhs.specifyDocumentVisibility &&
            lhs.specifyDocumentVisibilityMetadata == rhs.specifyDocumentVisibilityMetadata &&
            lhs.startInAdvancedCorrect == rhs.startInAdvancedCorrect &&
            lhs.startInAdvancedCorrectMetadata == rhs.startInAdvancedCorrectMetadata &&
            lhs.supplementalDocumentsMustAccept == rhs.supplementalDocumentsMustAccept &&
            lhs.supplementalDocumentsMustAcceptMetadata == rhs.supplementalDocumentsMustAcceptMetadata &&
            lhs.supplementalDocumentsMustRead == rhs.supplementalDocumentsMustRead &&
            lhs.supplementalDocumentsMustReadMetadata == rhs.supplementalDocumentsMustReadMetadata &&
            lhs.supplementalDocumentsMustView == rhs.supplementalDocumentsMustView &&
            lhs.supplementalDocumentsMustViewMetadata == rhs.supplementalDocumentsMustViewMetadata &&
            lhs.suppressCertificateEnforcement == rhs.suppressCertificateEnforcement &&
            lhs.suppressCertificateEnforcementMetadata == rhs.suppressCertificateEnforcementMetadata &&
            lhs.tabAccountSettings == rhs.tabAccountSettings &&
            lhs.timezoneOffsetAPI == rhs.timezoneOffsetAPI &&
            lhs.timezoneOffsetAPIMetadata == rhs.timezoneOffsetAPIMetadata &&
            lhs.timezoneOffsetUI == rhs.timezoneOffsetUI &&
            lhs.timezoneOffsetUIMetadata == rhs.timezoneOffsetUIMetadata &&
            lhs.universalSignatureOptIn == rhs.universalSignatureOptIn &&
            lhs.useAccountLevelEmail == rhs.useAccountLevelEmail &&
            lhs.useAccountLevelEmailMetadata == rhs.useAccountLevelEmailMetadata &&
            lhs.useConsumerDisclosure == rhs.useConsumerDisclosure &&
            lhs.useConsumerDisclosureMetadata == rhs.useConsumerDisclosureMetadata &&
            lhs.useConsumerDisclosureWithinAccount == rhs.useConsumerDisclosureWithinAccount &&
            lhs.useConsumerDisclosureWithinAccountMetadata == rhs.useConsumerDisclosureWithinAccountMetadata &&
            lhs.useDerivedKeys == rhs.useDerivedKeys &&
            lhs.useDerivedKeysMetadata == rhs.useDerivedKeysMetadata &&
            lhs.useDocuSignExpressSignerCertificate == rhs.useDocuSignExpressSignerCertificate &&
            lhs.useDocuSignExpressSignerCertificateMetadata == rhs.useDocuSignExpressSignerCertificateMetadata &&
            lhs.useMultiAppGroupsData == rhs.useMultiAppGroupsData &&
            lhs.useMultiAppGroupsDataMetadata == rhs.useMultiAppGroupsDataMetadata &&
            lhs.useNewBlobForPdf == rhs.useNewBlobForPdf &&
            lhs.useNewBlobForPdfMetadata == rhs.useNewBlobForPdfMetadata &&
            lhs.useSAFESignerCertificates == rhs.useSAFESignerCertificates &&
            lhs.useSAFESignerCertificatesMetadata == rhs.useSAFESignerCertificatesMetadata &&
            lhs.usesAPI == rhs.usesAPI &&
            lhs.usesAPIMetadata == rhs.usesAPIMetadata &&
            lhs.useSignatureProviderPlatform == rhs.useSignatureProviderPlatform &&
            lhs.useSignatureProviderPlatformMetadata == rhs.useSignatureProviderPlatformMetadata &&
            lhs.validationsAllowed == rhs.validationsAllowed &&
            lhs.validationsAllowedMetadata == rhs.validationsAllowedMetadata &&
            lhs.validationsBrand == rhs.validationsBrand &&
            lhs.validationsBrandMetadata == rhs.validationsBrandMetadata &&
            lhs.validationsCadence == rhs.validationsCadence &&
            lhs.validationsCadenceMetadata == rhs.validationsCadenceMetadata &&
            lhs.validationsEnabled == rhs.validationsEnabled &&
            lhs.validationsEnabledMetadata == rhs.validationsEnabledMetadata &&
            lhs.validationsReport == rhs.validationsReport &&
            lhs.validationsReportMetadata == rhs.validationsReportMetadata &&
            lhs.waterMarkEnabled == rhs.waterMarkEnabled &&
            lhs.waterMarkEnabledMetadata == rhs.waterMarkEnabledMetadata &&
            lhs.writeReminderToEnvelopeHistory == rhs.writeReminderToEnvelopeHistory &&
            lhs.writeReminderToEnvelopeHistoryMetadata == rhs.writeReminderToEnvelopeHistoryMetadata &&
            lhs.wurflMinAllowableScreenSize == rhs.wurflMinAllowableScreenSize &&
            lhs.wurflMinAllowableScreenSizeMetadata == rhs.wurflMinAllowableScreenSizeMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCodeFormat?.hashValue)
        hasher.combine(accountDateTimeFormat?.hashValue)
        hasher.combine(accountDateTimeFormatMetadata?.hashValue)
        hasher.combine(accountDefaultLanguage?.hashValue)
        hasher.combine(accountDefaultLanguageMetadata?.hashValue)
        hasher.combine(accountName?.hashValue)
        hasher.combine(accountNameMetadata?.hashValue)
        hasher.combine(accountNotification?.hashValue)
        hasher.combine(accountUISettings?.hashValue)
        hasher.combine(adoptSigConfig?.hashValue)
        hasher.combine(adoptSigConfigMetadata?.hashValue)
        hasher.combine(advancedCorrect?.hashValue)
        hasher.combine(advancedCorrectMetadata?.hashValue)
        hasher.combine(allowAccessCodeFormat?.hashValue)
        hasher.combine(allowAccessCodeFormatMetadata?.hashValue)
        hasher.combine(allowAccountManagementGranular?.hashValue)
        hasher.combine(allowAccountManagementGranularMetadata?.hashValue)
        hasher.combine(allowAccountMemberNameChange?.hashValue)
        hasher.combine(allowAccountMemberNameChangeMetadata?.hashValue)
        hasher.combine(allowAdvancedRecipientRoutingConditional?.hashValue)
        hasher.combine(allowAdvancedRecipientRoutingConditionalMetadata?.hashValue)
        hasher.combine(allowAgentNameEmailEdit?.hashValue)
        hasher.combine(allowAgentNameEmailEditMetadata?.hashValue)
        hasher.combine(allowAgreementActions?.hashValue)
        hasher.combine(allowAgreementActionsMetadata?.hashValue)
        hasher.combine(allowAutoNavSettings?.hashValue)
        hasher.combine(allowAutoNavSettingsMetadata?.hashValue)
        hasher.combine(allowAutoTagging?.hashValue)
        hasher.combine(allowAutoTaggingMetadata?.hashValue)
        hasher.combine(allowBulkSend?.hashValue)
        hasher.combine(allowBulkSendMetadata?.hashValue)
        hasher.combine(allowCDWithdraw?.hashValue)
        hasher.combine(allowCDWithdrawMetadata?.hashValue)
        hasher.combine(allowConnectHttpListenerConfigs?.hashValue)
        hasher.combine(allowConnectSendFinishLater?.hashValue)
        hasher.combine(allowConnectSendFinishLaterMetadata?.hashValue)
        hasher.combine(allowConnectUnifiedPayloadUI?.hashValue)
        hasher.combine(allowConsumerDisclosureOverride?.hashValue)
        hasher.combine(allowConsumerDisclosureOverrideMetadata?.hashValue)
        hasher.combine(allowDataDownload?.hashValue)
        hasher.combine(allowDataDownloadMetadata?.hashValue)
        hasher.combine(allowDocumentDisclosures?.hashValue)
        hasher.combine(allowDocumentDisclosuresMetadata?.hashValue)
        hasher.combine(allowDocumentsOnSignedEnvelopes?.hashValue)
        hasher.combine(allowDocumentsOnSignedEnvelopesMetadata?.hashValue)
        hasher.combine(allowDocumentVisibility?.hashValue)
        hasher.combine(allowDocumentVisibilityMetadata?.hashValue)
        hasher.combine(allowEHankoStamps?.hashValue)
        hasher.combine(allowEHankoStampsMetadata?.hashValue)
        hasher.combine(allowENoteEOriginal?.hashValue)
        hasher.combine(allowENoteEOriginalMetadata?.hashValue)
        hasher.combine(allowEnvelopeCorrect?.hashValue)
        hasher.combine(allowEnvelopeCorrectMetadata?.hashValue)
        hasher.combine(allowEnvelopeCustodyTransfer?.hashValue)
        hasher.combine(allowEnvelopeCustodyTransferMetadata?.hashValue)
        hasher.combine(allowEnvelopeCustomFields?.hashValue)
        hasher.combine(allowEnvelopeCustomFieldsMetadata?.hashValue)
        hasher.combine(allowEnvelopePublishReporting?.hashValue)
        hasher.combine(allowEnvelopePublishReportingMetadata?.hashValue)
        hasher.combine(allowEnvelopeReporting?.hashValue)
        hasher.combine(allowEnvelopeReportingMetadata?.hashValue)
        hasher.combine(allowExpression?.hashValue)
        hasher.combine(allowExpressionMetadata?.hashValue)
        hasher.combine(allowExpressSignerCertificate?.hashValue)
        hasher.combine(allowExpressSignerCertificateMetadata?.hashValue)
        hasher.combine(allowExtendedSendingResourceFile?.hashValue)
        hasher.combine(allowExtendedSendingResourceFileMetadata?.hashValue)
        hasher.combine(allowExternalSignaturePad?.hashValue)
        hasher.combine(allowExternalSignaturePadMetadata?.hashValue)
        hasher.combine(allowIDVLevel1?.hashValue)
        hasher.combine(allowIDVLevel1Metadata?.hashValue)
        hasher.combine(allowIDVPlatform?.hashValue)
        hasher.combine(allowIDVPlatformMetadata?.hashValue)
        hasher.combine(allowInPerson?.hashValue)
        hasher.combine(allowInPersonMetadata?.hashValue)
        hasher.combine(allowManagedStamps?.hashValue)
        hasher.combine(allowManagedStampsMetadata?.hashValue)
        hasher.combine(allowMarkup?.hashValue)
        hasher.combine(allowMarkupMetadata?.hashValue)
        hasher.combine(allowMemberTimeZone?.hashValue)
        hasher.combine(allowMemberTimeZoneMetadata?.hashValue)
        hasher.combine(allowMergeFields?.hashValue)
        hasher.combine(allowMergeFieldsMetadata?.hashValue)
        hasher.combine(allowMultipleBrandProfiles?.hashValue)
        hasher.combine(allowMultipleBrandProfilesMetadata?.hashValue)
        hasher.combine(allowMultipleSignerAttachments?.hashValue)
        hasher.combine(allowMultipleSignerAttachmentsMetadata?.hashValue)
        hasher.combine(allowNonUSPhoneAuth?.hashValue)
        hasher.combine(allowNonUSPhoneAuthMetadata?.hashValue)
        hasher.combine(allowOcrOfEnvelopeDocuments?.hashValue)
        hasher.combine(allowOcrOfEnvelopeDocumentsMetadata?.hashValue)
        hasher.combine(allowOfflineSigning?.hashValue)
        hasher.combine(allowOfflineSigningMetadata?.hashValue)
        hasher.combine(allowOpenTrustSignerCertificate?.hashValue)
        hasher.combine(allowOpenTrustSignerCertificateMetadata?.hashValue)
        hasher.combine(allowOrganizations?.hashValue)
        hasher.combine(allowOrganizationsMetadata?.hashValue)
        hasher.combine(allowPaymentProcessing?.hashValue)
        hasher.combine(allowPaymentProcessingMetadata?.hashValue)
        hasher.combine(allowPersonalSignerCertificate?.hashValue)
        hasher.combine(allowPersonalSignerCertificateMetadata?.hashValue)
        hasher.combine(allowPhoneAuthentication?.hashValue)
        hasher.combine(allowPhoneAuthenticationMetadata?.hashValue)
        hasher.combine(allowPhoneAuthOverride?.hashValue)
        hasher.combine(allowPhoneAuthOverrideMetadata?.hashValue)
        hasher.combine(allowPrivateSigningGroups?.hashValue)
        hasher.combine(allowPrivateSigningGroupsMetadata?.hashValue)
        hasher.combine(allowReminders?.hashValue)
        hasher.combine(allowRemindersMetadata?.hashValue)
        hasher.combine(allowRemoteNotary?.hashValue)
        hasher.combine(allowRemoteNotaryMetadata?.hashValue)
        hasher.combine(allowResourceFileBranding?.hashValue)
        hasher.combine(allowResourceFileBrandingMetadata?.hashValue)
        hasher.combine(allowSafeBioPharmaSignerCertificate?.hashValue)
        hasher.combine(allowSafeBioPharmaSignerCertificateMetadata?.hashValue)
        hasher.combine(allowSecurityAppliance?.hashValue)
        hasher.combine(allowSecurityApplianceMetadata?.hashValue)
        hasher.combine(allowSendToCertifiedDelivery?.hashValue)
        hasher.combine(allowSendToCertifiedDeliveryMetadata?.hashValue)
        hasher.combine(allowSendToIntermediary?.hashValue)
        hasher.combine(allowSendToIntermediaryMetadata?.hashValue)
        hasher.combine(allowServerTemplates?.hashValue)
        hasher.combine(allowServerTemplatesMetadata?.hashValue)
        hasher.combine(allowSetEmbeddedRecipientStartURL?.hashValue)
        hasher.combine(allowSetEmbeddedRecipientStartURLMetadata?.hashValue)
        hasher.combine(allowSharedTabs?.hashValue)
        hasher.combine(allowSharedTabsMetadata?.hashValue)
        hasher.combine(allowSignatureStamps?.hashValue)
        hasher.combine(allowSignatureStampsMetadata?.hashValue)
        hasher.combine(allowSignDocumentFromHomePage?.hashValue)
        hasher.combine(allowSignDocumentFromHomePageMetadata?.hashValue)
        hasher.combine(allowSignerReassign?.hashValue)
        hasher.combine(allowSignerReassignMetadata?.hashValue)
        hasher.combine(allowSignerReassignOverride?.hashValue)
        hasher.combine(allowSignerReassignOverrideMetadata?.hashValue)
        hasher.combine(allowSigningExtensions?.hashValue)
        hasher.combine(allowSigningExtensionsMetadata?.hashValue)
        hasher.combine(allowSigningGroups?.hashValue)
        hasher.combine(allowSigningGroupsMetadata?.hashValue)
        hasher.combine(allowSigningRadioDeselect?.hashValue)
        hasher.combine(allowSigningRadioDeselectMetadata?.hashValue)
        hasher.combine(allowSignNow?.hashValue)
        hasher.combine(allowSignNowMetadata?.hashValue)
        hasher.combine(allowSMSDelivery?.hashValue)
        hasher.combine(allowSMSDeliveryMetadata?.hashValue)
        hasher.combine(allowSocialIdLogin?.hashValue)
        hasher.combine(allowSocialIdLoginMetadata?.hashValue)
        hasher.combine(allowSupplementalDocuments?.hashValue)
        hasher.combine(allowSupplementalDocumentsMetadata?.hashValue)
        hasher.combine(allowUsersToAccessDirectory?.hashValue)
        hasher.combine(allowUsersToAccessDirectoryMetadata?.hashValue)
        hasher.combine(allowValueInsights?.hashValue)
        hasher.combine(allowValueInsightsMetadata?.hashValue)
        hasher.combine(anchorPopulationScope?.hashValue)
        hasher.combine(anchorPopulationScopeMetadata?.hashValue)
        hasher.combine(anchorTagVersionedPlacementEnabled?.hashValue)
        hasher.combine(anchorTagVersionedPlacementMetadataEnabled?.hashValue)
        hasher.combine(attachCompletedEnvelope?.hashValue)
        hasher.combine(attachCompletedEnvelopeMetadata?.hashValue)
        hasher.combine(authenticationCheck?.hashValue)
        hasher.combine(authenticationCheckMetadata?.hashValue)
        hasher.combine(autoNavRule?.hashValue)
        hasher.combine(autoNavRuleMetadata?.hashValue)
        hasher.combine(autoProvisionSignerAccount?.hashValue)
        hasher.combine(autoProvisionSignerAccountMetadata?.hashValue)
        hasher.combine(bccEmailArchive?.hashValue)
        hasher.combine(bccEmailArchiveMetadata?.hashValue)
        hasher.combine(betaSwitchConfiguration?.hashValue)
        hasher.combine(betaSwitchConfigurationMetadata?.hashValue)
        hasher.combine(billingAddress?.hashValue)
        hasher.combine(billingAddressMetadata?.hashValue)
        hasher.combine(bulkSend?.hashValue)
        hasher.combine(bulkSendMaxCopiesInBatch?.hashValue)
        hasher.combine(bulkSendMaxUnprocessedEnvelopesCount?.hashValue)
        hasher.combine(bulkSendMetadata?.hashValue)
        hasher.combine(canSelfBrandSend?.hashValue)
        hasher.combine(canSelfBrandSendMetadata?.hashValue)
        hasher.combine(canSelfBrandSign?.hashValue)
        hasher.combine(canSelfBrandSignMetadata?.hashValue)
        hasher.combine(canUseSalesforceOAuth?.hashValue)
        hasher.combine(canUseSalesforceOAuthMetadata?.hashValue)
        hasher.combine(captureVoiceRecording?.hashValue)
        hasher.combine(captureVoiceRecordingMetadata?.hashValue)
        hasher.combine(cfrUseWideImage?.hashValue)
        hasher.combine(cfrUseWideImageMetadata?.hashValue)
        hasher.combine(checkForMultipleAdminsOnAccount?.hashValue)
        hasher.combine(checkForMultipleAdminsOnAccountMetadata?.hashValue)
        hasher.combine(chromeSignatureEnabled?.hashValue)
        hasher.combine(chromeSignatureEnabledMetadata?.hashValue)
        hasher.combine(commentEmailShowMessageText?.hashValue)
        hasher.combine(commentEmailShowMessageTextMetadata?.hashValue)
        hasher.combine(commentsAllowEnvelopeOverride?.hashValue)
        hasher.combine(commentsAllowEnvelopeOverrideMetadata?.hashValue)
        hasher.combine(conditionalFieldsEnabled?.hashValue)
        hasher.combine(conditionalFieldsEnabledMetadata?.hashValue)
        hasher.combine(consumerDisclosureFrequency?.hashValue)
        hasher.combine(consumerDisclosureFrequencyMetadata?.hashValue)
        hasher.combine(convertPdfFields?.hashValue)
        hasher.combine(convertPdfFieldsMetadata?.hashValue)
        hasher.combine(dataPopulationScope?.hashValue)
        hasher.combine(dataPopulationScopeMetadata?.hashValue)
        hasher.combine(disableMobileApp?.hashValue)
        hasher.combine(disableMobileAppMetadata?.hashValue)
        hasher.combine(disableMobilePushNotifications?.hashValue)
        hasher.combine(disableMobilePushNotificationsMetadata?.hashValue)
        hasher.combine(disableMobileSending?.hashValue)
        hasher.combine(disableMobileSendingMetadata?.hashValue)
        hasher.combine(disableMultipleSessions?.hashValue)
        hasher.combine(disableMultipleSessionsMetadata?.hashValue)
        hasher.combine(disablePurgeNotificationsForSenderMetadata?.hashValue)
        hasher.combine(disableSignerCertView?.hashValue)
        hasher.combine(disableSignerCertViewMetadata?.hashValue)
        hasher.combine(disableSignerHistoryView?.hashValue)
        hasher.combine(disableSignerHistoryViewMetadata?.hashValue)
        hasher.combine(disableStyleSignature?.hashValue)
        hasher.combine(disableStyleSignatureMetadata?.hashValue)
        hasher.combine(disableUploadSignature?.hashValue)
        hasher.combine(disableUploadSignatureMetadata?.hashValue)
        hasher.combine(disableUserSharing?.hashValue)
        hasher.combine(disableUserSharingMetadata?.hashValue)
        hasher.combine(displayBetaSwitch?.hashValue)
        hasher.combine(displayBetaSwitchMetadata?.hashValue)
        hasher.combine(documentConversionRestrictions?.hashValue)
        hasher.combine(documentConversionRestrictionsMetadata?.hashValue)
        hasher.combine(documentRetention?.hashValue)
        hasher.combine(documentRetentionMetadata?.hashValue)
        hasher.combine(documentRetentionPurgeTabs?.hashValue)
        hasher.combine(documentVisibility?.hashValue)
        hasher.combine(documentVisibilityMetadata?.hashValue)
        hasher.combine(emailTemplateVersion?.hashValue)
        hasher.combine(emailTemplateVersionMetadata?.hashValue)
        hasher.combine(enableAccessCodeGenerator?.hashValue)
        hasher.combine(enableAccessCodeGeneratorMetadata?.hashValue)
        hasher.combine(enableAdvancedPayments?.hashValue)
        hasher.combine(enableAdvancedPaymentsMetadata?.hashValue)
        hasher.combine(enableAdvancedPowerForms?.hashValue)
        hasher.combine(enableAdvancedPowerFormsMetadata?.hashValue)
        hasher.combine(enableAgreementActionsForCLM?.hashValue)
        hasher.combine(enableAgreementActionsForCLMMetadata?.hashValue)
        hasher.combine(enableAgreementActionsForESign?.hashValue)
        hasher.combine(enableAgreementActionsForESignMetadata?.hashValue)
        hasher.combine(enableAutoNav?.hashValue)
        hasher.combine(enableAutoNavMetadata?.hashValue)
        hasher.combine(enableCalculatedFields?.hashValue)
        hasher.combine(enableCalculatedFieldsMetadata?.hashValue)
        hasher.combine(enableClickwraps?.hashValue)
        hasher.combine(enableClickwrapsMetadata?.hashValue)
        hasher.combine(enableCommentsHistoryDownloadInSigning?.hashValue)
        hasher.combine(enableCommentsHistoryDownloadInSigningMetadata?.hashValue)
        hasher.combine(enableCustomerSatisfactionMetricTracking?.hashValue)
        hasher.combine(enableCustomerSatisfactionMetricTrackingMetadata?.hashValue)
        hasher.combine(enableDSPro?.hashValue)
        hasher.combine(enableDSProMetadata?.hashValue)
        hasher.combine(enableEnvelopeStampingByAccountAdmin?.hashValue)
        hasher.combine(enableEnvelopeStampingByAccountAdminMetadata?.hashValue)
        hasher.combine(enableEnvelopeStampingByDSAdmin?.hashValue)
        hasher.combine(enableEnvelopeStampingByDSAdminMetadata?.hashValue)
        hasher.combine(enableInBrowserEditor?.hashValue)
        hasher.combine(enableInBrowserEditorMetadata?.hashValue)
        hasher.combine(enablePaymentProcessing?.hashValue)
        hasher.combine(enablePaymentProcessingMetadata?.hashValue)
        hasher.combine(enablePowerForm?.hashValue)
        hasher.combine(enablePowerFormDirect?.hashValue)
        hasher.combine(enablePowerFormDirectMetadata?.hashValue)
        hasher.combine(enablePowerFormMetadata?.hashValue)
        hasher.combine(enableRecipientDomainValidation?.hashValue)
        hasher.combine(enableRecipientDomainValidationMetadata?.hashValue)
        hasher.combine(enableReportLinks?.hashValue)
        hasher.combine(enableReportLinksMetadata?.hashValue)
        hasher.combine(enableRequireSignOnPaper?.hashValue)
        hasher.combine(enableRequireSignOnPaperMetadata?.hashValue)
        hasher.combine(enableReservedDomain?.hashValue)
        hasher.combine(enableReservedDomainMetadata?.hashValue)
        hasher.combine(enableResponsiveSigning?.hashValue)
        hasher.combine(enableResponsiveSigningMetadata?.hashValue)
        hasher.combine(enableScheduledRelease?.hashValue)
        hasher.combine(enableScheduledReleaseMetadata?.hashValue)
        hasher.combine(enableSearchUI?.hashValue)
        hasher.combine(enableSearchUIMetadata?.hashValue)
        hasher.combine(enableSendingTagsFontSettings?.hashValue)
        hasher.combine(enableSendingTagsFontSettingsMetadata?.hashValue)
        hasher.combine(enableSendToAgent?.hashValue)
        hasher.combine(enableSendToAgentMetadata?.hashValue)
        hasher.combine(enableSendToIntermediary?.hashValue)
        hasher.combine(enableSendToIntermediaryMetadata?.hashValue)
        hasher.combine(enableSendToManage?.hashValue)
        hasher.combine(enableSendToManageMetadata?.hashValue)
        hasher.combine(enableSequentialSigningAPI?.hashValue)
        hasher.combine(enableSequentialSigningAPIMetadata?.hashValue)
        hasher.combine(enableSequentialSigningUI?.hashValue)
        hasher.combine(enableSequentialSigningUIMetadata?.hashValue)
        hasher.combine(enableSignerAttachments?.hashValue)
        hasher.combine(enableSignerAttachmentsMetadata?.hashValue)
        hasher.combine(enableSigningExtensionComments?.hashValue)
        hasher.combine(enableSigningExtensionCommentsMetadata?.hashValue)
        hasher.combine(enableSigningExtensionConversations?.hashValue)
        hasher.combine(enableSigningExtensionConversationsMetadata?.hashValue)
        hasher.combine(enableSigningOrderSettingsForAccount?.hashValue)
        hasher.combine(enableSigningOrderSettingsForAccountMetadata?.hashValue)
        hasher.combine(enableSignOnPaper?.hashValue)
        hasher.combine(enableSignOnPaperMetadata?.hashValue)
        hasher.combine(enableSignOnPaperOverride?.hashValue)
        hasher.combine(enableSignOnPaperOverrideMetadata?.hashValue)
        hasher.combine(enableSignWithNotary?.hashValue)
        hasher.combine(enableSignWithNotaryMetadata?.hashValue)
        hasher.combine(enableSmartContracts?.hashValue)
        hasher.combine(enableSmartContractsMetadata?.hashValue)
        hasher.combine(enableSMSAuthentication?.hashValue)
        hasher.combine(enableSMSAuthenticationMetadata?.hashValue)
        hasher.combine(enableSocialIdLogin?.hashValue)
        hasher.combine(enableSocialIdLoginMetadata?.hashValue)
        hasher.combine(enableStrikeThrough?.hashValue)
        hasher.combine(enableStrikeThroughMetadata?.hashValue)
        hasher.combine(enableTransactionPoint?.hashValue)
        hasher.combine(enableTransactionPointMetadata?.hashValue)
        hasher.combine(enableVaulting?.hashValue)
        hasher.combine(enableVaultingMetadata?.hashValue)
        hasher.combine(enableWitnessing?.hashValue)
        hasher.combine(enableWitnessingMetadata?.hashValue)
        hasher.combine(enforceTemplateNameUniqueness?.hashValue)
        hasher.combine(enforceTemplateNameUniquenessMetadata?.hashValue)
        hasher.combine(envelopeIntegrationAllowed?.hashValue)
        hasher.combine(envelopeIntegrationAllowedMetadata?.hashValue)
        hasher.combine(envelopeIntegrationEnabled?.hashValue)
        hasher.combine(envelopeIntegrationEnabledMetadata?.hashValue)
        hasher.combine(envelopeStampingDefaultValue?.hashValue)
        hasher.combine(envelopeStampingDefaultValueMetadata?.hashValue)
        hasher.combine(expressSend?.hashValue)
        hasher.combine(expressSendAllowTabs?.hashValue)
        hasher.combine(expressSendAllowTabsMetadata?.hashValue)
        hasher.combine(expressSendMetadata?.hashValue)
        hasher.combine(externalDocumentSources?.hashValue)
        hasher.combine(externalSignaturePadType?.hashValue)
        hasher.combine(externalSignaturePadTypeMetadata?.hashValue)
        hasher.combine(faxOutEnabled?.hashValue)
        hasher.combine(faxOutEnabledMetadata?.hashValue)
        hasher.combine(guidedFormsHtmlAllowed?.hashValue)
        hasher.combine(guidedFormsHtmlAllowedMetadata?.hashValue)
        hasher.combine(hideAccountAddressInCoC?.hashValue)
        hasher.combine(hideAccountAddressInCoCMetadata?.hashValue)
        hasher.combine(hidePricing?.hashValue)
        hasher.combine(hidePricingMetadata?.hashValue)
        hasher.combine(idCheckConfigurations?.hashValue)
        hasher.combine(idCheckExpire?.hashValue)
        hasher.combine(idCheckExpireDays?.hashValue)
        hasher.combine(idCheckExpireDaysMetadata?.hashValue)
        hasher.combine(idCheckExpireMetadata?.hashValue)
        hasher.combine(idCheckExpireMinutes?.hashValue)
        hasher.combine(idCheckExpireMinutesMetadata?.hashValue)
        hasher.combine(idCheckRequired?.hashValue)
        hasher.combine(idCheckRequiredMetadata?.hashValue)
        hasher.combine(identityVerification?.hashValue)
        hasher.combine(identityVerificationMetadata?.hashValue)
        hasher.combine(ignoreErrorIfAnchorTabNotFound?.hashValue)
        hasher.combine(ignoreErrorIfAnchorTabNotFoundMetadataEnabled?.hashValue)
        hasher.combine(inPersonIDCheckQuestion?.hashValue)
        hasher.combine(inPersonIDCheckQuestionMetadata?.hashValue)
        hasher.combine(inPersonSigningEnabled?.hashValue)
        hasher.combine(inPersonSigningEnabledMetadata?.hashValue)
        hasher.combine(inSessionEnabled?.hashValue)
        hasher.combine(inSessionEnabledMetadata?.hashValue)
        hasher.combine(inSessionSuppressEmails?.hashValue)
        hasher.combine(inSessionSuppressEmailsMetadata?.hashValue)
        hasher.combine(maximumSigningGroups?.hashValue)
        hasher.combine(maximumSigningGroupsMetadata?.hashValue)
        hasher.combine(maximumUsersPerSigningGroup?.hashValue)
        hasher.combine(maximumUsersPerSigningGroupMetadata?.hashValue)
        hasher.combine(maxNumberOfCustomStamps?.hashValue)
        hasher.combine(mobileSessionTimeout?.hashValue)
        hasher.combine(mobileSessionTimeoutMetadata?.hashValue)
        hasher.combine(numberOfActiveCustomStamps?.hashValue)
        hasher.combine(optInMobileSigningV02?.hashValue)
        hasher.combine(optInMobileSigningV02Metadata?.hashValue)
        hasher.combine(optOutAutoNavTextAndTabColorUpdates?.hashValue)
        hasher.combine(optOutAutoNavTextAndTabColorUpdatesMetadata?.hashValue)
        hasher.combine(optOutNewPlatformSeal?.hashValue)
        hasher.combine(optOutNewPlatformSealPlatformMetadata?.hashValue)
        hasher.combine(phoneAuthRecipientMayProvidePhoneNumber?.hashValue)
        hasher.combine(phoneAuthRecipientMayProvidePhoneNumberMetadata?.hashValue)
        hasher.combine(pkiSignDownloadedPDFDocs?.hashValue)
        hasher.combine(pkiSignDownloadedPDFDocsMetadata?.hashValue)
        hasher.combine(recipientsCanSignOffline?.hashValue)
        hasher.combine(recipientsCanSignOfflineMetadata?.hashValue)
        hasher.combine(recipientSigningAutoNavigationControl?.hashValue)
        hasher.combine(recipientSigningAutoNavigationControlMetadata?.hashValue)
        hasher.combine(require21CFRpt11Compliance?.hashValue)
        hasher.combine(require21CFRpt11ComplianceMetadata?.hashValue)
        hasher.combine(requireDeclineReason?.hashValue)
        hasher.combine(requireDeclineReasonMetadata?.hashValue)
        hasher.combine(requireExternalUserManagement?.hashValue)
        hasher.combine(requireExternalUserManagementMetadata?.hashValue)
        hasher.combine(requireSignerCertificateType?.hashValue)
        hasher.combine(requireSignerCertificateTypeMetadata?.hashValue)
        hasher.combine(rsaVeridAccountName?.hashValue)
        hasher.combine(rsaVeridPassword?.hashValue)
        hasher.combine(rsaVeridRuleset?.hashValue)
        hasher.combine(rsaVeridUserId?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocument?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocumentMetadata?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocumentUserOverride?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocumentUserOverrideMetadata?.hashValue)
        hasher.combine(senderCanSignInEachLocation?.hashValue)
        hasher.combine(senderCanSignInEachLocationMetadata?.hashValue)
        hasher.combine(senderMustAuthenticateSigning?.hashValue)
        hasher.combine(senderMustAuthenticateSigningMetadata?.hashValue)
        hasher.combine(sendingTagsFontColor?.hashValue)
        hasher.combine(sendingTagsFontColorMetadata?.hashValue)
        hasher.combine(sendingTagsFontName?.hashValue)
        hasher.combine(sendingTagsFontNameMetadata?.hashValue)
        hasher.combine(sendingTagsFontSize?.hashValue)
        hasher.combine(sendingTagsFontSizeMetadata?.hashValue)
        hasher.combine(sendToCertifiedDeliveryEnabled?.hashValue)
        hasher.combine(sendToCertifiedDeliveryEnabledMetadata?.hashValue)
        hasher.combine(sessionTimeout?.hashValue)
        hasher.combine(sessionTimeoutMetadata?.hashValue)
        hasher.combine(setRecipEmailLang?.hashValue)
        hasher.combine(setRecipEmailLangMetadata?.hashValue)
        hasher.combine(setRecipSignLang?.hashValue)
        hasher.combine(setRecipSignLangMetadata?.hashValue)
        hasher.combine(sharedTemplateFolders?.hashValue)
        hasher.combine(sharedTemplateFoldersMetadata?.hashValue)
        hasher.combine(showCompleteDialogInEmbeddedSession?.hashValue)
        hasher.combine(showCompleteDialogInEmbeddedSessionMetadata?.hashValue)
        hasher.combine(showConditionalRoutingOnSend?.hashValue)
        hasher.combine(showConditionalRoutingOnSendMetadata?.hashValue)
        hasher.combine(showInitialConditionalFields?.hashValue)
        hasher.combine(showInitialConditionalFieldsMetadata?.hashValue)
        hasher.combine(showLocalizedWatermarks?.hashValue)
        hasher.combine(showLocalizedWatermarksMetadata?.hashValue)
        hasher.combine(showTutorials?.hashValue)
        hasher.combine(showTutorialsMetadata?.hashValue)
        hasher.combine(signatureProviders?.hashValue)
        hasher.combine(signatureProvidersMetadata?.hashValue)
        hasher.combine(signDateFormat?.hashValue)
        hasher.combine(signDateFormatMetadata?.hashValue)
        hasher.combine(signerAttachCertificateToEnvelopePDF?.hashValue)
        hasher.combine(signerAttachCertificateToEnvelopePDFMetadata?.hashValue)
        hasher.combine(signerAttachConcat?.hashValue)
        hasher.combine(signerAttachConcatMetadata?.hashValue)
        hasher.combine(signerCanCreateAccount?.hashValue)
        hasher.combine(signerCanCreateAccountMetadata?.hashValue)
        hasher.combine(signerCanSignOnMobile?.hashValue)
        hasher.combine(signerCanSignOnMobileMetadata?.hashValue)
        hasher.combine(signerInSessionUseEnvelopeCompleteEmail?.hashValue)
        hasher.combine(signerInSessionUseEnvelopeCompleteEmailMetadata?.hashValue)
        hasher.combine(signerLoginRequirements?.hashValue)
        hasher.combine(signerLoginRequirementsMetadata?.hashValue)
        hasher.combine(signerMustHaveAccount?.hashValue)
        hasher.combine(signerMustHaveAccountMetadata?.hashValue)
        hasher.combine(signerMustLoginToSign?.hashValue)
        hasher.combine(signerMustLoginToSignMetadata?.hashValue)
        hasher.combine(signerShowSecureFieldInitialValues?.hashValue)
        hasher.combine(signerShowSecureFieldInitialValuesMetadata?.hashValue)
        hasher.combine(signingSessionTimeout?.hashValue)
        hasher.combine(signingSessionTimeoutMetadata?.hashValue)
        hasher.combine(signingUiVersion?.hashValue)
        hasher.combine(signingUiVersionMetadata?.hashValue)
        hasher.combine(signTimeFormat?.hashValue)
        hasher.combine(signTimeFormatMetadata?.hashValue)
        hasher.combine(signTimeShowAmPm?.hashValue)
        hasher.combine(signTimeShowAmPmMetadata?.hashValue)
        hasher.combine(simplifiedSendingEnabled?.hashValue)
        hasher.combine(simplifiedSendingEnabledMetadata?.hashValue)
        hasher.combine(singleSignOnEnabled?.hashValue)
        hasher.combine(singleSignOnEnabledMetadata?.hashValue)
        hasher.combine(skipAuthCompletedEnvelopes?.hashValue)
        hasher.combine(skipAuthCompletedEnvelopesMetadata?.hashValue)
        hasher.combine(socialIdRecipAuth?.hashValue)
        hasher.combine(socialIdRecipAuthMetadata?.hashValue)
        hasher.combine(specifyDocumentVisibility?.hashValue)
        hasher.combine(specifyDocumentVisibilityMetadata?.hashValue)
        hasher.combine(startInAdvancedCorrect?.hashValue)
        hasher.combine(startInAdvancedCorrectMetadata?.hashValue)
        hasher.combine(supplementalDocumentsMustAccept?.hashValue)
        hasher.combine(supplementalDocumentsMustAcceptMetadata?.hashValue)
        hasher.combine(supplementalDocumentsMustRead?.hashValue)
        hasher.combine(supplementalDocumentsMustReadMetadata?.hashValue)
        hasher.combine(supplementalDocumentsMustView?.hashValue)
        hasher.combine(supplementalDocumentsMustViewMetadata?.hashValue)
        hasher.combine(suppressCertificateEnforcement?.hashValue)
        hasher.combine(suppressCertificateEnforcementMetadata?.hashValue)
        hasher.combine(tabAccountSettings?.hashValue)
        hasher.combine(timezoneOffsetAPI?.hashValue)
        hasher.combine(timezoneOffsetAPIMetadata?.hashValue)
        hasher.combine(timezoneOffsetUI?.hashValue)
        hasher.combine(timezoneOffsetUIMetadata?.hashValue)
        hasher.combine(universalSignatureOptIn?.hashValue)
        hasher.combine(useAccountLevelEmail?.hashValue)
        hasher.combine(useAccountLevelEmailMetadata?.hashValue)
        hasher.combine(useConsumerDisclosure?.hashValue)
        hasher.combine(useConsumerDisclosureMetadata?.hashValue)
        hasher.combine(useConsumerDisclosureWithinAccount?.hashValue)
        hasher.combine(useConsumerDisclosureWithinAccountMetadata?.hashValue)
        hasher.combine(useDerivedKeys?.hashValue)
        hasher.combine(useDerivedKeysMetadata?.hashValue)
        hasher.combine(useDocuSignExpressSignerCertificate?.hashValue)
        hasher.combine(useDocuSignExpressSignerCertificateMetadata?.hashValue)
        hasher.combine(useMultiAppGroupsData?.hashValue)
        hasher.combine(useMultiAppGroupsDataMetadata?.hashValue)
        hasher.combine(useNewBlobForPdf?.hashValue)
        hasher.combine(useNewBlobForPdfMetadata?.hashValue)
        hasher.combine(useSAFESignerCertificates?.hashValue)
        hasher.combine(useSAFESignerCertificatesMetadata?.hashValue)
        hasher.combine(usesAPI?.hashValue)
        hasher.combine(usesAPIMetadata?.hashValue)
        hasher.combine(useSignatureProviderPlatform?.hashValue)
        hasher.combine(useSignatureProviderPlatformMetadata?.hashValue)
        hasher.combine(validationsAllowed?.hashValue)
        hasher.combine(validationsAllowedMetadata?.hashValue)
        hasher.combine(validationsBrand?.hashValue)
        hasher.combine(validationsBrandMetadata?.hashValue)
        hasher.combine(validationsCadence?.hashValue)
        hasher.combine(validationsCadenceMetadata?.hashValue)
        hasher.combine(validationsEnabled?.hashValue)
        hasher.combine(validationsEnabledMetadata?.hashValue)
        hasher.combine(validationsReport?.hashValue)
        hasher.combine(validationsReportMetadata?.hashValue)
        hasher.combine(waterMarkEnabled?.hashValue)
        hasher.combine(waterMarkEnabledMetadata?.hashValue)
        hasher.combine(writeReminderToEnvelopeHistory?.hashValue)
        hasher.combine(writeReminderToEnvelopeHistoryMetadata?.hashValue)
        hasher.combine(wurflMinAllowableScreenSize?.hashValue)
        hasher.combine(wurflMinAllowableScreenSizeMetadata?.hashValue)
    }
}

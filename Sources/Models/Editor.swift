//
// Editor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** A complex type defining the management and access rights of a recipient assigned as an editor on the envelope. Editors have the same management and access rights for the envelope as the sender. They can make changes to the envelope as if they were using the Correct feature. This recipient can add name and email information, add or change the routing order and set authentication options for the remaining recipients. Additionally, this recipient can edit signature/initial tabs and text tabs for the remaining recipients. */
public final class Editor: Content {
    /** If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required. */
    public var accessCode: String?
    public var accessCodeMetadata: PropertyMetadata?
    /** Optional. When set to **true**, the access code will be added to the email sent to the recipient. This nullifies the security measure of `accessCode` on the recipient. */
    public var addAccessCodeToEmail: String?
    /**  */
    public var additionalNotifications: [RecipientAdditionalNotification]?
    /**  */
    public var allowSystemOverrideForLockedRecipient: String?
    /** Specifies whether the recipient is embedded or remote.   If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters.  */
    public var clientUserId: String?
    /** Indicates the number of times that the recipient has been through a signing completion for the envelope. If this number is greater than 0 for a signing group, only the user who previously completed may sign again. Read only. */
    public var completedCount: String?
    /** An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters. */
    public var customFields: [String]?
    /** The date and time the recipient declined the document. Read only. */
    public var declinedDateTime: String?
    /** The reason the recipient declined the document. Read only. */
    public var declinedReason: String?
    /** The date and time that the envelope was delivered to the recipient. Read only. */
    public var deliveredDateTime: String?
    /** Reserved for DocuSign. */
    public var deliveryMethod: String?
    public var deliveryMethodMetadata: PropertyMetadata?
    /**  */
    public var designatorId: String?
    /**  */
    public var designatorIdGuid: String?
    /** A list of `documentVisibility` objects. Each object in the list specifies whether a document in the envelope is visible to this recipient. For the envelope to use this functionality, Document Visibility must be enabled for the account and the `enforceSignerVisibility` property must be set to **true**. */
    public var documentVisibility: [DocumentVisibility]?
    /** The recipient's email address. Notification of the document to sign is sent to this email address.   Maximum length: 100 characters.  */
    public var email: String?
    public var emailMetadata: PropertyMetadata?
    public var emailNotification: RecipientEmailNotification?
    /** Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.  It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`  */
    public var embeddedRecipientStartURL: String?
    public var errorDetails: ErrorDetails?
    /** Reserved for DocuSign. */
    public var faxNumber: String?
    public var faxNumberMetadata: PropertyMetadata?
    /** The recipient's first name.   Maximum Length: 50 characters. */
    public var firstName: String?
    public var firstNameMetadata: PropertyMetadata?
    /** Reserved for DocuSign. */
    public var fullName: String?
    public var fullNameMetadata: PropertyMetadata?
    /** The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:  - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object. - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object. - `ID Check $`: The  recipient must answer detailed security questions.   **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node. */
    public var idCheckConfigurationName: String?
    public var idCheckConfigurationNameMetadata: PropertyMetadata?
    public var idCheckInformationInput: IdCheckInformationInput?
    public var identityVerification: RecipientIdentityVerification?
    /** When set to **true** and the envelope recipient creates a DocuSign account after signing, the Manage Account Email Notification settings are used as the default settings for the recipient's account.  */
    public var inheritEmailNotificationConfiguration: String?
    /** The recipient's last name. */
    public var lastName: String?
    public var lastNameMetadata: PropertyMetadata?
    /** Reserved for DocuSign. */
    public var lockedRecipientPhoneAuthEditable: String?
    /** Reserved for DocuSign. */
    public var lockedRecipientSmsEditable: String?
    /** The full legal name of the recipient. Maximum Length: 100 characters.  **Note**: You must always set a value for this property in requests, even if `firstName` and `lastName` are set. */
    public var name: String?
    public var nameMetadata: PropertyMetadata?
    /** A note sent to the recipient in the signing email. This note is unique to this recipient. In the user interface, it appears near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.  */
    public var note: String?
    public var noteMetadata: PropertyMetadata?
    public var phoneAuthentication: RecipientPhoneAuthentication?
    /** Reserved for DocuSign. */
    public var recipientAttachments: [RecipientAttachment]?
    public var recipientAuthenticationStatus: AuthenticationStatus?
    /** Metadata about the features that are supported for the recipient type. Read only. */
    public var recipientFeatureMetadata: [FeatureAvailableMetadata]?
    /** Unique for the recipient. It is used by the tab element to indicate which recipient is to sign the document. */
    public var recipientId: String?
    /** The globally-unique identifier (GUID) for a specific recipient on a specific envelope. If the same recipient is associated with multiple envelopes, they will have a different GUID for each one. Read only. */
    public var recipientIdGuid: String?
    /** The recipient type, as specified by the following values: - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order. - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order. - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents. - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients. - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer. - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order. - `seal`: Electronic seal recipients represent legal entities. - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope. - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope. */
    public var recipientType: String?
    public var recipientTypeMetadata: PropertyMetadata?
    /** When set to **true**, the recipient is required to use the specified ID check method (including Phone and SMS authentication) to validate their identity.  */
    public var requireIdLookup: String?
    public var requireIdLookupMetadata: PropertyMetadata?
    /** Optional element. Specifies the role name associated with the recipient.<br/><br/>This property is required when you are working with template recipients. */
    public var roleName: String?
    /** Specifies the routing order of the recipient in the envelope.  */
    public var routingOrder: String?
    public var routingOrderMetadata: PropertyMetadata?
    /** The UTC DateTime when the envelope was sent. Read only. */
    public var sentDateTime: String?
    /** Reserved for DocuSign. */
    public var signedDateTime: String?
    /** Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).  **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.  */
    public var signingGroupId: String?
    public var signingGroupIdMetadata: PropertyMetadata?
    /** Optional. The name of the signing group.   Maximum Length: 100 characters.  */
    public var signingGroupName: String?
    /** A complex type that contains information about users in the signing group. */
    public var signingGroupUsers: [UserInfo]?
    public var smsAuthentication: RecipientSMSAuthentication?
    /** Deprecated. */
    public var socialAuthentications: [SocialAuthentication]?
    /** The recipient's status. Read only.   Possible values:  - `autoresponded`: The recipient's email system auto-responded to the email from DocuSign. This status is used in the web console to inform senders about the bounced-back email. This recipient status is only used if **Send-on-behalf-of** is turned off for the account. - `completed`: The recipient has completed their actions (signing or other required actions if not a signer) for an envelope. - `created`: The recipient is in a draft state. This value is only associated with draft envelopes (envelopes that have a status of `created`). - `declined`: The recipient declined to sign the document(s) in the envelope. - `delivered`: The recipient has viewed the document(s) in an envelope through the DocuSign signing website. This is not an email delivery of the documents in an envelope. - `faxPending`: The recipient has finished signing and the system is waiting for a fax attachment from the recipient before completing their signing step. - `sent`: The recipient has been sent an email notification that it is their turn to sign an envelope. - `signed`: The recipient has completed (signed) all required tags in an envelope. This is a temporary state during processing, after which the recipient's status automatically switches to `completed`.  */
    public var status: String?
    /** The code associated with the recipient's status. Read only. */
    public var statusCode: String?
    /** When set to **true**, email notifications are suppressed for the recipient, and they must access envelopes and documents from their DocuSign inbox. */
    public var suppressEmails: String?
    /** When set to **true**, the sender cannot change any attributes of the recipient. Used only when working with template recipients.  */
    public var templateLocked: String?
    /** When set to **true**, the sender may not remove the recipient. Used only when working with template recipients. */
    public var templateRequired: String?
    /** The total number of tabs in the documents. Read only. */
    public var totalTabCount: String?
    /** The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.  */
    public var userId: String?

    public init(accessCode: String? = nil, accessCodeMetadata: PropertyMetadata? = nil, addAccessCodeToEmail: String? = nil, additionalNotifications: [RecipientAdditionalNotification]? = nil, allowSystemOverrideForLockedRecipient: String? = nil, clientUserId: String? = nil, completedCount: String? = nil, customFields: [String]? = nil, declinedDateTime: String? = nil, declinedReason: String? = nil, deliveredDateTime: String? = nil, deliveryMethod: String? = nil, deliveryMethodMetadata: PropertyMetadata? = nil, designatorId: String? = nil, designatorIdGuid: String? = nil, documentVisibility: [DocumentVisibility]? = nil, email: String? = nil, emailMetadata: PropertyMetadata? = nil, emailNotification: RecipientEmailNotification? = nil, embeddedRecipientStartURL: String? = nil, errorDetails: ErrorDetails? = nil, faxNumber: String? = nil, faxNumberMetadata: PropertyMetadata? = nil, firstName: String? = nil, firstNameMetadata: PropertyMetadata? = nil, fullName: String? = nil, fullNameMetadata: PropertyMetadata? = nil, idCheckConfigurationName: String? = nil, idCheckConfigurationNameMetadata: PropertyMetadata? = nil, idCheckInformationInput: IdCheckInformationInput? = nil, identityVerification: RecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: String? = nil, lastName: String? = nil, lastNameMetadata: PropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: String? = nil, lockedRecipientSmsEditable: String? = nil, name: String? = nil, nameMetadata: PropertyMetadata? = nil, note: String? = nil, noteMetadata: PropertyMetadata? = nil, phoneAuthentication: RecipientPhoneAuthentication? = nil, recipientAttachments: [RecipientAttachment]? = nil, recipientAuthenticationStatus: AuthenticationStatus? = nil, recipientFeatureMetadata: [FeatureAvailableMetadata]? = nil, recipientId: String? = nil, recipientIdGuid: String? = nil, recipientType: String? = nil, recipientTypeMetadata: PropertyMetadata? = nil, requireIdLookup: String? = nil, requireIdLookupMetadata: PropertyMetadata? = nil, roleName: String? = nil, routingOrder: String? = nil, routingOrderMetadata: PropertyMetadata? = nil, sentDateTime: String? = nil, signedDateTime: String? = nil, signingGroupId: String? = nil, signingGroupIdMetadata: PropertyMetadata? = nil, signingGroupName: String? = nil, signingGroupUsers: [UserInfo]? = nil, smsAuthentication: RecipientSMSAuthentication? = nil, socialAuthentications: [SocialAuthentication]? = nil, status: String? = nil, statusCode: String? = nil, suppressEmails: String? = nil, templateLocked: String? = nil, templateRequired: String? = nil, totalTabCount: String? = nil, userId: String? = nil) {
        self.accessCode = accessCode
        self.accessCodeMetadata = accessCodeMetadata
        self.addAccessCodeToEmail = addAccessCodeToEmail
        self.additionalNotifications = additionalNotifications
        self.allowSystemOverrideForLockedRecipient = allowSystemOverrideForLockedRecipient
        self.clientUserId = clientUserId
        self.completedCount = completedCount
        self.customFields = customFields
        self.declinedDateTime = declinedDateTime
        self.declinedReason = declinedReason
        self.deliveredDateTime = deliveredDateTime
        self.deliveryMethod = deliveryMethod
        self.deliveryMethodMetadata = deliveryMethodMetadata
        self.designatorId = designatorId
        self.designatorIdGuid = designatorIdGuid
        self.documentVisibility = documentVisibility
        self.email = email
        self.emailMetadata = emailMetadata
        self.emailNotification = emailNotification
        self.embeddedRecipientStartURL = embeddedRecipientStartURL
        self.errorDetails = errorDetails
        self.faxNumber = faxNumber
        self.faxNumberMetadata = faxNumberMetadata
        self.firstName = firstName
        self.firstNameMetadata = firstNameMetadata
        self.fullName = fullName
        self.fullNameMetadata = fullNameMetadata
        self.idCheckConfigurationName = idCheckConfigurationName
        self.idCheckConfigurationNameMetadata = idCheckConfigurationNameMetadata
        self.idCheckInformationInput = idCheckInformationInput
        self.identityVerification = identityVerification
        self.inheritEmailNotificationConfiguration = inheritEmailNotificationConfiguration
        self.lastName = lastName
        self.lastNameMetadata = lastNameMetadata
        self.lockedRecipientPhoneAuthEditable = lockedRecipientPhoneAuthEditable
        self.lockedRecipientSmsEditable = lockedRecipientSmsEditable
        self.name = name
        self.nameMetadata = nameMetadata
        self.note = note
        self.noteMetadata = noteMetadata
        self.phoneAuthentication = phoneAuthentication
        self.recipientAttachments = recipientAttachments
        self.recipientAuthenticationStatus = recipientAuthenticationStatus
        self.recipientFeatureMetadata = recipientFeatureMetadata
        self.recipientId = recipientId
        self.recipientIdGuid = recipientIdGuid
        self.recipientType = recipientType
        self.recipientTypeMetadata = recipientTypeMetadata
        self.requireIdLookup = requireIdLookup
        self.requireIdLookupMetadata = requireIdLookupMetadata
        self.roleName = roleName
        self.routingOrder = routingOrder
        self.routingOrderMetadata = routingOrderMetadata
        self.sentDateTime = sentDateTime
        self.signedDateTime = signedDateTime
        self.signingGroupId = signingGroupId
        self.signingGroupIdMetadata = signingGroupIdMetadata
        self.signingGroupName = signingGroupName
        self.signingGroupUsers = signingGroupUsers
        self.smsAuthentication = smsAuthentication
        self.socialAuthentications = socialAuthentications
        self.status = status
        self.statusCode = statusCode
        self.suppressEmails = suppressEmails
        self.templateLocked = templateLocked
        self.templateRequired = templateRequired
        self.totalTabCount = totalTabCount
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCode
        case accessCodeMetadata
        case addAccessCodeToEmail
        case additionalNotifications
        case allowSystemOverrideForLockedRecipient
        case clientUserId
        case completedCount
        case customFields
        case declinedDateTime
        case declinedReason
        case deliveredDateTime
        case deliveryMethod
        case deliveryMethodMetadata
        case designatorId
        case designatorIdGuid
        case documentVisibility
        case email
        case emailMetadata
        case emailNotification
        case embeddedRecipientStartURL
        case errorDetails
        case faxNumber
        case faxNumberMetadata
        case firstName
        case firstNameMetadata
        case fullName
        case fullNameMetadata
        case idCheckConfigurationName
        case idCheckConfigurationNameMetadata
        case idCheckInformationInput
        case identityVerification
        case inheritEmailNotificationConfiguration
        case lastName
        case lastNameMetadata
        case lockedRecipientPhoneAuthEditable
        case lockedRecipientSmsEditable
        case name
        case nameMetadata
        case note
        case noteMetadata
        case phoneAuthentication
        case recipientAttachments
        case recipientAuthenticationStatus
        case recipientFeatureMetadata
        case recipientId
        case recipientIdGuid
        case recipientType
        case recipientTypeMetadata
        case requireIdLookup
        case requireIdLookupMetadata
        case roleName
        case routingOrder
        case routingOrderMetadata
        case sentDateTime
        case signedDateTime
        case signingGroupId
        case signingGroupIdMetadata
        case signingGroupName
        case signingGroupUsers
        case smsAuthentication
        case socialAuthentications
        case status
        case statusCode
        case suppressEmails
        case templateLocked
        case templateRequired
        case totalTabCount
        case userId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accessCode, forKey: .accessCode)
        try container.encodeIfPresent(accessCodeMetadata, forKey: .accessCodeMetadata)
        try container.encodeIfPresent(addAccessCodeToEmail, forKey: .addAccessCodeToEmail)
        try container.encodeIfPresent(additionalNotifications, forKey: .additionalNotifications)
        try container.encodeIfPresent(allowSystemOverrideForLockedRecipient, forKey: .allowSystemOverrideForLockedRecipient)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(completedCount, forKey: .completedCount)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(declinedDateTime, forKey: .declinedDateTime)
        try container.encodeIfPresent(declinedReason, forKey: .declinedReason)
        try container.encodeIfPresent(deliveredDateTime, forKey: .deliveredDateTime)
        try container.encodeIfPresent(deliveryMethod, forKey: .deliveryMethod)
        try container.encodeIfPresent(deliveryMethodMetadata, forKey: .deliveryMethodMetadata)
        try container.encodeIfPresent(designatorId, forKey: .designatorId)
        try container.encodeIfPresent(designatorIdGuid, forKey: .designatorIdGuid)
        try container.encodeIfPresent(documentVisibility, forKey: .documentVisibility)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailMetadata, forKey: .emailMetadata)
        try container.encodeIfPresent(emailNotification, forKey: .emailNotification)
        try container.encodeIfPresent(embeddedRecipientStartURL, forKey: .embeddedRecipientStartURL)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(faxNumber, forKey: .faxNumber)
        try container.encodeIfPresent(faxNumberMetadata, forKey: .faxNumberMetadata)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(firstNameMetadata, forKey: .firstNameMetadata)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(fullNameMetadata, forKey: .fullNameMetadata)
        try container.encodeIfPresent(idCheckConfigurationName, forKey: .idCheckConfigurationName)
        try container.encodeIfPresent(idCheckConfigurationNameMetadata, forKey: .idCheckConfigurationNameMetadata)
        try container.encodeIfPresent(idCheckInformationInput, forKey: .idCheckInformationInput)
        try container.encodeIfPresent(identityVerification, forKey: .identityVerification)
        try container.encodeIfPresent(inheritEmailNotificationConfiguration, forKey: .inheritEmailNotificationConfiguration)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(lastNameMetadata, forKey: .lastNameMetadata)
        try container.encodeIfPresent(lockedRecipientPhoneAuthEditable, forKey: .lockedRecipientPhoneAuthEditable)
        try container.encodeIfPresent(lockedRecipientSmsEditable, forKey: .lockedRecipientSmsEditable)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(nameMetadata, forKey: .nameMetadata)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(noteMetadata, forKey: .noteMetadata)
        try container.encodeIfPresent(phoneAuthentication, forKey: .phoneAuthentication)
        try container.encodeIfPresent(recipientAttachments, forKey: .recipientAttachments)
        try container.encodeIfPresent(recipientAuthenticationStatus, forKey: .recipientAuthenticationStatus)
        try container.encodeIfPresent(recipientFeatureMetadata, forKey: .recipientFeatureMetadata)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientIdGuid, forKey: .recipientIdGuid)
        try container.encodeIfPresent(recipientType, forKey: .recipientType)
        try container.encodeIfPresent(recipientTypeMetadata, forKey: .recipientTypeMetadata)
        try container.encodeIfPresent(requireIdLookup, forKey: .requireIdLookup)
        try container.encodeIfPresent(requireIdLookupMetadata, forKey: .requireIdLookupMetadata)
        try container.encodeIfPresent(roleName, forKey: .roleName)
        try container.encodeIfPresent(routingOrder, forKey: .routingOrder)
        try container.encodeIfPresent(routingOrderMetadata, forKey: .routingOrderMetadata)
        try container.encodeIfPresent(sentDateTime, forKey: .sentDateTime)
        try container.encodeIfPresent(signedDateTime, forKey: .signedDateTime)
        try container.encodeIfPresent(signingGroupId, forKey: .signingGroupId)
        try container.encodeIfPresent(signingGroupIdMetadata, forKey: .signingGroupIdMetadata)
        try container.encodeIfPresent(signingGroupName, forKey: .signingGroupName)
        try container.encodeIfPresent(signingGroupUsers, forKey: .signingGroupUsers)
        try container.encodeIfPresent(smsAuthentication, forKey: .smsAuthentication)
        try container.encodeIfPresent(socialAuthentications, forKey: .socialAuthentications)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
        try container.encodeIfPresent(suppressEmails, forKey: .suppressEmails)
        try container.encodeIfPresent(templateLocked, forKey: .templateLocked)
        try container.encodeIfPresent(templateRequired, forKey: .templateRequired)
        try container.encodeIfPresent(totalTabCount, forKey: .totalTabCount)
        try container.encodeIfPresent(userId, forKey: .userId)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accessCode = try container.decodeIfPresent(String.self, forKey: .accessCode)
        accessCodeMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .accessCodeMetadata)
        addAccessCodeToEmail = try container.decodeIfPresent(String.self, forKey: .addAccessCodeToEmail)
        additionalNotifications = try container.decodeIfPresent([RecipientAdditionalNotification].self, forKey: .additionalNotifications)
        allowSystemOverrideForLockedRecipient = try container.decodeIfPresent(String.self, forKey: .allowSystemOverrideForLockedRecipient)
        clientUserId = try container.decodeIfPresent(String.self, forKey: .clientUserId)
        completedCount = try container.decodeIfPresent(String.self, forKey: .completedCount)
        customFields = try container.decodeIfPresent([String].self, forKey: .customFields)
        declinedDateTime = try container.decodeIfPresent(String.self, forKey: .declinedDateTime)
        declinedReason = try container.decodeIfPresent(String.self, forKey: .declinedReason)
        deliveredDateTime = try container.decodeIfPresent(String.self, forKey: .deliveredDateTime)
        deliveryMethod = try container.decodeIfPresent(String.self, forKey: .deliveryMethod)
        deliveryMethodMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .deliveryMethodMetadata)
        designatorId = try container.decodeIfPresent(String.self, forKey: .designatorId)
        designatorIdGuid = try container.decodeIfPresent(String.self, forKey: .designatorIdGuid)
        documentVisibility = try container.decodeIfPresent([DocumentVisibility].self, forKey: .documentVisibility)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        emailMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .emailMetadata)
        emailNotification = try container.decodeIfPresent(RecipientEmailNotification.self, forKey: .emailNotification)
        embeddedRecipientStartURL = try container.decodeIfPresent(String.self, forKey: .embeddedRecipientStartURL)
        errorDetails = try container.decodeIfPresent(ErrorDetails.self, forKey: .errorDetails)
        faxNumber = try container.decodeIfPresent(String.self, forKey: .faxNumber)
        faxNumberMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .faxNumberMetadata)
        firstName = try container.decodeIfPresent(String.self, forKey: .firstName)
        firstNameMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .firstNameMetadata)
        fullName = try container.decodeIfPresent(String.self, forKey: .fullName)
        fullNameMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .fullNameMetadata)
        idCheckConfigurationName = try container.decodeIfPresent(String.self, forKey: .idCheckConfigurationName)
        idCheckConfigurationNameMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .idCheckConfigurationNameMetadata)
        idCheckInformationInput = try container.decodeIfPresent(IdCheckInformationInput.self, forKey: .idCheckInformationInput)
        identityVerification = try container.decodeIfPresent(RecipientIdentityVerification.self, forKey: .identityVerification)
        inheritEmailNotificationConfiguration = try container.decodeIfPresent(String.self, forKey: .inheritEmailNotificationConfiguration)
        lastName = try container.decodeIfPresent(String.self, forKey: .lastName)
        lastNameMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .lastNameMetadata)
        lockedRecipientPhoneAuthEditable = try container.decodeIfPresent(String.self, forKey: .lockedRecipientPhoneAuthEditable)
        lockedRecipientSmsEditable = try container.decodeIfPresent(String.self, forKey: .lockedRecipientSmsEditable)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        nameMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .nameMetadata)
        note = try container.decodeIfPresent(String.self, forKey: .note)
        noteMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .noteMetadata)
        phoneAuthentication = try container.decodeIfPresent(RecipientPhoneAuthentication.self, forKey: .phoneAuthentication)
        recipientAttachments = try container.decodeIfPresent([RecipientAttachment].self, forKey: .recipientAttachments)
        recipientAuthenticationStatus = try container.decodeIfPresent(AuthenticationStatus.self, forKey: .recipientAuthenticationStatus)
        recipientFeatureMetadata = try container.decodeIfPresent([FeatureAvailableMetadata].self, forKey: .recipientFeatureMetadata)
        recipientId = try container.decodeIfPresent(String.self, forKey: .recipientId)
        recipientIdGuid = try container.decodeIfPresent(String.self, forKey: .recipientIdGuid)
        recipientType = try container.decodeIfPresent(String.self, forKey: .recipientType)
        recipientTypeMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .recipientTypeMetadata)
        requireIdLookup = try container.decodeIfPresent(String.self, forKey: .requireIdLookup)
        requireIdLookupMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .requireIdLookupMetadata)
        roleName = try container.decodeIfPresent(String.self, forKey: .roleName)
        routingOrder = try container.decodeIfPresent(String.self, forKey: .routingOrder)
        routingOrderMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .routingOrderMetadata)
        sentDateTime = try container.decodeIfPresent(String.self, forKey: .sentDateTime)
        signedDateTime = try container.decodeIfPresent(String.self, forKey: .signedDateTime)
        signingGroupId = try container.decodeIfPresent(String.self, forKey: .signingGroupId)
        signingGroupIdMetadata = try container.decodeIfPresent(PropertyMetadata.self, forKey: .signingGroupIdMetadata)
        signingGroupName = try container.decodeIfPresent(String.self, forKey: .signingGroupName)
        signingGroupUsers = try container.decodeIfPresent([UserInfo].self, forKey: .signingGroupUsers)
        smsAuthentication = try container.decodeIfPresent(RecipientSMSAuthentication.self, forKey: .smsAuthentication)
        socialAuthentications = try container.decodeIfPresent([SocialAuthentication].self, forKey: .socialAuthentications)
        status = try container.decodeIfPresent(String.self, forKey: .status)
        statusCode = try container.decodeIfPresent(String.self, forKey: .statusCode)
        suppressEmails = try container.decodeIfPresent(String.self, forKey: .suppressEmails)
        templateLocked = try container.decodeIfPresent(String.self, forKey: .templateLocked)
        templateRequired = try container.decodeIfPresent(String.self, forKey: .templateRequired)
        totalTabCount = try container.decodeIfPresent(String.self, forKey: .totalTabCount)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
    }
}

extension Editor: Hashable {
    public static func == (lhs: Editor, rhs: Editor) -> Bool {
        lhs.accessCode == rhs.accessCode &&
            lhs.accessCodeMetadata == rhs.accessCodeMetadata &&
            lhs.addAccessCodeToEmail == rhs.addAccessCodeToEmail &&
            lhs.additionalNotifications == rhs.additionalNotifications &&
            lhs.allowSystemOverrideForLockedRecipient == rhs.allowSystemOverrideForLockedRecipient &&
            lhs.clientUserId == rhs.clientUserId &&
            lhs.completedCount == rhs.completedCount &&
            lhs.customFields == rhs.customFields &&
            lhs.declinedDateTime == rhs.declinedDateTime &&
            lhs.declinedReason == rhs.declinedReason &&
            lhs.deliveredDateTime == rhs.deliveredDateTime &&
            lhs.deliveryMethod == rhs.deliveryMethod &&
            lhs.deliveryMethodMetadata == rhs.deliveryMethodMetadata &&
            lhs.designatorId == rhs.designatorId &&
            lhs.designatorIdGuid == rhs.designatorIdGuid &&
            lhs.documentVisibility == rhs.documentVisibility &&
            lhs.email == rhs.email &&
            lhs.emailMetadata == rhs.emailMetadata &&
            lhs.emailNotification == rhs.emailNotification &&
            lhs.embeddedRecipientStartURL == rhs.embeddedRecipientStartURL &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.faxNumber == rhs.faxNumber &&
            lhs.faxNumberMetadata == rhs.faxNumberMetadata &&
            lhs.firstName == rhs.firstName &&
            lhs.firstNameMetadata == rhs.firstNameMetadata &&
            lhs.fullName == rhs.fullName &&
            lhs.fullNameMetadata == rhs.fullNameMetadata &&
            lhs.idCheckConfigurationName == rhs.idCheckConfigurationName &&
            lhs.idCheckConfigurationNameMetadata == rhs.idCheckConfigurationNameMetadata &&
            lhs.idCheckInformationInput == rhs.idCheckInformationInput &&
            lhs.identityVerification == rhs.identityVerification &&
            lhs.inheritEmailNotificationConfiguration == rhs.inheritEmailNotificationConfiguration &&
            lhs.lastName == rhs.lastName &&
            lhs.lastNameMetadata == rhs.lastNameMetadata &&
            lhs.lockedRecipientPhoneAuthEditable == rhs.lockedRecipientPhoneAuthEditable &&
            lhs.lockedRecipientSmsEditable == rhs.lockedRecipientSmsEditable &&
            lhs.name == rhs.name &&
            lhs.nameMetadata == rhs.nameMetadata &&
            lhs.note == rhs.note &&
            lhs.noteMetadata == rhs.noteMetadata &&
            lhs.phoneAuthentication == rhs.phoneAuthentication &&
            lhs.recipientAttachments == rhs.recipientAttachments &&
            lhs.recipientAuthenticationStatus == rhs.recipientAuthenticationStatus &&
            lhs.recipientFeatureMetadata == rhs.recipientFeatureMetadata &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientIdGuid == rhs.recipientIdGuid &&
            lhs.recipientType == rhs.recipientType &&
            lhs.recipientTypeMetadata == rhs.recipientTypeMetadata &&
            lhs.requireIdLookup == rhs.requireIdLookup &&
            lhs.requireIdLookupMetadata == rhs.requireIdLookupMetadata &&
            lhs.roleName == rhs.roleName &&
            lhs.routingOrder == rhs.routingOrder &&
            lhs.routingOrderMetadata == rhs.routingOrderMetadata &&
            lhs.sentDateTime == rhs.sentDateTime &&
            lhs.signedDateTime == rhs.signedDateTime &&
            lhs.signingGroupId == rhs.signingGroupId &&
            lhs.signingGroupIdMetadata == rhs.signingGroupIdMetadata &&
            lhs.signingGroupName == rhs.signingGroupName &&
            lhs.signingGroupUsers == rhs.signingGroupUsers &&
            lhs.smsAuthentication == rhs.smsAuthentication &&
            lhs.socialAuthentications == rhs.socialAuthentications &&
            lhs.status == rhs.status &&
            lhs.statusCode == rhs.statusCode &&
            lhs.suppressEmails == rhs.suppressEmails &&
            lhs.templateLocked == rhs.templateLocked &&
            lhs.templateRequired == rhs.templateRequired &&
            lhs.totalTabCount == rhs.totalTabCount &&
            lhs.userId == rhs.userId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCode?.hashValue)
        hasher.combine(accessCodeMetadata?.hashValue)
        hasher.combine(addAccessCodeToEmail?.hashValue)
        hasher.combine(additionalNotifications?.hashValue)
        hasher.combine(allowSystemOverrideForLockedRecipient?.hashValue)
        hasher.combine(clientUserId?.hashValue)
        hasher.combine(completedCount?.hashValue)
        hasher.combine(customFields?.hashValue)
        hasher.combine(declinedDateTime?.hashValue)
        hasher.combine(declinedReason?.hashValue)
        hasher.combine(deliveredDateTime?.hashValue)
        hasher.combine(deliveryMethod?.hashValue)
        hasher.combine(deliveryMethodMetadata?.hashValue)
        hasher.combine(designatorId?.hashValue)
        hasher.combine(designatorIdGuid?.hashValue)
        hasher.combine(documentVisibility?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(emailMetadata?.hashValue)
        hasher.combine(emailNotification?.hashValue)
        hasher.combine(embeddedRecipientStartURL?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(faxNumber?.hashValue)
        hasher.combine(faxNumberMetadata?.hashValue)
        hasher.combine(firstName?.hashValue)
        hasher.combine(firstNameMetadata?.hashValue)
        hasher.combine(fullName?.hashValue)
        hasher.combine(fullNameMetadata?.hashValue)
        hasher.combine(idCheckConfigurationName?.hashValue)
        hasher.combine(idCheckConfigurationNameMetadata?.hashValue)
        hasher.combine(idCheckInformationInput?.hashValue)
        hasher.combine(identityVerification?.hashValue)
        hasher.combine(inheritEmailNotificationConfiguration?.hashValue)
        hasher.combine(lastName?.hashValue)
        hasher.combine(lastNameMetadata?.hashValue)
        hasher.combine(lockedRecipientPhoneAuthEditable?.hashValue)
        hasher.combine(lockedRecipientSmsEditable?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(nameMetadata?.hashValue)
        hasher.combine(note?.hashValue)
        hasher.combine(noteMetadata?.hashValue)
        hasher.combine(phoneAuthentication?.hashValue)
        hasher.combine(recipientAttachments?.hashValue)
        hasher.combine(recipientAuthenticationStatus?.hashValue)
        hasher.combine(recipientFeatureMetadata?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientIdGuid?.hashValue)
        hasher.combine(recipientType?.hashValue)
        hasher.combine(recipientTypeMetadata?.hashValue)
        hasher.combine(requireIdLookup?.hashValue)
        hasher.combine(requireIdLookupMetadata?.hashValue)
        hasher.combine(roleName?.hashValue)
        hasher.combine(routingOrder?.hashValue)
        hasher.combine(routingOrderMetadata?.hashValue)
        hasher.combine(sentDateTime?.hashValue)
        hasher.combine(signedDateTime?.hashValue)
        hasher.combine(signingGroupId?.hashValue)
        hasher.combine(signingGroupIdMetadata?.hashValue)
        hasher.combine(signingGroupName?.hashValue)
        hasher.combine(signingGroupUsers?.hashValue)
        hasher.combine(smsAuthentication?.hashValue)
        hasher.combine(socialAuthentications?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(statusCode?.hashValue)
        hasher.combine(suppressEmails?.hashValue)
        hasher.combine(templateLocked?.hashValue)
        hasher.combine(templateRequired?.hashValue)
        hasher.combine(totalTabCount?.hashValue)
        hasher.combine(userId?.hashValue)
    }
}

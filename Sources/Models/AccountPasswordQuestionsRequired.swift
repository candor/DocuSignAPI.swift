//
// AccountPasswordQuestionsRequired.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Information about the number of password questions required (0 to 4) to confirm a user&#39;s identity when a user needs to reset their password. */
public final class AccountPasswordQuestionsRequired: Content {
    /** The maximum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or greater than `minimumQuestions`. */
    public var maximumQuestions: String?
    /** The minimum number of password reset questions allowed for the account. This number must be between `0` and `4`, and equal to or less than `maximumQuestions`. */
    public var minimumQuestions: String?

    public init(maximumQuestions: String? = nil, minimumQuestions: String? = nil) {
        self.maximumQuestions = maximumQuestions
        self.minimumQuestions = minimumQuestions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case maximumQuestions
        case minimumQuestions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(maximumQuestions, forKey: .maximumQuestions)
        try container.encodeIfPresent(minimumQuestions, forKey: .minimumQuestions)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        maximumQuestions = try container.decodeIfPresent(String.self, forKey: .maximumQuestions)
        minimumQuestions = try container.decodeIfPresent(String.self, forKey: .minimumQuestions)
    }
}

extension AccountPasswordQuestionsRequired: Hashable {
    public static func == (lhs: AccountPasswordQuestionsRequired, rhs: AccountPasswordQuestionsRequired) -> Bool {
        lhs.maximumQuestions == rhs.maximumQuestions &&
            lhs.minimumQuestions == rhs.minimumQuestions
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(maximumQuestions?.hashValue)
        hasher.combine(minimumQuestions?.hashValue)
    }
}

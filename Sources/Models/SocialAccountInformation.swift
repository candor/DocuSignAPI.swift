//
// SocialAccountInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class SocialAccountInformation: Content {
    /**  */
    public var email: String?
    public var errorDetails: ErrorDetails?
    /** The social account provider (Facebook, Yahoo, etc.) */
    public var provider: String?
    /** The ID provided by the Socal Account. */
    public var socialId: String?
    /** The name of the user. */
    public var userName: String?

    public init(email: String? = nil, errorDetails: ErrorDetails? = nil, provider: String? = nil, socialId: String? = nil, userName: String? = nil) {
        self.email = email
        self.errorDetails = errorDetails
        self.provider = provider
        self.socialId = socialId
        self.userName = userName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case errorDetails
        case provider
        case socialId
        case userName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(socialId, forKey: .socialId)
        try container.encodeIfPresent(userName, forKey: .userName)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        email = try container.decodeIfPresent(String.self, forKey: .email)
        errorDetails = try container.decodeIfPresent(ErrorDetails.self, forKey: .errorDetails)
        provider = try container.decodeIfPresent(String.self, forKey: .provider)
        socialId = try container.decodeIfPresent(String.self, forKey: .socialId)
        userName = try container.decodeIfPresent(String.self, forKey: .userName)
    }
}

extension SocialAccountInformation: Hashable {
    public static func == (lhs: SocialAccountInformation, rhs: SocialAccountInformation) -> Bool {
        lhs.email == rhs.email &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.provider == rhs.provider &&
            lhs.socialId == rhs.socialId &&
            lhs.userName == rhs.userName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(email?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(provider?.hashValue)
        hasher.combine(socialId?.hashValue)
        hasher.combine(userName?.hashValue)
    }
}

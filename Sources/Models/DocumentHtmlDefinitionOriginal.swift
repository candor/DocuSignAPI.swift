//
// DocumentHtmlDefinitionOriginal.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class DocumentHtmlDefinitionOriginal: Content {
    /** The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab. */
    public var documentId: String?
    /** The GUID of the document. */
    public var documentIdGuid: String?
    public var htmlDefinition: DocumentHtmlDefinition?

    public init(documentId: String? = nil, documentIdGuid: String? = nil, htmlDefinition: DocumentHtmlDefinition? = nil) {
        self.documentId = documentId
        self.documentIdGuid = documentIdGuid
        self.htmlDefinition = htmlDefinition
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documentId
        case documentIdGuid
        case htmlDefinition
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(documentId, forKey: .documentId)
        try container.encodeIfPresent(documentIdGuid, forKey: .documentIdGuid)
        try container.encodeIfPresent(htmlDefinition, forKey: .htmlDefinition)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documentId = try container.decodeIfPresent(String.self, forKey: .documentId)
        documentIdGuid = try container.decodeIfPresent(String.self, forKey: .documentIdGuid)
        htmlDefinition = try container.decodeIfPresent(DocumentHtmlDefinition.self, forKey: .htmlDefinition)
    }
}

extension DocumentHtmlDefinitionOriginal: Hashable {
    public static func == (lhs: DocumentHtmlDefinitionOriginal, rhs: DocumentHtmlDefinitionOriginal) -> Bool {
        lhs.documentId == rhs.documentId &&
            lhs.documentIdGuid == rhs.documentIdGuid &&
            lhs.htmlDefinition == rhs.htmlDefinition
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(documentId?.hashValue)
        hasher.combine(documentIdGuid?.hashValue)
        hasher.combine(htmlDefinition?.hashValue)
    }
}

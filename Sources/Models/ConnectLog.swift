//
// ConnectLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about a Connect log entry. */
public final class ConnectLog: Content {
    /** The external account number (int) or account ID GUID. */
    public var accountId: String?
    /** The web address of the listener or retrieving service endpoint for Connect. */
    public var configUrl: String?
    /** A complex element containing information about the Connect configuration, error details, date/time, description and payload. This information is included in the response only when the `additional_info` query is set to **true**. This additional information is only available when retrieving general logs with [ConnectEvents:get](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents/get), but not when retrieving failure logs with [ConnectEvents:listFailures](https://developers.docusign.com/esign-rest-api/reference/Connect/ConnectEvents/listFailures). */
    public var connectDebugLog: [ConnectDebugLog]?
    /** The id of the Connect configuration that failed. If an account has multiple Connect configurations, this value is used to look up the Connect configuration for the failed post. */
    public var connectId: String?
    /** The UTC DateTime when the Connect post was created. */
    public var created: String?
    /** The email address of the envelope sender. */
    public var email: String?
    /** The id of the envelope that failed to post. */
    public var envelopeId: String?
    /** The server error associated with the Connect post failure. */
    public var error: String?
    /** The id of the Connect post failure. */
    public var failureId: String?
    /** The URI for the Connect post failure. */
    public var failureUri: String?
    /** The UTC DateTime of the last attempt to post. */
    public var lastTry: String?
    /** The id of the Connect log entry. */
    public var logId: String?
    /** The URI for the Connect log entry. */
    public var logUri: String?
    /** The number of times the Connect post has been retried. */
    public var retryCount: String?
    /** A URI that you can use to retry to publish the Connect post. */
    public var retryUri: String?
    /** The envelope status for the Connect post. Possible values are: - `Any` - `Voided` - `Created` - `Deleted` - `Sent` - `Delivered` - `Signed` - `Completed` - `Declined` - `TimedOut` - `Template` - `Processing`  For details about these statuses, see [Envelope Status Code Descriptions](https://developers.docusign.com/esign-rest-api/guides/status-and-error-codes#envelope-status-code-descriptions). */
    public var status: String?
    /** The subject of the envelope. */
    public var subject: String?
    /** The name of the sender of the envelope. */
    public var userName: String?

    public init(accountId: String? = nil, configUrl: String? = nil, connectDebugLog: [ConnectDebugLog]? = nil, connectId: String? = nil, created: String? = nil, email: String? = nil, envelopeId: String? = nil, error: String? = nil, failureId: String? = nil, failureUri: String? = nil, lastTry: String? = nil, logId: String? = nil, logUri: String? = nil, retryCount: String? = nil, retryUri: String? = nil, status: String? = nil, subject: String? = nil, userName: String? = nil) {
        self.accountId = accountId
        self.configUrl = configUrl
        self.connectDebugLog = connectDebugLog
        self.connectId = connectId
        self.created = created
        self.email = email
        self.envelopeId = envelopeId
        self.error = error
        self.failureId = failureId
        self.failureUri = failureUri
        self.lastTry = lastTry
        self.logId = logId
        self.logUri = logUri
        self.retryCount = retryCount
        self.retryUri = retryUri
        self.status = status
        self.subject = subject
        self.userName = userName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId
        case configUrl
        case connectDebugLog
        case connectId
        case created
        case email
        case envelopeId
        case error
        case failureId
        case failureUri
        case lastTry
        case logId
        case logUri
        case retryCount
        case retryUri
        case status
        case subject
        case userName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(configUrl, forKey: .configUrl)
        try container.encodeIfPresent(connectDebugLog, forKey: .connectDebugLog)
        try container.encodeIfPresent(connectId, forKey: .connectId)
        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(failureId, forKey: .failureId)
        try container.encodeIfPresent(failureUri, forKey: .failureUri)
        try container.encodeIfPresent(lastTry, forKey: .lastTry)
        try container.encodeIfPresent(logId, forKey: .logId)
        try container.encodeIfPresent(logUri, forKey: .logUri)
        try container.encodeIfPresent(retryCount, forKey: .retryCount)
        try container.encodeIfPresent(retryUri, forKey: .retryUri)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(userName, forKey: .userName)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        configUrl = try container.decodeIfPresent(String.self, forKey: .configUrl)
        connectDebugLog = try container.decodeIfPresent([ConnectDebugLog].self, forKey: .connectDebugLog)
        connectId = try container.decodeIfPresent(String.self, forKey: .connectId)
        created = try container.decodeIfPresent(String.self, forKey: .created)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        envelopeId = try container.decodeIfPresent(String.self, forKey: .envelopeId)
        error = try container.decodeIfPresent(String.self, forKey: .error)
        failureId = try container.decodeIfPresent(String.self, forKey: .failureId)
        failureUri = try container.decodeIfPresent(String.self, forKey: .failureUri)
        lastTry = try container.decodeIfPresent(String.self, forKey: .lastTry)
        logId = try container.decodeIfPresent(String.self, forKey: .logId)
        logUri = try container.decodeIfPresent(String.self, forKey: .logUri)
        retryCount = try container.decodeIfPresent(String.self, forKey: .retryCount)
        retryUri = try container.decodeIfPresent(String.self, forKey: .retryUri)
        status = try container.decodeIfPresent(String.self, forKey: .status)
        subject = try container.decodeIfPresent(String.self, forKey: .subject)
        userName = try container.decodeIfPresent(String.self, forKey: .userName)
    }
}

extension ConnectLog: Hashable {
    public static func == (lhs: ConnectLog, rhs: ConnectLog) -> Bool {
        lhs.accountId == rhs.accountId &&
            lhs.configUrl == rhs.configUrl &&
            lhs.connectDebugLog == rhs.connectDebugLog &&
            lhs.connectId == rhs.connectId &&
            lhs.created == rhs.created &&
            lhs.email == rhs.email &&
            lhs.envelopeId == rhs.envelopeId &&
            lhs.error == rhs.error &&
            lhs.failureId == rhs.failureId &&
            lhs.failureUri == rhs.failureUri &&
            lhs.lastTry == rhs.lastTry &&
            lhs.logId == rhs.logId &&
            lhs.logUri == rhs.logUri &&
            lhs.retryCount == rhs.retryCount &&
            lhs.retryUri == rhs.retryUri &&
            lhs.status == rhs.status &&
            lhs.subject == rhs.subject &&
            lhs.userName == rhs.userName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountId?.hashValue)
        hasher.combine(configUrl?.hashValue)
        hasher.combine(connectDebugLog?.hashValue)
        hasher.combine(connectId?.hashValue)
        hasher.combine(created?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(envelopeId?.hashValue)
        hasher.combine(error?.hashValue)
        hasher.combine(failureId?.hashValue)
        hasher.combine(failureUri?.hashValue)
        hasher.combine(lastTry?.hashValue)
        hasher.combine(logId?.hashValue)
        hasher.combine(logUri?.hashValue)
        hasher.combine(retryCount?.hashValue)
        hasher.combine(retryUri?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(subject?.hashValue)
        hasher.combine(userName?.hashValue)
    }
}

//
// BillingPlanInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object contains details about a billing plan. */
public final class BillingPlanInformation: Content {
    public var appStoreReceipt: AppStoreReceipt?
    public var billingAddress: AccountAddress?
    public var creditCardInformation: CreditCardInformation?
    public var directDebitProcessorInformation: DirectDebitProcessorInformation?
    /** (Optional) The user's reason for downgrading their billing plan. */
    public var downgradeReason: String?
    /** When set to **true**, customer support is provided as part of the account plan. */
    public var enableSupport: String?
    /** The number of seats (users) included in the plan. */
    public var includedSeats: String?
    /** Reserved for DocuSign. */
    public var incrementalSeats: String?
    /** The payment method used for the billing plan. Valid values are:  - `NotSupported` - `CreditCard` - `PurchaseOrder` - `Premium` - `Freemium` - `FreeTrial` - `AppStore` - `DigitalExternal` - `DirectDebit` */
    public var paymentMethod: String?
    public var paymentProcessorInformation: PaymentProcessorInformation?
    public var planInformation: PlanInformation?
    public var referralInformation: ReferralInformation?
    /** The renewal status of the account. Possible values are:  - `auto`: The account automatically renews.  - `queued_for_close`: The account will be closed at the billingPeriodEndDate.  - queued_for_downgrade`: The account will be downgraded at the `billingPeriodEndDate`. */
    public var renewalStatus: String?
    /** Reserved for DocuSign. */
    public var saleDiscountAmount: String?
    /** Reserved for DocuSign. */
    public var saleDiscountFixedAmount: String?
    /** Reserved for DocuSign. */
    public var saleDiscountPercent: String?
    /** Reserved for DocuSign. */
    public var saleDiscountPeriods: String?
    /** Reserved for DocuSign. */
    public var saleDiscountSeatPriceOverride: String?

    public init(appStoreReceipt: AppStoreReceipt? = nil, billingAddress: AccountAddress? = nil, creditCardInformation: CreditCardInformation? = nil, directDebitProcessorInformation: DirectDebitProcessorInformation? = nil, downgradeReason: String? = nil, enableSupport: String? = nil, includedSeats: String? = nil, incrementalSeats: String? = nil, paymentMethod: String? = nil, paymentProcessorInformation: PaymentProcessorInformation? = nil, planInformation: PlanInformation? = nil, referralInformation: ReferralInformation? = nil, renewalStatus: String? = nil, saleDiscountAmount: String? = nil, saleDiscountFixedAmount: String? = nil, saleDiscountPercent: String? = nil, saleDiscountPeriods: String? = nil, saleDiscountSeatPriceOverride: String? = nil) {
        self.appStoreReceipt = appStoreReceipt
        self.billingAddress = billingAddress
        self.creditCardInformation = creditCardInformation
        self.directDebitProcessorInformation = directDebitProcessorInformation
        self.downgradeReason = downgradeReason
        self.enableSupport = enableSupport
        self.includedSeats = includedSeats
        self.incrementalSeats = incrementalSeats
        self.paymentMethod = paymentMethod
        self.paymentProcessorInformation = paymentProcessorInformation
        self.planInformation = planInformation
        self.referralInformation = referralInformation
        self.renewalStatus = renewalStatus
        self.saleDiscountAmount = saleDiscountAmount
        self.saleDiscountFixedAmount = saleDiscountFixedAmount
        self.saleDiscountPercent = saleDiscountPercent
        self.saleDiscountPeriods = saleDiscountPeriods
        self.saleDiscountSeatPriceOverride = saleDiscountSeatPriceOverride
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appStoreReceipt
        case billingAddress
        case creditCardInformation
        case directDebitProcessorInformation
        case downgradeReason
        case enableSupport
        case includedSeats
        case incrementalSeats
        case paymentMethod
        case paymentProcessorInformation
        case planInformation
        case referralInformation
        case renewalStatus
        case saleDiscountAmount
        case saleDiscountFixedAmount
        case saleDiscountPercent
        case saleDiscountPeriods
        case saleDiscountSeatPriceOverride
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(appStoreReceipt, forKey: .appStoreReceipt)
        try container.encodeIfPresent(billingAddress, forKey: .billingAddress)
        try container.encodeIfPresent(creditCardInformation, forKey: .creditCardInformation)
        try container.encodeIfPresent(directDebitProcessorInformation, forKey: .directDebitProcessorInformation)
        try container.encodeIfPresent(downgradeReason, forKey: .downgradeReason)
        try container.encodeIfPresent(enableSupport, forKey: .enableSupport)
        try container.encodeIfPresent(includedSeats, forKey: .includedSeats)
        try container.encodeIfPresent(incrementalSeats, forKey: .incrementalSeats)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(paymentProcessorInformation, forKey: .paymentProcessorInformation)
        try container.encodeIfPresent(planInformation, forKey: .planInformation)
        try container.encodeIfPresent(referralInformation, forKey: .referralInformation)
        try container.encodeIfPresent(renewalStatus, forKey: .renewalStatus)
        try container.encodeIfPresent(saleDiscountAmount, forKey: .saleDiscountAmount)
        try container.encodeIfPresent(saleDiscountFixedAmount, forKey: .saleDiscountFixedAmount)
        try container.encodeIfPresent(saleDiscountPercent, forKey: .saleDiscountPercent)
        try container.encodeIfPresent(saleDiscountPeriods, forKey: .saleDiscountPeriods)
        try container.encodeIfPresent(saleDiscountSeatPriceOverride, forKey: .saleDiscountSeatPriceOverride)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        appStoreReceipt = try container.decodeIfPresent(AppStoreReceipt.self, forKey: .appStoreReceipt)
        billingAddress = try container.decodeIfPresent(AccountAddress.self, forKey: .billingAddress)
        creditCardInformation = try container.decodeIfPresent(CreditCardInformation.self, forKey: .creditCardInformation)
        directDebitProcessorInformation = try container.decodeIfPresent(DirectDebitProcessorInformation.self, forKey: .directDebitProcessorInformation)
        downgradeReason = try container.decodeIfPresent(String.self, forKey: .downgradeReason)
        enableSupport = try container.decodeIfPresent(String.self, forKey: .enableSupport)
        includedSeats = try container.decodeIfPresent(String.self, forKey: .includedSeats)
        incrementalSeats = try container.decodeIfPresent(String.self, forKey: .incrementalSeats)
        paymentMethod = try container.decodeIfPresent(String.self, forKey: .paymentMethod)
        paymentProcessorInformation = try container.decodeIfPresent(PaymentProcessorInformation.self, forKey: .paymentProcessorInformation)
        planInformation = try container.decodeIfPresent(PlanInformation.self, forKey: .planInformation)
        referralInformation = try container.decodeIfPresent(ReferralInformation.self, forKey: .referralInformation)
        renewalStatus = try container.decodeIfPresent(String.self, forKey: .renewalStatus)
        saleDiscountAmount = try container.decodeIfPresent(String.self, forKey: .saleDiscountAmount)
        saleDiscountFixedAmount = try container.decodeIfPresent(String.self, forKey: .saleDiscountFixedAmount)
        saleDiscountPercent = try container.decodeIfPresent(String.self, forKey: .saleDiscountPercent)
        saleDiscountPeriods = try container.decodeIfPresent(String.self, forKey: .saleDiscountPeriods)
        saleDiscountSeatPriceOverride = try container.decodeIfPresent(String.self, forKey: .saleDiscountSeatPriceOverride)
    }
}

extension BillingPlanInformation: Hashable {
    public static func == (lhs: BillingPlanInformation, rhs: BillingPlanInformation) -> Bool {
        lhs.appStoreReceipt == rhs.appStoreReceipt &&
            lhs.billingAddress == rhs.billingAddress &&
            lhs.creditCardInformation == rhs.creditCardInformation &&
            lhs.directDebitProcessorInformation == rhs.directDebitProcessorInformation &&
            lhs.downgradeReason == rhs.downgradeReason &&
            lhs.enableSupport == rhs.enableSupport &&
            lhs.includedSeats == rhs.includedSeats &&
            lhs.incrementalSeats == rhs.incrementalSeats &&
            lhs.paymentMethod == rhs.paymentMethod &&
            lhs.paymentProcessorInformation == rhs.paymentProcessorInformation &&
            lhs.planInformation == rhs.planInformation &&
            lhs.referralInformation == rhs.referralInformation &&
            lhs.renewalStatus == rhs.renewalStatus &&
            lhs.saleDiscountAmount == rhs.saleDiscountAmount &&
            lhs.saleDiscountFixedAmount == rhs.saleDiscountFixedAmount &&
            lhs.saleDiscountPercent == rhs.saleDiscountPercent &&
            lhs.saleDiscountPeriods == rhs.saleDiscountPeriods &&
            lhs.saleDiscountSeatPriceOverride == rhs.saleDiscountSeatPriceOverride
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(appStoreReceipt?.hashValue)
        hasher.combine(billingAddress?.hashValue)
        hasher.combine(creditCardInformation?.hashValue)
        hasher.combine(directDebitProcessorInformation?.hashValue)
        hasher.combine(downgradeReason?.hashValue)
        hasher.combine(enableSupport?.hashValue)
        hasher.combine(includedSeats?.hashValue)
        hasher.combine(incrementalSeats?.hashValue)
        hasher.combine(paymentMethod?.hashValue)
        hasher.combine(paymentProcessorInformation?.hashValue)
        hasher.combine(planInformation?.hashValue)
        hasher.combine(referralInformation?.hashValue)
        hasher.combine(renewalStatus?.hashValue)
        hasher.combine(saleDiscountAmount?.hashValue)
        hasher.combine(saleDiscountFixedAmount?.hashValue)
        hasher.combine(saleDiscountPercent?.hashValue)
        hasher.combine(saleDiscountPeriods?.hashValue)
        hasher.combine(saleDiscountSeatPriceOverride?.hashValue)
    }
}

//
// CustomField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object provides details about a custom field. */
public final class CustomField: Content {
    /** The type of custom field. Valid values are:  - `text` (default) - `list` */
    public var customFieldType: String?
    public var errorDetails: ErrorDetails?
    /** The id of the custom field. */
    public var fieldId: String?
    /** For a list custom field, this is an array of strings that represent the items in a list.   Maximum Length: 2,000 characters. */
    public var listItems: [String]?
    /** The name of the custom field. */
    public var name: String?
    /** When set to **true**, the signer must complete the custom field. */
    public var required: String?
    /** When set to **true**, the custom field displays at the top of the Certificate of Completion. */
    public var show: String?
    /** Specifies the value of the custom field.   Maximum Length: 2,000 characters. */
    public var value: String?

    public init(customFieldType: String? = nil, errorDetails: ErrorDetails? = nil, fieldId: String? = nil, listItems: [String]? = nil, name: String? = nil, required: String? = nil, show: String? = nil, value: String? = nil) {
        self.customFieldType = customFieldType
        self.errorDetails = errorDetails
        self.fieldId = fieldId
        self.listItems = listItems
        self.name = name
        self.required = required
        self.show = show
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customFieldType
        case errorDetails
        case fieldId
        case listItems
        case name
        case required
        case show
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(customFieldType, forKey: .customFieldType)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(fieldId, forKey: .fieldId)
        try container.encodeIfPresent(listItems, forKey: .listItems)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(required, forKey: .required)
        try container.encodeIfPresent(show, forKey: .show)
        try container.encodeIfPresent(value, forKey: .value)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        customFieldType = try container.decodeIfPresent(String.self, forKey: .customFieldType)
        errorDetails = try container.decodeIfPresent(ErrorDetails.self, forKey: .errorDetails)
        fieldId = try container.decodeIfPresent(String.self, forKey: .fieldId)
        listItems = try container.decodeIfPresent([String].self, forKey: .listItems)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        required = try container.decodeIfPresent(String.self, forKey: .required)
        show = try container.decodeIfPresent(String.self, forKey: .show)
        value = try container.decodeIfPresent(String.self, forKey: .value)
    }
}

extension CustomField: Hashable {
    public static func == (lhs: CustomField, rhs: CustomField) -> Bool {
        lhs.customFieldType == rhs.customFieldType &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.fieldId == rhs.fieldId &&
            lhs.listItems == rhs.listItems &&
            lhs.name == rhs.name &&
            lhs.required == rhs.required &&
            lhs.show == rhs.show &&
            lhs.value == rhs.value
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(customFieldType?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(fieldId?.hashValue)
        hasher.combine(listItems?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(required?.hashValue)
        hasher.combine(show?.hashValue)
        hasher.combine(value?.hashValue)
    }
}

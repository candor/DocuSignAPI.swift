//
// DateStampProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Specifies the area in which a date stamp is placed. This parameter uses pixel positioning to draw a rectangle at the center of the stamp area. The stamp is superimposed on top of this central area.  This property contains the following information about the central rectangle:  - &#x60;DateAreaX&#x60;: The X axis position of the top-left corner. - &#x60;DateAreaY&#x60;: The Y axis position of the top-left corner. - &#x60;DateAreaWidth&#x60;: The width of the rectangle. - &#x60;DateAreaHeight&#x60;: The height of the rectangle. */
public final class DateStampProperties: Content {
    /** The height of the rectangle. */
    public var dateAreaHeight: String?
    /** The width of the rectangle. */
    public var dateAreaWidth: String?
    /** The X axis position of the top-left corner. */
    public var dateAreaX: String?
    /** The Y axis position of the top-left corner. */
    public var dateAreaY: String?

    public init(dateAreaHeight: String? = nil, dateAreaWidth: String? = nil, dateAreaX: String? = nil, dateAreaY: String? = nil) {
        self.dateAreaHeight = dateAreaHeight
        self.dateAreaWidth = dateAreaWidth
        self.dateAreaX = dateAreaX
        self.dateAreaY = dateAreaY
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateAreaHeight
        case dateAreaWidth
        case dateAreaX
        case dateAreaY
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(dateAreaHeight, forKey: .dateAreaHeight)
        try container.encodeIfPresent(dateAreaWidth, forKey: .dateAreaWidth)
        try container.encodeIfPresent(dateAreaX, forKey: .dateAreaX)
        try container.encodeIfPresent(dateAreaY, forKey: .dateAreaY)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        dateAreaHeight = try container.decodeIfPresent(String.self, forKey: .dateAreaHeight)
        dateAreaWidth = try container.decodeIfPresent(String.self, forKey: .dateAreaWidth)
        dateAreaX = try container.decodeIfPresent(String.self, forKey: .dateAreaX)
        dateAreaY = try container.decodeIfPresent(String.self, forKey: .dateAreaY)
    }
}

extension DateStampProperties: Hashable {
    public static func == (lhs: DateStampProperties, rhs: DateStampProperties) -> Bool {
        lhs.dateAreaHeight == rhs.dateAreaHeight &&
            lhs.dateAreaWidth == rhs.dateAreaWidth &&
            lhs.dateAreaX == rhs.dateAreaX &&
            lhs.dateAreaY == rhs.dateAreaY
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(dateAreaHeight?.hashValue)
        hasher.combine(dateAreaWidth?.hashValue)
        hasher.combine(dateAreaX?.hashValue)
        hasher.combine(dateAreaY?.hashValue)
    }
}

//
// Expirations.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** A complex element that specifies the expiration settings for the envelope. */
public final class Expirations: Content {
    /** An integer specifying the number of days that a sent envelope remains active before it expires. A negative number in a response indicates that the envelope has already expired. */
    public var expireAfter: String?
    /** When set to **true**, the envelope expires (is no longer available for signing) after the specified number of days after it is sent (`sentDateTime`). Set  `expireAfter` to set the number of days until an envelope expires. When **false**, the account default setting is used. If the account does not have an expiration setting, the DocuSign default value of 120 days is used. */
    public var expireEnabled: String?
    /** An integer that specifying the number of days before the envelope expires that an expiration warning email is sent to the recipient. If set to 0 (zero), no warning email is sent. */
    public var expireWarn: String?

    public init(expireAfter: String? = nil, expireEnabled: String? = nil, expireWarn: String? = nil) {
        self.expireAfter = expireAfter
        self.expireEnabled = expireEnabled
        self.expireWarn = expireWarn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expireAfter
        case expireEnabled
        case expireWarn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(expireAfter, forKey: .expireAfter)
        try container.encodeIfPresent(expireEnabled, forKey: .expireEnabled)
        try container.encodeIfPresent(expireWarn, forKey: .expireWarn)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        expireAfter = try container.decodeIfPresent(String.self, forKey: .expireAfter)
        expireEnabled = try container.decodeIfPresent(String.self, forKey: .expireEnabled)
        expireWarn = try container.decodeIfPresent(String.self, forKey: .expireWarn)
    }
}

extension Expirations: Hashable {
    public static func == (lhs: Expirations, rhs: Expirations) -> Bool {
        lhs.expireAfter == rhs.expireAfter &&
            lhs.expireEnabled == rhs.expireEnabled &&
            lhs.expireWarn == rhs.expireWarn
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(expireAfter?.hashValue)
        hasher.combine(expireEnabled?.hashValue)
        hasher.combine(expireWarn?.hashValue)
    }
}

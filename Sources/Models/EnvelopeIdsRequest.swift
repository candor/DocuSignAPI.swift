//
// EnvelopeIdsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Lists of envelope and transaction IDs to use in the results. */
public final class EnvelopeIdsRequest: Content {
    /** A comma-separated list of envelope IDs to include in the results. */
    public var envelopeIds: [String]?
    /** A comma-separated list of transaction IDs to include in the results. Note that transaction IDs are valid for seven days. */
    public var transactionIds: [String]?

    public init(envelopeIds: [String]? = nil, transactionIds: [String]? = nil) {
        self.envelopeIds = envelopeIds
        self.transactionIds = transactionIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case envelopeIds
        case transactionIds
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(envelopeIds, forKey: .envelopeIds)
        try container.encodeIfPresent(transactionIds, forKey: .transactionIds)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        envelopeIds = try container.decodeIfPresent([String].self, forKey: .envelopeIds)
        transactionIds = try container.decodeIfPresent([String].self, forKey: .transactionIds)
    }
}

extension EnvelopeIdsRequest: Hashable {
    public static func == (lhs: EnvelopeIdsRequest, rhs: EnvelopeIdsRequest) -> Bool {
        lhs.envelopeIds == rhs.envelopeIds &&
            lhs.transactionIds == rhs.transactionIds
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(envelopeIds?.hashValue)
        hasher.combine(transactionIds?.hashValue)
    }
}

//
// Attachment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about an attachment. */
public final class Attachment: Content {
    /** Valid values are `sender` and `senderAndAllRecipients`. */
    public var accessControl: String?
    /** The unique identifier for the attachment. */
    public var attachmentId: String?
    /** Specifies the type of the attachment for the recipient. Possible values are:  - `.htm` - `.xml` */
    public var attachmentType: String?
    /** A Base64-encoded representation of the attachment that is used to upload and download the file. File attachments may be up to 50 MB in size. */
    public var data: String?
    /** A label for the attachment. Potential values include:   - `guidedForm`: [Guided forms](https://www.docusign.com/products/guided-forms) provide a step-by-step, mobile-ready experience to help signers easily complete long or complex forms. - `eventNotifications`: A list of envelope-level event statuses that trigger Connect to send updates to the endpoint specified in the `url` property.   */
    public var label: String?
    /** The name of the attachment. */
    public var name: String?
    /** The URL of a previously staged chunked upload. Using a chunked upload enables you to stage a large, chunkable temp file. You then use the `remoteUrl` property to reference the chunked upload as the content in attachment and document-related requests. The `remoteUrl` property cannot be used for downloads. */
    public var remoteUrl: String?

    public init(accessControl: String? = nil, attachmentId: String? = nil, attachmentType: String? = nil, data: String? = nil, label: String? = nil, name: String? = nil, remoteUrl: String? = nil) {
        self.accessControl = accessControl
        self.attachmentId = attachmentId
        self.attachmentType = attachmentType
        self.data = data
        self.label = label
        self.name = name
        self.remoteUrl = remoteUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessControl
        case attachmentId
        case attachmentType
        case data
        case label
        case name
        case remoteUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accessControl, forKey: .accessControl)
        try container.encodeIfPresent(attachmentId, forKey: .attachmentId)
        try container.encodeIfPresent(attachmentType, forKey: .attachmentType)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(remoteUrl, forKey: .remoteUrl)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accessControl = try container.decodeIfPresent(String.self, forKey: .accessControl)
        attachmentId = try container.decodeIfPresent(String.self, forKey: .attachmentId)
        attachmentType = try container.decodeIfPresent(String.self, forKey: .attachmentType)
        data = try container.decodeIfPresent(String.self, forKey: .data)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        remoteUrl = try container.decodeIfPresent(String.self, forKey: .remoteUrl)
    }
}

extension Attachment: Hashable {
    public static func == (lhs: Attachment, rhs: Attachment) -> Bool {
        lhs.accessControl == rhs.accessControl &&
            lhs.attachmentId == rhs.attachmentId &&
            lhs.attachmentType == rhs.attachmentType &&
            lhs.data == rhs.data &&
            lhs.label == rhs.label &&
            lhs.name == rhs.name &&
            lhs.remoteUrl == rhs.remoteUrl
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessControl?.hashValue)
        hasher.combine(attachmentId?.hashValue)
        hasher.combine(attachmentType?.hashValue)
        hasher.combine(data?.hashValue)
        hasher.combine(label?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(remoteUrl?.hashValue)
    }
}

//
// AppStoreProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about an APP store product. */
public final class AppStoreProduct: Content {
    /**  */
    public var marketPlace: String?
    /** The Product ID from the AppStore. */
    public var productId: String?

    public init(marketPlace: String? = nil, productId: String? = nil) {
        self.marketPlace = marketPlace
        self.productId = productId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case marketPlace
        case productId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(marketPlace, forKey: .marketPlace)
        try container.encodeIfPresent(productId, forKey: .productId)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        marketPlace = try container.decodeIfPresent(String.self, forKey: .marketPlace)
        productId = try container.decodeIfPresent(String.self, forKey: .productId)
    }
}

extension AppStoreProduct: Hashable {
    public static func == (lhs: AppStoreProduct, rhs: AppStoreProduct) -> Bool {
        lhs.marketPlace == rhs.marketPlace &&
            lhs.productId == rhs.productId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(marketPlace?.hashValue)
        hasher.combine(productId?.hashValue)
    }
}

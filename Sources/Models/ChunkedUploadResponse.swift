//
// ChunkedUploadResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This response object is returned after you upload a chunked upload. */
public final class ChunkedUploadResponse: Content {
    /** A 64-byte, Secure Hash Algorithm 256 (SHA256) checksum that the caller computes across the entirety of the original content that has been uploaded to the chunked upload. DocuSign compares this value to its own computation. If the two values are not equal, the original content and received content are not the same and the commit action is refused. */
    public var checksum: String?
    /** The id of the chunked upload.  */
    public var chunkedUploadId: String?
    /** A list of the parts that compose the chunked upload, including their byte sizes. The list must be contiguous before you can commit the chunked upload. */
    public var chunkedUploadParts: [ChunkedUploadPart]?
    /** The URI that you use to reference the chunked upload in other API requests, such as envelope document and envelope attachment requests.  */
    public var chunkedUploadUri: String?
    /** When **true**, the chunked upload has been committed. A committed chunked upload can no longer receive any additional parts and is ready for use within other API requests.  */
    public var committed: String?
    /** The UTC time at which the chunked upload expires and is no longer addressable.   **Note**: You must fully upload and use a chunked upload within 20 minutes of initializing it.  */
    public var expirationDateTime: String?
    /** The maximum number of parts allowed for a chunked upload. This value is configurable per DocuSign environment, account, or integrator. The default value is 128. The maximum possible value is 256.   */
    public var maxChunkedUploadParts: String?
    /** The maximum total size allowed for a chunked upload. This value is configured per DocuSign environment, account, or integrator. The default value is 50 MB. */
    public var maxTotalSize: String?
    /** The total size of the parts of the chunked upload.  **Note**: When a chunked upload is used as an envelope document, it is subject to the PDF size limit (25 MB) and page count limit that apply to all envelope documents. */
    public var totalSize: String?

    public init(checksum: String? = nil, chunkedUploadId: String? = nil, chunkedUploadParts: [ChunkedUploadPart]? = nil, chunkedUploadUri: String? = nil, committed: String? = nil, expirationDateTime: String? = nil, maxChunkedUploadParts: String? = nil, maxTotalSize: String? = nil, totalSize: String? = nil) {
        self.checksum = checksum
        self.chunkedUploadId = chunkedUploadId
        self.chunkedUploadParts = chunkedUploadParts
        self.chunkedUploadUri = chunkedUploadUri
        self.committed = committed
        self.expirationDateTime = expirationDateTime
        self.maxChunkedUploadParts = maxChunkedUploadParts
        self.maxTotalSize = maxTotalSize
        self.totalSize = totalSize
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case checksum
        case chunkedUploadId
        case chunkedUploadParts
        case chunkedUploadUri
        case committed
        case expirationDateTime
        case maxChunkedUploadParts
        case maxTotalSize
        case totalSize
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(checksum, forKey: .checksum)
        try container.encodeIfPresent(chunkedUploadId, forKey: .chunkedUploadId)
        try container.encodeIfPresent(chunkedUploadParts, forKey: .chunkedUploadParts)
        try container.encodeIfPresent(chunkedUploadUri, forKey: .chunkedUploadUri)
        try container.encodeIfPresent(committed, forKey: .committed)
        try container.encodeIfPresent(expirationDateTime, forKey: .expirationDateTime)
        try container.encodeIfPresent(maxChunkedUploadParts, forKey: .maxChunkedUploadParts)
        try container.encodeIfPresent(maxTotalSize, forKey: .maxTotalSize)
        try container.encodeIfPresent(totalSize, forKey: .totalSize)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        checksum = try container.decodeIfPresent(String.self, forKey: .checksum)
        chunkedUploadId = try container.decodeIfPresent(String.self, forKey: .chunkedUploadId)
        chunkedUploadParts = try container.decodeIfPresent([ChunkedUploadPart].self, forKey: .chunkedUploadParts)
        chunkedUploadUri = try container.decodeIfPresent(String.self, forKey: .chunkedUploadUri)
        committed = try container.decodeIfPresent(String.self, forKey: .committed)
        expirationDateTime = try container.decodeIfPresent(String.self, forKey: .expirationDateTime)
        maxChunkedUploadParts = try container.decodeIfPresent(String.self, forKey: .maxChunkedUploadParts)
        maxTotalSize = try container.decodeIfPresent(String.self, forKey: .maxTotalSize)
        totalSize = try container.decodeIfPresent(String.self, forKey: .totalSize)
    }
}

extension ChunkedUploadResponse: Hashable {
    public static func == (lhs: ChunkedUploadResponse, rhs: ChunkedUploadResponse) -> Bool {
        lhs.checksum == rhs.checksum &&
            lhs.chunkedUploadId == rhs.chunkedUploadId &&
            lhs.chunkedUploadParts == rhs.chunkedUploadParts &&
            lhs.chunkedUploadUri == rhs.chunkedUploadUri &&
            lhs.committed == rhs.committed &&
            lhs.expirationDateTime == rhs.expirationDateTime &&
            lhs.maxChunkedUploadParts == rhs.maxChunkedUploadParts &&
            lhs.maxTotalSize == rhs.maxTotalSize &&
            lhs.totalSize == rhs.totalSize
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(checksum?.hashValue)
        hasher.combine(chunkedUploadId?.hashValue)
        hasher.combine(chunkedUploadParts?.hashValue)
        hasher.combine(chunkedUploadUri?.hashValue)
        hasher.combine(committed?.hashValue)
        hasher.combine(expirationDateTime?.hashValue)
        hasher.combine(maxChunkedUploadParts?.hashValue)
        hasher.combine(maxTotalSize?.hashValue)
        hasher.combine(totalSize?.hashValue)
    }
}

//
// UserPasswordInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class UserPasswordInformation: Content {
    /** The user's current password to be changed. */
    public var currentPassword: String?
    /** The user's email address for the associated account. */
    public var email: String?
    public var forgottenPasswordInfo: ForgottenPasswordInformation?
    /** The user's new password. */
    public var newPassword: String?

    public init(currentPassword: String? = nil, email: String? = nil, forgottenPasswordInfo: ForgottenPasswordInformation? = nil, newPassword: String? = nil) {
        self.currentPassword = currentPassword
        self.email = email
        self.forgottenPasswordInfo = forgottenPasswordInfo
        self.newPassword = newPassword
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currentPassword
        case email
        case forgottenPasswordInfo
        case newPassword
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(currentPassword, forKey: .currentPassword)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(forgottenPasswordInfo, forKey: .forgottenPasswordInfo)
        try container.encodeIfPresent(newPassword, forKey: .newPassword)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        currentPassword = try container.decodeIfPresent(String.self, forKey: .currentPassword)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        forgottenPasswordInfo = try container.decodeIfPresent(ForgottenPasswordInformation.self, forKey: .forgottenPasswordInfo)
        newPassword = try container.decodeIfPresent(String.self, forKey: .newPassword)
    }
}

extension UserPasswordInformation: Hashable {
    public static func == (lhs: UserPasswordInformation, rhs: UserPasswordInformation) -> Bool {
        lhs.currentPassword == rhs.currentPassword &&
            lhs.email == rhs.email &&
            lhs.forgottenPasswordInfo == rhs.forgottenPasswordInfo &&
            lhs.newPassword == rhs.newPassword
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentPassword?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(forgottenPasswordInfo?.hashValue)
        hasher.combine(newPassword?.hashValue)
    }
}

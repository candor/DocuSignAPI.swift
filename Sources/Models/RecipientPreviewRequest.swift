//
// RecipientPreviewRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This request object contains the information necessary to create a recipient preview. */
public final class RecipientPreviewRequest: Content {
    /** A unique identifier of the authentication event executed by the client application. */
    public var assertionId: String?
    /** A sender-generated value that indicates the date and time that the signer was authenticated. */
    public var authenticationInstant: String?
    /** Required. Choose a value that most closely matches the technique your application used to authenticate the recipient / signer.   Choose a value from this list:  * Biometric  * Email * HTTPBasicAuth * Kerberos * KnowledgeBasedAuth * None * PaperDocuments * Password * RSASecureID * SingleSignOn_CASiteminder * SingleSignOn_InfoCard * SingleSignOn_MicrosoftActiveDirectory * SingleSignOn_Other * SingleSignOn_Passport * SingleSignOn_SAML * Smartcard * SSLMutualAuth * X509Certificate  This information is included in the Certificate of Completion. */
    public var authenticationMethod: String?
    /** Only used if `pingUrl` is specified. This is the interval, in seconds, between pings on the `pingUrl`.  The default is `300` seconds. Valid values are 60-1200 seconds. */
    public var pingFrequency: String?
    /** The client URL that the DocuSign Signing experience should ping to indicate to the client that Signing is active. An HTTP GET call is executed against the client. The response from the client is ignored. The intent is for the client to reset its session timer when the request is received. */
    public var pingUrl: String?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** The URL to which the sender should be redirected after viewing the preview. */
    public var returnUrl: String?
    /** The domain in which the user authenticated. */
    public var securityDomain: String?
    /** Specifies whether a browser should be allowed to render a page in a frame or IFrame. Setting this property ensures that your content is not embedded into unauthorized pages or frames.  Valid values are:  - `deny`: The page cannot be displayed in a frame. - `same_origin`: The page can only be displayed in a frame on the same origin as the page itself. - `allow_from`: The page can only be displayed in a frame on the origin specified by the `xFrameOptionsAllowFromUrl` property. */
    public var xFrameOptions: String?
    /** When the value of `xFrameOptions` is `allow_from`, this property specifies the origin on which the page is allowed to display in a frame. If the value of `xFrameOptions` is `allow_from`, you must include a value for this property. */
    public var xFrameOptionsAllowFromUrl: String?

    public init(assertionId: String? = nil, authenticationInstant: String? = nil, authenticationMethod: String? = nil, pingFrequency: String? = nil, pingUrl: String? = nil, recipientId: String? = nil, returnUrl: String? = nil, securityDomain: String? = nil, xFrameOptions: String? = nil, xFrameOptionsAllowFromUrl: String? = nil) {
        self.assertionId = assertionId
        self.authenticationInstant = authenticationInstant
        self.authenticationMethod = authenticationMethod
        self.pingFrequency = pingFrequency
        self.pingUrl = pingUrl
        self.recipientId = recipientId
        self.returnUrl = returnUrl
        self.securityDomain = securityDomain
        self.xFrameOptions = xFrameOptions
        self.xFrameOptionsAllowFromUrl = xFrameOptionsAllowFromUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case assertionId
        case authenticationInstant
        case authenticationMethod
        case pingFrequency
        case pingUrl
        case recipientId
        case returnUrl
        case securityDomain
        case xFrameOptions
        case xFrameOptionsAllowFromUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(assertionId, forKey: .assertionId)
        try container.encodeIfPresent(authenticationInstant, forKey: .authenticationInstant)
        try container.encodeIfPresent(authenticationMethod, forKey: .authenticationMethod)
        try container.encodeIfPresent(pingFrequency, forKey: .pingFrequency)
        try container.encodeIfPresent(pingUrl, forKey: .pingUrl)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(returnUrl, forKey: .returnUrl)
        try container.encodeIfPresent(securityDomain, forKey: .securityDomain)
        try container.encodeIfPresent(xFrameOptions, forKey: .xFrameOptions)
        try container.encodeIfPresent(xFrameOptionsAllowFromUrl, forKey: .xFrameOptionsAllowFromUrl)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        assertionId = try container.decodeIfPresent(String.self, forKey: .assertionId)
        authenticationInstant = try container.decodeIfPresent(String.self, forKey: .authenticationInstant)
        authenticationMethod = try container.decodeIfPresent(String.self, forKey: .authenticationMethod)
        pingFrequency = try container.decodeIfPresent(String.self, forKey: .pingFrequency)
        pingUrl = try container.decodeIfPresent(String.self, forKey: .pingUrl)
        recipientId = try container.decodeIfPresent(String.self, forKey: .recipientId)
        returnUrl = try container.decodeIfPresent(String.self, forKey: .returnUrl)
        securityDomain = try container.decodeIfPresent(String.self, forKey: .securityDomain)
        xFrameOptions = try container.decodeIfPresent(String.self, forKey: .xFrameOptions)
        xFrameOptionsAllowFromUrl = try container.decodeIfPresent(String.self, forKey: .xFrameOptionsAllowFromUrl)
    }
}

extension RecipientPreviewRequest: Hashable {
    public static func == (lhs: RecipientPreviewRequest, rhs: RecipientPreviewRequest) -> Bool {
        lhs.assertionId == rhs.assertionId &&
            lhs.authenticationInstant == rhs.authenticationInstant &&
            lhs.authenticationMethod == rhs.authenticationMethod &&
            lhs.pingFrequency == rhs.pingFrequency &&
            lhs.pingUrl == rhs.pingUrl &&
            lhs.recipientId == rhs.recipientId &&
            lhs.returnUrl == rhs.returnUrl &&
            lhs.securityDomain == rhs.securityDomain &&
            lhs.xFrameOptions == rhs.xFrameOptions &&
            lhs.xFrameOptionsAllowFromUrl == rhs.xFrameOptionsAllowFromUrl
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(assertionId?.hashValue)
        hasher.combine(authenticationInstant?.hashValue)
        hasher.combine(authenticationMethod?.hashValue)
        hasher.combine(pingFrequency?.hashValue)
        hasher.combine(pingUrl?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(returnUrl?.hashValue)
        hasher.combine(securityDomain?.hashValue)
        hasher.combine(xFrameOptions?.hashValue)
        hasher.combine(xFrameOptionsAllowFromUrl?.hashValue)
    }
}

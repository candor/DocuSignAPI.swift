//
// BillingPlanUpdateResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Defines a billing plan update response object. */
public final class BillingPlanUpdateResponse: Content {
    /** The type of payment method used for the account. Valid values are:  - `credit_card` -  */
    public var accountPaymentMethod: String?
    public var billingPlanPreview: BillingPlanPreview?
    /** Specifies the ISO currency code for the account. */
    public var currencyCode: String?
    /** The number of seats (users) included in the plan. */
    public var includedSeats: String?
    /** The payment cycle associated with the plan. The possible values are:   - `Monthly` - `Annually`  */
    public var paymentCycle: String?
    /** The payment method used for the billing plan. Valid values are:  - `NotSupported` - `CreditCard` - `PurchaseOrder` - `Premium` - `Freemium` - `FreeTrial` - `AppStore` - `DigitalExternal` - `DirectDebit` */
    public var paymentMethod: String?
    /** DocuSign's id for the account plan. */
    public var planId: String?
    /** The name of the billing plan used for the account.  Examples:   - `Personal - Annual` - `Unlimited Envelope Subscription - Annual Billing` */
    public var planName: String?

    public init(accountPaymentMethod: String? = nil, billingPlanPreview: BillingPlanPreview? = nil, currencyCode: String? = nil, includedSeats: String? = nil, paymentCycle: String? = nil, paymentMethod: String? = nil, planId: String? = nil, planName: String? = nil) {
        self.accountPaymentMethod = accountPaymentMethod
        self.billingPlanPreview = billingPlanPreview
        self.currencyCode = currencyCode
        self.includedSeats = includedSeats
        self.paymentCycle = paymentCycle
        self.paymentMethod = paymentMethod
        self.planId = planId
        self.planName = planName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountPaymentMethod
        case billingPlanPreview
        case currencyCode
        case includedSeats
        case paymentCycle
        case paymentMethod
        case planId
        case planName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountPaymentMethod, forKey: .accountPaymentMethod)
        try container.encodeIfPresent(billingPlanPreview, forKey: .billingPlanPreview)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(includedSeats, forKey: .includedSeats)
        try container.encodeIfPresent(paymentCycle, forKey: .paymentCycle)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(planId, forKey: .planId)
        try container.encodeIfPresent(planName, forKey: .planName)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountPaymentMethod = try container.decodeIfPresent(String.self, forKey: .accountPaymentMethod)
        billingPlanPreview = try container.decodeIfPresent(BillingPlanPreview.self, forKey: .billingPlanPreview)
        currencyCode = try container.decodeIfPresent(String.self, forKey: .currencyCode)
        includedSeats = try container.decodeIfPresent(String.self, forKey: .includedSeats)
        paymentCycle = try container.decodeIfPresent(String.self, forKey: .paymentCycle)
        paymentMethod = try container.decodeIfPresent(String.self, forKey: .paymentMethod)
        planId = try container.decodeIfPresent(String.self, forKey: .planId)
        planName = try container.decodeIfPresent(String.self, forKey: .planName)
    }
}

extension BillingPlanUpdateResponse: Hashable {
    public static func == (lhs: BillingPlanUpdateResponse, rhs: BillingPlanUpdateResponse) -> Bool {
        lhs.accountPaymentMethod == rhs.accountPaymentMethod &&
            lhs.billingPlanPreview == rhs.billingPlanPreview &&
            lhs.currencyCode == rhs.currencyCode &&
            lhs.includedSeats == rhs.includedSeats &&
            lhs.paymentCycle == rhs.paymentCycle &&
            lhs.paymentMethod == rhs.paymentMethod &&
            lhs.planId == rhs.planId &&
            lhs.planName == rhs.planName
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountPaymentMethod?.hashValue)
        hasher.combine(billingPlanPreview?.hashValue)
        hasher.combine(currencyCode?.hashValue)
        hasher.combine(includedSeats?.hashValue)
        hasher.combine(paymentCycle?.hashValue)
        hasher.combine(paymentMethod?.hashValue)
        hasher.combine(planId?.hashValue)
        hasher.combine(planName?.hashValue)
    }
}

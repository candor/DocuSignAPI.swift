//
// SigningGroups.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Signing groups */
public final class SigningGroups: Content {
    /** The UTC DateTime when the workspace user authorization was created. */
    public var created: String?
    /** The name of the user who created the signing group. */
    public var createdBy: String?
    public var errorDetails: ErrorDetails?
    /** The email address for the signing group. You can use a group email address to email all of the group members at the same time. */
    public var groupEmail: String?
    /** The name of the group. The search_text provided in the call automatically performs a wild card search on group_name. */
    public var groupName: String?
    /** The group type. Possible values include:  - `adminstrators` - `everyone` - `customGroup` - `sharedSigningGroup`  <!-- More? To do --> */
    public var groupType: String?
    /** The date and time that the signing group was last modified. */
    public var modified: String?
    /** The user id (GUID) of the user who last modified this user record. */
    public var modifiedBy: String?
    /** When set to **true** and the feature is enabled in the sender's account, the signing recipient is required to draw signatures and initials at each signature/initial tab ( instead of adopting a signature/initial style or only drawing a signature/initial once). */
    public var signingGroupId: String?
    /** User management information. */
    public var users: [SigningGroupUser]?

    public init(created: String? = nil, createdBy: String? = nil, errorDetails: ErrorDetails? = nil, groupEmail: String? = nil, groupName: String? = nil, groupType: String? = nil, modified: String? = nil, modifiedBy: String? = nil, signingGroupId: String? = nil, users: [SigningGroupUser]? = nil) {
        self.created = created
        self.createdBy = createdBy
        self.errorDetails = errorDetails
        self.groupEmail = groupEmail
        self.groupName = groupName
        self.groupType = groupType
        self.modified = modified
        self.modifiedBy = modifiedBy
        self.signingGroupId = signingGroupId
        self.users = users
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case created
        case createdBy
        case errorDetails
        case groupEmail
        case groupName
        case groupType
        case modified
        case modifiedBy
        case signingGroupId
        case users
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(created, forKey: .created)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(errorDetails, forKey: .errorDetails)
        try container.encodeIfPresent(groupEmail, forKey: .groupEmail)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(groupType, forKey: .groupType)
        try container.encodeIfPresent(modified, forKey: .modified)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encodeIfPresent(signingGroupId, forKey: .signingGroupId)
        try container.encodeIfPresent(users, forKey: .users)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        created = try container.decodeIfPresent(String.self, forKey: .created)
        createdBy = try container.decodeIfPresent(String.self, forKey: .createdBy)
        errorDetails = try container.decodeIfPresent(ErrorDetails.self, forKey: .errorDetails)
        groupEmail = try container.decodeIfPresent(String.self, forKey: .groupEmail)
        groupName = try container.decodeIfPresent(String.self, forKey: .groupName)
        groupType = try container.decodeIfPresent(String.self, forKey: .groupType)
        modified = try container.decodeIfPresent(String.self, forKey: .modified)
        modifiedBy = try container.decodeIfPresent(String.self, forKey: .modifiedBy)
        signingGroupId = try container.decodeIfPresent(String.self, forKey: .signingGroupId)
        users = try container.decodeIfPresent([SigningGroupUser].self, forKey: .users)
    }
}

extension SigningGroups: Hashable {
    public static func == (lhs: SigningGroups, rhs: SigningGroups) -> Bool {
        lhs.created == rhs.created &&
            lhs.createdBy == rhs.createdBy &&
            lhs.errorDetails == rhs.errorDetails &&
            lhs.groupEmail == rhs.groupEmail &&
            lhs.groupName == rhs.groupName &&
            lhs.groupType == rhs.groupType &&
            lhs.modified == rhs.modified &&
            lhs.modifiedBy == rhs.modifiedBy &&
            lhs.signingGroupId == rhs.signingGroupId &&
            lhs.users == rhs.users
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(created?.hashValue)
        hasher.combine(createdBy?.hashValue)
        hasher.combine(errorDetails?.hashValue)
        hasher.combine(groupEmail?.hashValue)
        hasher.combine(groupName?.hashValue)
        hasher.combine(groupType?.hashValue)
        hasher.combine(modified?.hashValue)
        hasher.combine(modifiedBy?.hashValue)
        hasher.combine(signingGroupId?.hashValue)
        hasher.combine(users?.hashValue)
    }
}

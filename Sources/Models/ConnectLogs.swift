//
// ConnectLogs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class ConnectLogs: Content {
    /** A list of Connect failure logs. */
    public var failures: [ConnectLog]?
    /** A list of Connect general logs. */
    public var logs: [ConnectLog]?
    /** The count of records in the log list. */
    public var totalRecords: String?
    /**  */
    public var type: String?

    public init(failures: [ConnectLog]? = nil, logs: [ConnectLog]? = nil, totalRecords: String? = nil, type: String? = nil) {
        self.failures = failures
        self.logs = logs
        self.totalRecords = totalRecords
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case failures
        case logs
        case totalRecords
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(failures, forKey: .failures)
        try container.encodeIfPresent(logs, forKey: .logs)
        try container.encodeIfPresent(totalRecords, forKey: .totalRecords)
        try container.encodeIfPresent(type, forKey: .type)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        failures = try container.decodeIfPresent([ConnectLog].self, forKey: .failures)
        logs = try container.decodeIfPresent([ConnectLog].self, forKey: .logs)
        totalRecords = try container.decodeIfPresent(String.self, forKey: .totalRecords)
        type = try container.decodeIfPresent(String.self, forKey: .type)
    }
}

extension ConnectLogs: Hashable {
    public static func == (lhs: ConnectLogs, rhs: ConnectLogs) -> Bool {
        lhs.failures == rhs.failures &&
            lhs.logs == rhs.logs &&
            lhs.totalRecords == rhs.totalRecords &&
            lhs.type == rhs.type
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(failures?.hashValue)
        hasher.combine(logs?.hashValue)
        hasher.combine(totalRecords?.hashValue)
        hasher.combine(type?.hashValue)
    }
}

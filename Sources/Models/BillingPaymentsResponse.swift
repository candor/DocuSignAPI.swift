//
// BillingPaymentsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Defines a billing payments response object. */
public final class BillingPaymentsResponse: Content {
    /** Reserved: TBD */
    public var billingPayments: [BillingPaymentItem]?
    /** The URI for the next chunk of records based on the search request. It is `null` if this is the last set of results for the search.  */
    public var nextUri: String?
    /** The URI for the prior chunk of records based on the search request. It is `null` if this is the first set of results for the search.  */
    public var previousUri: String?

    public init(billingPayments: [BillingPaymentItem]? = nil, nextUri: String? = nil, previousUri: String? = nil) {
        self.billingPayments = billingPayments
        self.nextUri = nextUri
        self.previousUri = previousUri
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case billingPayments
        case nextUri
        case previousUri
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(billingPayments, forKey: .billingPayments)
        try container.encodeIfPresent(nextUri, forKey: .nextUri)
        try container.encodeIfPresent(previousUri, forKey: .previousUri)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        billingPayments = try container.decodeIfPresent([BillingPaymentItem].self, forKey: .billingPayments)
        nextUri = try container.decodeIfPresent(String.self, forKey: .nextUri)
        previousUri = try container.decodeIfPresent(String.self, forKey: .previousUri)
    }
}

extension BillingPaymentsResponse: Hashable {
    public static func == (lhs: BillingPaymentsResponse, rhs: BillingPaymentsResponse) -> Bool {
        lhs.billingPayments == rhs.billingPayments &&
            lhs.nextUri == rhs.nextUri &&
            lhs.previousUri == rhs.previousUri
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(billingPayments?.hashValue)
        hasher.combine(nextUri?.hashValue)
        hasher.combine(previousUri?.hashValue)
    }
}

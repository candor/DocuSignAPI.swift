//
// EnvelopeDocuments.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Envelope documents */
public final class EnvelopeDocuments: Content {
    /** An array of document objects. */
    public var envelopeDocuments: [EnvelopeDocument]?
    /** The envelope ID of the envelope status that failed to post. */
    public var envelopeId: String?

    public init(envelopeDocuments: [EnvelopeDocument]? = nil, envelopeId: String? = nil) {
        self.envelopeDocuments = envelopeDocuments
        self.envelopeId = envelopeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case envelopeDocuments
        case envelopeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(envelopeDocuments, forKey: .envelopeDocuments)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        envelopeDocuments = try container.decodeIfPresent([EnvelopeDocument].self, forKey: .envelopeDocuments)
        envelopeId = try container.decodeIfPresent(String.self, forKey: .envelopeId)
    }
}

extension EnvelopeDocuments: Hashable {
    public static func == (lhs: EnvelopeDocuments, rhs: EnvelopeDocuments) -> Bool {
        lhs.envelopeDocuments == rhs.envelopeDocuments &&
            lhs.envelopeId == rhs.envelopeId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(envelopeDocuments?.hashValue)
        hasher.combine(envelopeId?.hashValue)
    }
}

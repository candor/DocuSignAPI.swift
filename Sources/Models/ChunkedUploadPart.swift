//
// ChunkedUploadPart.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** An object that contains information about the chunked upload part. */
public final class ChunkedUploadPart: Content {
    /** The order of the part in the chunked upload. */
    public var sequence: String?
    /** The size of the part in bytes.   We recommend that a chunked upload part is no larger than a few MB in size. */
    public var size: String?

    public init(sequence: String? = nil, size: String? = nil) {
        self.sequence = sequence
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sequence
        case size
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(sequence, forKey: .sequence)
        try container.encodeIfPresent(size, forKey: .size)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        sequence = try container.decodeIfPresent(String.self, forKey: .sequence)
        size = try container.decodeIfPresent(String.self, forKey: .size)
    }
}

extension ChunkedUploadPart: Hashable {
    public static func == (lhs: ChunkedUploadPart, rhs: ChunkedUploadPart) -> Bool {
        lhs.sequence == rhs.sequence &&
            lhs.size == rhs.size
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sequence?.hashValue)
        hasher.combine(size?.hashValue)
    }
}

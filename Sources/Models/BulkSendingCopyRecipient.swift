//
// BulkSendingCopyRecipient.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object contains details about a bulk send recipient. */
public final class BulkSendingCopyRecipient: Content {
    /** If a value is provided, the recipient must enter the value as the access code to view and sign the envelope.   Maximum Length: 50 characters and it must conform to the account's access code format setting.  If blank, but the signer `accessCode` property is set in the envelope, then that value is used.  If blank and the signer `accessCode` property is not set, then the access code is not required. */
    public var accessCode: String?
    /** Specifies whether the recipient is embedded or remote.   If the `clientUserId` property is not null then the recipient is embedded. Use this field to associate the signer with their userId in your app. Authenticating the user is the responsibility of your app when you use embedded signing.  Note: if the `clientUserId` property is set and either `SignerMustHaveAccount` or `SignerMustLoginToSign` property of the account settings is set to  **true**, an error is generated on sending.   Maximum length: 100 characters.  */
    public var clientUserId: String?
    /** An optional array of strings that enables the sender to provide custom data about the recipient. This information is returned in the envelope status but otherwise not used by DocuSign. Each `customField` string can be a maximum of 100 characters. */
    public var customFields: [String]?
    /** Reserved for DocuSign. */
    public var deliveryMethod: String?
    /** The recipient's email address. */
    public var email: String?
    public var emailNotification: RecipientEmailNotification?
    /** Specifies a sender-provided valid URL string for redirecting an embedded recipient. When using this option, the embedded recipient still receives an email from DocuSign, just as a remote recipient would. When the document link in the email is clicked the recipient is redirected, through DocuSign, to the supplied URL to complete their actions. When routing to the URL, the sender's system (the server responding to the URL) must request a recipient token to launch a signing session.   If set to `SIGN_AT_DOCUSIGN`, the recipient is directed to an embedded signing or viewing process directly at DocuSign. The signing or viewing action is initiated by the DocuSign system and the transaction activity and Certificate of Completion records will reflect this. In all other ways the process is identical to an embedded signing or viewing operation launched by a partner.  It is important to understand that in a typical embedded workflow, the authentication of an embedded recipient is the responsibility of the sending application. DocuSign expects that senders will follow their own processes for establishing the recipient's identity. In this workflow the recipient goes through the sending application before the embedded signing or viewing process is initiated. However, when the sending application sets `EmbeddedRecipientStartURL=SIGN_AT_DOCUSIGN`, the recipient goes directly to the embedded signing or viewing process, bypassing the sending application and any authentication steps the sending application would use. In this case, DocuSign recommends that you use one of the normal DocuSign authentication features (Access Code, Phone Authentication, SMS Authentication, etc.) to verify the identity of the recipient.  If the `clientUserId` property is NOT set, and the `embeddedRecipientStartURL` is set, DocuSign will ignore the redirect URL and launch the standard signing process for the email recipient. Information can be appended to the embedded recipient start URL using merge fields. The available merge fields items are: `envelopeId`, `recipientId`, `recipientName`, `recipientEmail`, and `customFields`. The `customFields` property must be set for the recipient or envelope. The merge fields are enclosed in double brackets.   *Example*:   `http://senderHost/[[mergeField1]]/ beginSigningSession? [[mergeField2]]&[[mergeField3]]`  */
    public var embeddedRecipientStartURL: String?
    /** Reserved for DocuSign. */
    public var faxNumber: String?
    /** The name of the authentication check to use. This value must match one of the authentication types that the account uses. The names of these authentication types appear in the web console sending interface in the Identify list for a recipient. This setting overrides any default authentication setting. Valid values are:  - `Phone Auth $`: The recipient must authenticate by using two-factor authentication (2FA). You provide the phone number to use for 2FA in the `phoneAuthentication` object. - `SMS Auth $`: The recipient must authenticate via SMS. You provide the phone number to use in the `smsAuthentication` object. - `ID Check $`: The  recipient must answer detailed security questions.   **Example**: Your account has ID Check and SMS Authentication available. In the web console Identify list, these appear as ID Check $ and SMS Auth $. To use ID Check in an envelope, the idCheckConfigurationName should be ID Check $. For SMS, you would use SMS Auth $, and you would also need to add a phone number to the smsAuthentication node. */
    public var idCheckConfigurationName: String?
    public var idCheckInformationInput: IdCheckInformationInput?
    /**  */
    public var identificationMethod: String?
    /**  */
    public var name: String?
    /** A note sent to the recipient in the signing email. This note is unique to this recipient. In the user interface, it appears near the upper left corner of the document on the signing screen.  Maximum Length: 1000 characters.  */
    public var note: String?
    public var phoneAuthentication: RecipientPhoneAuthentication?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /** The default signature provider is the DocuSign Electronic signature system. This parameter is used to specify one or more Standards Based Signature (digital signature) providers for the signer to use. [More information.](https://developers.docusign.com/esign-rest-api/guides/standards-based-signatures) */
    public var recipientSignatureProviders: [RecipientSignatureProvider]?
    /** The name of the role associated with the recipient. This property is optional and is only used in place of a `recipientId`. */
    public var roleName: String?
    public var smsAuthentication: RecipientSMSAuthentication?
    /** Deprecated. */
    public var socialAuthentications: [SocialAuthentication]?
    /** A list of tabs associated with the recipient. In a bulk send request, each of these recipient tabs must match a recipient tab on the envelope or template that you want to send. To match up, the `tabLabel` for this tab and the `tabLabel` for the corresponding tab on the envelope or template must be the same.  For example, if the envelope has a placeholder text tab with the `tabLabel` `childName`, you must assign the same `tabLabel` `childName` to the tab here that you are populating with that information.   You can use the following types of tabs to match bulk send recipients to an envelope:  - Text tabs - Radio group tabs (where the name of the `radioGroup` on the envelope is used as the `tabLabel` in the bulk send list) - List tabs */
    public var tabs: [BulkSendingCopyTab]?

    public init(accessCode: String? = nil, clientUserId: String? = nil, customFields: [String]? = nil, deliveryMethod: String? = nil, email: String? = nil, emailNotification: RecipientEmailNotification? = nil, embeddedRecipientStartURL: String? = nil, faxNumber: String? = nil, idCheckConfigurationName: String? = nil, idCheckInformationInput: IdCheckInformationInput? = nil, identificationMethod: String? = nil, name: String? = nil, note: String? = nil, phoneAuthentication: RecipientPhoneAuthentication? = nil, recipientId: String? = nil, recipientSignatureProviders: [RecipientSignatureProvider]? = nil, roleName: String? = nil, smsAuthentication: RecipientSMSAuthentication? = nil, socialAuthentications: [SocialAuthentication]? = nil, tabs: [BulkSendingCopyTab]? = nil) {
        self.accessCode = accessCode
        self.clientUserId = clientUserId
        self.customFields = customFields
        self.deliveryMethod = deliveryMethod
        self.email = email
        self.emailNotification = emailNotification
        self.embeddedRecipientStartURL = embeddedRecipientStartURL
        self.faxNumber = faxNumber
        self.idCheckConfigurationName = idCheckConfigurationName
        self.idCheckInformationInput = idCheckInformationInput
        self.identificationMethod = identificationMethod
        self.name = name
        self.note = note
        self.phoneAuthentication = phoneAuthentication
        self.recipientId = recipientId
        self.recipientSignatureProviders = recipientSignatureProviders
        self.roleName = roleName
        self.smsAuthentication = smsAuthentication
        self.socialAuthentications = socialAuthentications
        self.tabs = tabs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCode
        case clientUserId
        case customFields
        case deliveryMethod
        case email
        case emailNotification
        case embeddedRecipientStartURL
        case faxNumber
        case idCheckConfigurationName
        case idCheckInformationInput
        case identificationMethod
        case name
        case note
        case phoneAuthentication
        case recipientId
        case recipientSignatureProviders
        case roleName
        case smsAuthentication
        case socialAuthentications
        case tabs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accessCode, forKey: .accessCode)
        try container.encodeIfPresent(clientUserId, forKey: .clientUserId)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(deliveryMethod, forKey: .deliveryMethod)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailNotification, forKey: .emailNotification)
        try container.encodeIfPresent(embeddedRecipientStartURL, forKey: .embeddedRecipientStartURL)
        try container.encodeIfPresent(faxNumber, forKey: .faxNumber)
        try container.encodeIfPresent(idCheckConfigurationName, forKey: .idCheckConfigurationName)
        try container.encodeIfPresent(idCheckInformationInput, forKey: .idCheckInformationInput)
        try container.encodeIfPresent(identificationMethod, forKey: .identificationMethod)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(phoneAuthentication, forKey: .phoneAuthentication)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientSignatureProviders, forKey: .recipientSignatureProviders)
        try container.encodeIfPresent(roleName, forKey: .roleName)
        try container.encodeIfPresent(smsAuthentication, forKey: .smsAuthentication)
        try container.encodeIfPresent(socialAuthentications, forKey: .socialAuthentications)
        try container.encodeIfPresent(tabs, forKey: .tabs)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accessCode = try container.decodeIfPresent(String.self, forKey: .accessCode)
        clientUserId = try container.decodeIfPresent(String.self, forKey: .clientUserId)
        customFields = try container.decodeIfPresent([String].self, forKey: .customFields)
        deliveryMethod = try container.decodeIfPresent(String.self, forKey: .deliveryMethod)
        email = try container.decodeIfPresent(String.self, forKey: .email)
        emailNotification = try container.decodeIfPresent(RecipientEmailNotification.self, forKey: .emailNotification)
        embeddedRecipientStartURL = try container.decodeIfPresent(String.self, forKey: .embeddedRecipientStartURL)
        faxNumber = try container.decodeIfPresent(String.self, forKey: .faxNumber)
        idCheckConfigurationName = try container.decodeIfPresent(String.self, forKey: .idCheckConfigurationName)
        idCheckInformationInput = try container.decodeIfPresent(IdCheckInformationInput.self, forKey: .idCheckInformationInput)
        identificationMethod = try container.decodeIfPresent(String.self, forKey: .identificationMethod)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        note = try container.decodeIfPresent(String.self, forKey: .note)
        phoneAuthentication = try container.decodeIfPresent(RecipientPhoneAuthentication.self, forKey: .phoneAuthentication)
        recipientId = try container.decodeIfPresent(String.self, forKey: .recipientId)
        recipientSignatureProviders = try container.decodeIfPresent([RecipientSignatureProvider].self, forKey: .recipientSignatureProviders)
        roleName = try container.decodeIfPresent(String.self, forKey: .roleName)
        smsAuthentication = try container.decodeIfPresent(RecipientSMSAuthentication.self, forKey: .smsAuthentication)
        socialAuthentications = try container.decodeIfPresent([SocialAuthentication].self, forKey: .socialAuthentications)
        tabs = try container.decodeIfPresent([BulkSendingCopyTab].self, forKey: .tabs)
    }
}

extension BulkSendingCopyRecipient: Hashable {
    public static func == (lhs: BulkSendingCopyRecipient, rhs: BulkSendingCopyRecipient) -> Bool {
        lhs.accessCode == rhs.accessCode &&
            lhs.clientUserId == rhs.clientUserId &&
            lhs.customFields == rhs.customFields &&
            lhs.deliveryMethod == rhs.deliveryMethod &&
            lhs.email == rhs.email &&
            lhs.emailNotification == rhs.emailNotification &&
            lhs.embeddedRecipientStartURL == rhs.embeddedRecipientStartURL &&
            lhs.faxNumber == rhs.faxNumber &&
            lhs.idCheckConfigurationName == rhs.idCheckConfigurationName &&
            lhs.idCheckInformationInput == rhs.idCheckInformationInput &&
            lhs.identificationMethod == rhs.identificationMethod &&
            lhs.name == rhs.name &&
            lhs.note == rhs.note &&
            lhs.phoneAuthentication == rhs.phoneAuthentication &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientSignatureProviders == rhs.recipientSignatureProviders &&
            lhs.roleName == rhs.roleName &&
            lhs.smsAuthentication == rhs.smsAuthentication &&
            lhs.socialAuthentications == rhs.socialAuthentications &&
            lhs.tabs == rhs.tabs
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCode?.hashValue)
        hasher.combine(clientUserId?.hashValue)
        hasher.combine(customFields?.hashValue)
        hasher.combine(deliveryMethod?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(emailNotification?.hashValue)
        hasher.combine(embeddedRecipientStartURL?.hashValue)
        hasher.combine(faxNumber?.hashValue)
        hasher.combine(idCheckConfigurationName?.hashValue)
        hasher.combine(idCheckInformationInput?.hashValue)
        hasher.combine(identificationMethod?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(note?.hashValue)
        hasher.combine(phoneAuthentication?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientSignatureProviders?.hashValue)
        hasher.combine(roleName?.hashValue)
        hasher.combine(smsAuthentication?.hashValue)
        hasher.combine(socialAuthentications?.hashValue)
        hasher.combine(tabs?.hashValue)
    }
}

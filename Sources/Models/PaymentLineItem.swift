//
// PaymentLineItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** A line item describes details about an individual line item in a payment request.   */
public final class PaymentLineItem: Content {
    /** This is a the `tabLabel` that specifies the amount paid for the line items.   */
    public var amountReference: String?
    /** A sender-defined description of the line item.  */
    public var description: String?
    /** This is the sender-defined SKU, inventory number, or other item code for the line item.  */
    public var itemCode: String?
    /** This is a sender-defined product name, service name, or other designation for the line item.  */
    public var name: String?

    public init(amountReference: String? = nil, description: String? = nil, itemCode: String? = nil, name: String? = nil) {
        self.amountReference = amountReference
        self.description = description
        self.itemCode = itemCode
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountReference
        case description
        case itemCode
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(amountReference, forKey: .amountReference)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(itemCode, forKey: .itemCode)
        try container.encodeIfPresent(name, forKey: .name)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amountReference = try container.decodeIfPresent(String.self, forKey: .amountReference)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        itemCode = try container.decodeIfPresent(String.self, forKey: .itemCode)
        name = try container.decodeIfPresent(String.self, forKey: .name)
    }
}

extension PaymentLineItem: Hashable {
    public static func == (lhs: PaymentLineItem, rhs: PaymentLineItem) -> Bool {
        lhs.amountReference == rhs.amountReference &&
            lhs.description == rhs.description &&
            lhs.itemCode == rhs.itemCode &&
            lhs.name == rhs.name
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(amountReference?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(itemCode?.hashValue)
        hasher.combine(name?.hashValue)
    }
}

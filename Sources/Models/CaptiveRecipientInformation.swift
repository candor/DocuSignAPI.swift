//
// CaptiveRecipientInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about captive (embedded) recipients. */
public final class CaptiveRecipientInformation: Content {
    /** A complex type containing information about one or more captive recipients. */
    public var captiveRecipients: [CaptiveRecipient]?

    public init(captiveRecipients: [CaptiveRecipient]? = nil) {
        self.captiveRecipients = captiveRecipients
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case captiveRecipients
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(captiveRecipients, forKey: .captiveRecipients)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        captiveRecipients = try container.decodeIfPresent([CaptiveRecipient].self, forKey: .captiveRecipients)
    }
}

extension CaptiveRecipientInformation: Hashable {
    public static func == (lhs: CaptiveRecipientInformation, rhs: CaptiveRecipientInformation) -> Bool {
        lhs.captiveRecipients == rhs.captiveRecipients
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(captiveRecipients?.hashValue)
    }
}

//
// AccountUISettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** An object that defines the options that are available to non-administrators in the UI. */
public final class AccountUISettings: Content {
    public var adminMessage: AdminMessage?
    public var askAnAdmin: AskAnAdmin?
    /**  */
    public var enableAdminMessage: String?
    public var enableAdminMessageMetadata: SettingsMetadata?
    /**  */
    public var enableEasySignCanUseMultiTemplateApply: String?
    public var enableEasySignCanUseMultiTemplateApplyMetadata: SettingsMetadata?
    /**  */
    public var enableEasySignTemplateUpload: String?
    public var enableEasySignTemplateUploadMetadata: SettingsMetadata?
    /**  */
    public var enableEnvelopeCopyWithData: String?
    public var enableEnvelopeCopyWithDataMetadata: SettingsMetadata?
    /**  */
    public var hideSendAnEnvelope: String?
    public var hideSendAnEnvelopeMetadata: SettingsMetadata?
    /** When set to **true**, the **Templates** menu is hidden from account users who are not Admins. The default value is **false**. */
    public var hideUseATemplate: String?
    /**  */
    public var hideUseATemplateInPrepare: String?
    public var hideUseATemplateInPrepareMetadata: SettingsMetadata?
    public var hideUseATemplateMetadata: SettingsMetadata?
    /**  */
    public var orderBasedRecipientIdGeneration: String?
    public var orderBasedRecipientIdGenerationMetadata: SettingsMetadata?
    /**  */
    public var removeEnvelopeForwarding: String?
    public var removeEnvelopeForwardingMetadata: SettingsMetadata?
    /**  */
    public var shouldRedactAccessCode: String?
    public var shouldRedactAccessCodeMetadata: SettingsMetadata?
    /**  */
    public var uploadNewImageToSignOrInitial: String?
    public var uploadNewImageToSignOrInitialMetadata: SettingsMetadata?

    public init(adminMessage: AdminMessage? = nil, askAnAdmin: AskAnAdmin? = nil, enableAdminMessage: String? = nil, enableAdminMessageMetadata: SettingsMetadata? = nil, enableEasySignCanUseMultiTemplateApply: String? = nil, enableEasySignCanUseMultiTemplateApplyMetadata: SettingsMetadata? = nil, enableEasySignTemplateUpload: String? = nil, enableEasySignTemplateUploadMetadata: SettingsMetadata? = nil, enableEnvelopeCopyWithData: String? = nil, enableEnvelopeCopyWithDataMetadata: SettingsMetadata? = nil, hideSendAnEnvelope: String? = nil, hideSendAnEnvelopeMetadata: SettingsMetadata? = nil, hideUseATemplate: String? = nil, hideUseATemplateInPrepare: String? = nil, hideUseATemplateInPrepareMetadata: SettingsMetadata? = nil, hideUseATemplateMetadata: SettingsMetadata? = nil, orderBasedRecipientIdGeneration: String? = nil, orderBasedRecipientIdGenerationMetadata: SettingsMetadata? = nil, removeEnvelopeForwarding: String? = nil, removeEnvelopeForwardingMetadata: SettingsMetadata? = nil, shouldRedactAccessCode: String? = nil, shouldRedactAccessCodeMetadata: SettingsMetadata? = nil, uploadNewImageToSignOrInitial: String? = nil, uploadNewImageToSignOrInitialMetadata: SettingsMetadata? = nil) {
        self.adminMessage = adminMessage
        self.askAnAdmin = askAnAdmin
        self.enableAdminMessage = enableAdminMessage
        self.enableAdminMessageMetadata = enableAdminMessageMetadata
        self.enableEasySignCanUseMultiTemplateApply = enableEasySignCanUseMultiTemplateApply
        self.enableEasySignCanUseMultiTemplateApplyMetadata = enableEasySignCanUseMultiTemplateApplyMetadata
        self.enableEasySignTemplateUpload = enableEasySignTemplateUpload
        self.enableEasySignTemplateUploadMetadata = enableEasySignTemplateUploadMetadata
        self.enableEnvelopeCopyWithData = enableEnvelopeCopyWithData
        self.enableEnvelopeCopyWithDataMetadata = enableEnvelopeCopyWithDataMetadata
        self.hideSendAnEnvelope = hideSendAnEnvelope
        self.hideSendAnEnvelopeMetadata = hideSendAnEnvelopeMetadata
        self.hideUseATemplate = hideUseATemplate
        self.hideUseATemplateInPrepare = hideUseATemplateInPrepare
        self.hideUseATemplateInPrepareMetadata = hideUseATemplateInPrepareMetadata
        self.hideUseATemplateMetadata = hideUseATemplateMetadata
        self.orderBasedRecipientIdGeneration = orderBasedRecipientIdGeneration
        self.orderBasedRecipientIdGenerationMetadata = orderBasedRecipientIdGenerationMetadata
        self.removeEnvelopeForwarding = removeEnvelopeForwarding
        self.removeEnvelopeForwardingMetadata = removeEnvelopeForwardingMetadata
        self.shouldRedactAccessCode = shouldRedactAccessCode
        self.shouldRedactAccessCodeMetadata = shouldRedactAccessCodeMetadata
        self.uploadNewImageToSignOrInitial = uploadNewImageToSignOrInitial
        self.uploadNewImageToSignOrInitialMetadata = uploadNewImageToSignOrInitialMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case adminMessage
        case askAnAdmin
        case enableAdminMessage
        case enableAdminMessageMetadata
        case enableEasySignCanUseMultiTemplateApply
        case enableEasySignCanUseMultiTemplateApplyMetadata
        case enableEasySignTemplateUpload
        case enableEasySignTemplateUploadMetadata
        case enableEnvelopeCopyWithData
        case enableEnvelopeCopyWithDataMetadata
        case hideSendAnEnvelope
        case hideSendAnEnvelopeMetadata
        case hideUseATemplate
        case hideUseATemplateInPrepare
        case hideUseATemplateInPrepareMetadata
        case hideUseATemplateMetadata
        case orderBasedRecipientIdGeneration
        case orderBasedRecipientIdGenerationMetadata
        case removeEnvelopeForwarding
        case removeEnvelopeForwardingMetadata
        case shouldRedactAccessCode
        case shouldRedactAccessCodeMetadata
        case uploadNewImageToSignOrInitial
        case uploadNewImageToSignOrInitialMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(adminMessage, forKey: .adminMessage)
        try container.encodeIfPresent(askAnAdmin, forKey: .askAnAdmin)
        try container.encodeIfPresent(enableAdminMessage, forKey: .enableAdminMessage)
        try container.encodeIfPresent(enableAdminMessageMetadata, forKey: .enableAdminMessageMetadata)
        try container.encodeIfPresent(enableEasySignCanUseMultiTemplateApply, forKey: .enableEasySignCanUseMultiTemplateApply)
        try container.encodeIfPresent(enableEasySignCanUseMultiTemplateApplyMetadata, forKey: .enableEasySignCanUseMultiTemplateApplyMetadata)
        try container.encodeIfPresent(enableEasySignTemplateUpload, forKey: .enableEasySignTemplateUpload)
        try container.encodeIfPresent(enableEasySignTemplateUploadMetadata, forKey: .enableEasySignTemplateUploadMetadata)
        try container.encodeIfPresent(enableEnvelopeCopyWithData, forKey: .enableEnvelopeCopyWithData)
        try container.encodeIfPresent(enableEnvelopeCopyWithDataMetadata, forKey: .enableEnvelopeCopyWithDataMetadata)
        try container.encodeIfPresent(hideSendAnEnvelope, forKey: .hideSendAnEnvelope)
        try container.encodeIfPresent(hideSendAnEnvelopeMetadata, forKey: .hideSendAnEnvelopeMetadata)
        try container.encodeIfPresent(hideUseATemplate, forKey: .hideUseATemplate)
        try container.encodeIfPresent(hideUseATemplateInPrepare, forKey: .hideUseATemplateInPrepare)
        try container.encodeIfPresent(hideUseATemplateInPrepareMetadata, forKey: .hideUseATemplateInPrepareMetadata)
        try container.encodeIfPresent(hideUseATemplateMetadata, forKey: .hideUseATemplateMetadata)
        try container.encodeIfPresent(orderBasedRecipientIdGeneration, forKey: .orderBasedRecipientIdGeneration)
        try container.encodeIfPresent(orderBasedRecipientIdGenerationMetadata, forKey: .orderBasedRecipientIdGenerationMetadata)
        try container.encodeIfPresent(removeEnvelopeForwarding, forKey: .removeEnvelopeForwarding)
        try container.encodeIfPresent(removeEnvelopeForwardingMetadata, forKey: .removeEnvelopeForwardingMetadata)
        try container.encodeIfPresent(shouldRedactAccessCode, forKey: .shouldRedactAccessCode)
        try container.encodeIfPresent(shouldRedactAccessCodeMetadata, forKey: .shouldRedactAccessCodeMetadata)
        try container.encodeIfPresent(uploadNewImageToSignOrInitial, forKey: .uploadNewImageToSignOrInitial)
        try container.encodeIfPresent(uploadNewImageToSignOrInitialMetadata, forKey: .uploadNewImageToSignOrInitialMetadata)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        adminMessage = try container.decodeIfPresent(AdminMessage.self, forKey: .adminMessage)
        askAnAdmin = try container.decodeIfPresent(AskAnAdmin.self, forKey: .askAnAdmin)
        enableAdminMessage = try container.decodeIfPresent(String.self, forKey: .enableAdminMessage)
        enableAdminMessageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableAdminMessageMetadata)
        enableEasySignCanUseMultiTemplateApply = try container.decodeIfPresent(String.self, forKey: .enableEasySignCanUseMultiTemplateApply)
        enableEasySignCanUseMultiTemplateApplyMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableEasySignCanUseMultiTemplateApplyMetadata)
        enableEasySignTemplateUpload = try container.decodeIfPresent(String.self, forKey: .enableEasySignTemplateUpload)
        enableEasySignTemplateUploadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableEasySignTemplateUploadMetadata)
        enableEnvelopeCopyWithData = try container.decodeIfPresent(String.self, forKey: .enableEnvelopeCopyWithData)
        enableEnvelopeCopyWithDataMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableEnvelopeCopyWithDataMetadata)
        hideSendAnEnvelope = try container.decodeIfPresent(String.self, forKey: .hideSendAnEnvelope)
        hideSendAnEnvelopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .hideSendAnEnvelopeMetadata)
        hideUseATemplate = try container.decodeIfPresent(String.self, forKey: .hideUseATemplate)
        hideUseATemplateInPrepare = try container.decodeIfPresent(String.self, forKey: .hideUseATemplateInPrepare)
        hideUseATemplateInPrepareMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .hideUseATemplateInPrepareMetadata)
        hideUseATemplateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .hideUseATemplateMetadata)
        orderBasedRecipientIdGeneration = try container.decodeIfPresent(String.self, forKey: .orderBasedRecipientIdGeneration)
        orderBasedRecipientIdGenerationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .orderBasedRecipientIdGenerationMetadata)
        removeEnvelopeForwarding = try container.decodeIfPresent(String.self, forKey: .removeEnvelopeForwarding)
        removeEnvelopeForwardingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .removeEnvelopeForwardingMetadata)
        shouldRedactAccessCode = try container.decodeIfPresent(String.self, forKey: .shouldRedactAccessCode)
        shouldRedactAccessCodeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .shouldRedactAccessCodeMetadata)
        uploadNewImageToSignOrInitial = try container.decodeIfPresent(String.self, forKey: .uploadNewImageToSignOrInitial)
        uploadNewImageToSignOrInitialMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .uploadNewImageToSignOrInitialMetadata)
    }
}

extension AccountUISettings: Hashable {
    public static func == (lhs: AccountUISettings, rhs: AccountUISettings) -> Bool {
        lhs.adminMessage == rhs.adminMessage &&
            lhs.askAnAdmin == rhs.askAnAdmin &&
            lhs.enableAdminMessage == rhs.enableAdminMessage &&
            lhs.enableAdminMessageMetadata == rhs.enableAdminMessageMetadata &&
            lhs.enableEasySignCanUseMultiTemplateApply == rhs.enableEasySignCanUseMultiTemplateApply &&
            lhs.enableEasySignCanUseMultiTemplateApplyMetadata == rhs.enableEasySignCanUseMultiTemplateApplyMetadata &&
            lhs.enableEasySignTemplateUpload == rhs.enableEasySignTemplateUpload &&
            lhs.enableEasySignTemplateUploadMetadata == rhs.enableEasySignTemplateUploadMetadata &&
            lhs.enableEnvelopeCopyWithData == rhs.enableEnvelopeCopyWithData &&
            lhs.enableEnvelopeCopyWithDataMetadata == rhs.enableEnvelopeCopyWithDataMetadata &&
            lhs.hideSendAnEnvelope == rhs.hideSendAnEnvelope &&
            lhs.hideSendAnEnvelopeMetadata == rhs.hideSendAnEnvelopeMetadata &&
            lhs.hideUseATemplate == rhs.hideUseATemplate &&
            lhs.hideUseATemplateInPrepare == rhs.hideUseATemplateInPrepare &&
            lhs.hideUseATemplateInPrepareMetadata == rhs.hideUseATemplateInPrepareMetadata &&
            lhs.hideUseATemplateMetadata == rhs.hideUseATemplateMetadata &&
            lhs.orderBasedRecipientIdGeneration == rhs.orderBasedRecipientIdGeneration &&
            lhs.orderBasedRecipientIdGenerationMetadata == rhs.orderBasedRecipientIdGenerationMetadata &&
            lhs.removeEnvelopeForwarding == rhs.removeEnvelopeForwarding &&
            lhs.removeEnvelopeForwardingMetadata == rhs.removeEnvelopeForwardingMetadata &&
            lhs.shouldRedactAccessCode == rhs.shouldRedactAccessCode &&
            lhs.shouldRedactAccessCodeMetadata == rhs.shouldRedactAccessCodeMetadata &&
            lhs.uploadNewImageToSignOrInitial == rhs.uploadNewImageToSignOrInitial &&
            lhs.uploadNewImageToSignOrInitialMetadata == rhs.uploadNewImageToSignOrInitialMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(adminMessage?.hashValue)
        hasher.combine(askAnAdmin?.hashValue)
        hasher.combine(enableAdminMessage?.hashValue)
        hasher.combine(enableAdminMessageMetadata?.hashValue)
        hasher.combine(enableEasySignCanUseMultiTemplateApply?.hashValue)
        hasher.combine(enableEasySignCanUseMultiTemplateApplyMetadata?.hashValue)
        hasher.combine(enableEasySignTemplateUpload?.hashValue)
        hasher.combine(enableEasySignTemplateUploadMetadata?.hashValue)
        hasher.combine(enableEnvelopeCopyWithData?.hashValue)
        hasher.combine(enableEnvelopeCopyWithDataMetadata?.hashValue)
        hasher.combine(hideSendAnEnvelope?.hashValue)
        hasher.combine(hideSendAnEnvelopeMetadata?.hashValue)
        hasher.combine(hideUseATemplate?.hashValue)
        hasher.combine(hideUseATemplateInPrepare?.hashValue)
        hasher.combine(hideUseATemplateInPrepareMetadata?.hashValue)
        hasher.combine(hideUseATemplateMetadata?.hashValue)
        hasher.combine(orderBasedRecipientIdGeneration?.hashValue)
        hasher.combine(orderBasedRecipientIdGenerationMetadata?.hashValue)
        hasher.combine(removeEnvelopeForwarding?.hashValue)
        hasher.combine(removeEnvelopeForwardingMetadata?.hashValue)
        hasher.combine(shouldRedactAccessCode?.hashValue)
        hasher.combine(shouldRedactAccessCodeMetadata?.hashValue)
        hasher.combine(uploadNewImageToSignOrInitial?.hashValue)
        hasher.combine(uploadNewImageToSignOrInitialMetadata?.hashValue)
    }
}

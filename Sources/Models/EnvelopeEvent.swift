//
// EnvelopeEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** For which envelope events should your webhook be called? */
public final class EnvelopeEvent: Content {
    /** An envelope status for which your webhook should be called. Values: Draft, Sent, Delivered, Completed, Declined, or Voided. */
    public var envelopeEventStatusCode: String?
    /** reserved */
    public var includeDocuments: String?

    public init(envelopeEventStatusCode: String? = nil, includeDocuments: String? = nil) {
        self.envelopeEventStatusCode = envelopeEventStatusCode
        self.includeDocuments = includeDocuments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case envelopeEventStatusCode
        case includeDocuments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(envelopeEventStatusCode, forKey: .envelopeEventStatusCode)
        try container.encodeIfPresent(includeDocuments, forKey: .includeDocuments)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        envelopeEventStatusCode = try container.decodeIfPresent(String.self, forKey: .envelopeEventStatusCode)
        includeDocuments = try container.decodeIfPresent(String.self, forKey: .includeDocuments)
    }
}

extension EnvelopeEvent: Hashable {
    public static func == (lhs: EnvelopeEvent, rhs: EnvelopeEvent) -> Bool {
        lhs.envelopeEventStatusCode == rhs.envelopeEventStatusCode &&
            lhs.includeDocuments == rhs.includeDocuments
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(envelopeEventStatusCode?.hashValue)
        hasher.combine(includeDocuments?.hashValue)
    }
}

//
// PlanInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** An object used to identify the features and attributes of the account being created. */
public final class PlanInformation: Content {
    /** Reserved for DocuSign. */
    public var addOns: [AddOn]?
    /** Specifies the ISO currency code for the account. */
    public var currencyCode: String?
    /** Reserved for DocuSign. */
    public var freeTrialDaysOverride: String?
    /** Reserved for DocuSign. */
    public var planFeatureSets: [FeatureSet]?
    /** DocuSign's id for the account plan. */
    public var planId: String?
    /**  */
    public var recipientDomains: [RecipientDomain]?

    public init(addOns: [AddOn]? = nil, currencyCode: String? = nil, freeTrialDaysOverride: String? = nil, planFeatureSets: [FeatureSet]? = nil, planId: String? = nil, recipientDomains: [RecipientDomain]? = nil) {
        self.addOns = addOns
        self.currencyCode = currencyCode
        self.freeTrialDaysOverride = freeTrialDaysOverride
        self.planFeatureSets = planFeatureSets
        self.planId = planId
        self.recipientDomains = recipientDomains
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addOns
        case currencyCode
        case freeTrialDaysOverride
        case planFeatureSets
        case planId
        case recipientDomains
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(addOns, forKey: .addOns)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(freeTrialDaysOverride, forKey: .freeTrialDaysOverride)
        try container.encodeIfPresent(planFeatureSets, forKey: .planFeatureSets)
        try container.encodeIfPresent(planId, forKey: .planId)
        try container.encodeIfPresent(recipientDomains, forKey: .recipientDomains)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        addOns = try container.decodeIfPresent([AddOn].self, forKey: .addOns)
        currencyCode = try container.decodeIfPresent(String.self, forKey: .currencyCode)
        freeTrialDaysOverride = try container.decodeIfPresent(String.self, forKey: .freeTrialDaysOverride)
        planFeatureSets = try container.decodeIfPresent([FeatureSet].self, forKey: .planFeatureSets)
        planId = try container.decodeIfPresent(String.self, forKey: .planId)
        recipientDomains = try container.decodeIfPresent([RecipientDomain].self, forKey: .recipientDomains)
    }
}

extension PlanInformation: Hashable {
    public static func == (lhs: PlanInformation, rhs: PlanInformation) -> Bool {
        lhs.addOns == rhs.addOns &&
            lhs.currencyCode == rhs.currencyCode &&
            lhs.freeTrialDaysOverride == rhs.freeTrialDaysOverride &&
            lhs.planFeatureSets == rhs.planFeatureSets &&
            lhs.planId == rhs.planId &&
            lhs.recipientDomains == rhs.recipientDomains
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(addOns?.hashValue)
        hasher.combine(currencyCode?.hashValue)
        hasher.combine(freeTrialDaysOverride?.hashValue)
        hasher.combine(planFeatureSets?.hashValue)
        hasher.combine(planId?.hashValue)
        hasher.combine(recipientDomains?.hashValue)
    }
}

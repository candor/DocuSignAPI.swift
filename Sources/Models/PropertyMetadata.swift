//
// PropertyMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Metadata about a property. */
public final class PropertyMetadata: Content {
    /** An array of option strings supported by this setting. */
    public var options: [String]?
    /** Indicates whether the property is editable. Valid values are:  - `editable` - `read_only` */
    public var rights: String?

    public init(options: [String]? = nil, rights: String? = nil) {
        self.options = options
        self.rights = rights
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case options
        case rights
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(options, forKey: .options)
        try container.encodeIfPresent(rights, forKey: .rights)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        options = try container.decodeIfPresent([String].self, forKey: .options)
        rights = try container.decodeIfPresent(String.self, forKey: .rights)
    }
}

extension PropertyMetadata: Hashable {
    public static func == (lhs: PropertyMetadata, rhs: PropertyMetadata) -> Bool {
        lhs.options == rhs.options &&
            lhs.rights == rhs.rights
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(options?.hashValue)
        hasher.combine(rights?.hashValue)
    }
}

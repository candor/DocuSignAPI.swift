//
// SeatDiscount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object contains information about a seat discount. */
public final class SeatDiscount: Content {
    /** Reserved for DocuSign. */
    public var beginSeatCount: String?
    /** The percent of the discount.   Example: `\"0.00\"` */
    public var discountPercent: String?
    /** Reserved for DocuSign. */
    public var endSeatCount: String?

    public init(beginSeatCount: String? = nil, discountPercent: String? = nil, endSeatCount: String? = nil) {
        self.beginSeatCount = beginSeatCount
        self.discountPercent = discountPercent
        self.endSeatCount = endSeatCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case beginSeatCount
        case discountPercent
        case endSeatCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(beginSeatCount, forKey: .beginSeatCount)
        try container.encodeIfPresent(discountPercent, forKey: .discountPercent)
        try container.encodeIfPresent(endSeatCount, forKey: .endSeatCount)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        beginSeatCount = try container.decodeIfPresent(String.self, forKey: .beginSeatCount)
        discountPercent = try container.decodeIfPresent(String.self, forKey: .discountPercent)
        endSeatCount = try container.decodeIfPresent(String.self, forKey: .endSeatCount)
    }
}

extension SeatDiscount: Hashable {
    public static func == (lhs: SeatDiscount, rhs: SeatDiscount) -> Bool {
        lhs.beginSeatCount == rhs.beginSeatCount &&
            lhs.discountPercent == rhs.discountPercent &&
            lhs.endSeatCount == rhs.endSeatCount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(beginSeatCount?.hashValue)
        hasher.combine(discountPercent?.hashValue)
        hasher.combine(endSeatCount?.hashValue)
    }
}

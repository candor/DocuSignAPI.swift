//
// WorkspaceFolderContents.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** This object&#39;s properties describe the contents of a workspace folder. */
public final class WorkspaceFolderContents: Content {
    /** The last index position in the result set.  */
    public var endPosition: String?
    public var folder: WorkspaceItem?
    /** A list of workspace items. */
    public var items: [WorkspaceItem]?
    /**  */
    public var parentFolders: [WorkspaceItem]?
    /** The number of results in this response. Because you can filter which entries are included in the response, this value is always less than or equal to the `totalSetSize`. */
    public var resultSetSize: String?
    /** The starting index position of the current result set. */
    public var startPosition: String?
    /** The total number of items in the result set. This value is always greater than or equal to the value of `resultSetSize`. */
    public var totalSetSize: String?
    /** The id of the workspace. */
    public var workspaceId: String?

    public init(endPosition: String? = nil, folder: WorkspaceItem? = nil, items: [WorkspaceItem]? = nil, parentFolders: [WorkspaceItem]? = nil, resultSetSize: String? = nil, startPosition: String? = nil, totalSetSize: String? = nil, workspaceId: String? = nil) {
        self.endPosition = endPosition
        self.folder = folder
        self.items = items
        self.parentFolders = parentFolders
        self.resultSetSize = resultSetSize
        self.startPosition = startPosition
        self.totalSetSize = totalSetSize
        self.workspaceId = workspaceId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case endPosition
        case folder
        case items
        case parentFolders
        case resultSetSize
        case startPosition
        case totalSetSize
        case workspaceId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(endPosition, forKey: .endPosition)
        try container.encodeIfPresent(folder, forKey: .folder)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(parentFolders, forKey: .parentFolders)
        try container.encodeIfPresent(resultSetSize, forKey: .resultSetSize)
        try container.encodeIfPresent(startPosition, forKey: .startPosition)
        try container.encodeIfPresent(totalSetSize, forKey: .totalSetSize)
        try container.encodeIfPresent(workspaceId, forKey: .workspaceId)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        endPosition = try container.decodeIfPresent(String.self, forKey: .endPosition)
        folder = try container.decodeIfPresent(WorkspaceItem.self, forKey: .folder)
        items = try container.decodeIfPresent([WorkspaceItem].self, forKey: .items)
        parentFolders = try container.decodeIfPresent([WorkspaceItem].self, forKey: .parentFolders)
        resultSetSize = try container.decodeIfPresent(String.self, forKey: .resultSetSize)
        startPosition = try container.decodeIfPresent(String.self, forKey: .startPosition)
        totalSetSize = try container.decodeIfPresent(String.self, forKey: .totalSetSize)
        workspaceId = try container.decodeIfPresent(String.self, forKey: .workspaceId)
    }
}

extension WorkspaceFolderContents: Hashable {
    public static func == (lhs: WorkspaceFolderContents, rhs: WorkspaceFolderContents) -> Bool {
        lhs.endPosition == rhs.endPosition &&
            lhs.folder == rhs.folder &&
            lhs.items == rhs.items &&
            lhs.parentFolders == rhs.parentFolders &&
            lhs.resultSetSize == rhs.resultSetSize &&
            lhs.startPosition == rhs.startPosition &&
            lhs.totalSetSize == rhs.totalSetSize &&
            lhs.workspaceId == rhs.workspaceId
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(endPosition?.hashValue)
        hasher.combine(folder?.hashValue)
        hasher.combine(items?.hashValue)
        hasher.combine(parentFolders?.hashValue)
        hasher.combine(resultSetSize?.hashValue)
        hasher.combine(startPosition?.hashValue)
        hasher.combine(totalSetSize?.hashValue)
        hasher.combine(workspaceId?.hashValue)
    }
}

//
// BccEmailAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about the BCC email address. */
public final class BccEmailAddress: Content {
    /** Only users with canManageAccount setting can use this option. An array of up to 5 email addresses the envelope is sent to as a BCC email.    Example: If your account has BCC for Email Archive set up for the email address 'archive@mycompany.com' and you send an envelope using the BCC Email Override to send a BCC email to 'salesarchive@mycompany.com', then a copy of the envelope is only sent to the 'salesarchive@mycompany.com' email address. */
    public var bccEmailAddressId: String?
    /** Specifies the BCC email address. DocuSign verifies that the email format is correct, but does not verify that the email is active.Using this overrides the BCC for Email Archive information setting for this envelope.  Maximum of length: 100 characters.  */
    public var email: String?

    public init(bccEmailAddressId: String? = nil, email: String? = nil) {
        self.bccEmailAddressId = bccEmailAddressId
        self.email = email
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bccEmailAddressId
        case email
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(bccEmailAddressId, forKey: .bccEmailAddressId)
        try container.encodeIfPresent(email, forKey: .email)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        bccEmailAddressId = try container.decodeIfPresent(String.self, forKey: .bccEmailAddressId)
        email = try container.decodeIfPresent(String.self, forKey: .email)
    }
}

extension BccEmailAddress: Hashable {
    public static func == (lhs: BccEmailAddress, rhs: BccEmailAddress) -> Bool {
        lhs.bccEmailAddressId == rhs.bccEmailAddressId &&
            lhs.email == rhs.email
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bccEmailAddressId?.hashValue)
        hasher.combine(email?.hashValue)
    }
}

//
// MatchBox.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class MatchBox: Content {
    /** The height of the tab in pixels. */
    public var height: String?
    /** Specifies the page number on which the tab is located. Must be 1 for supplemental documents.  */
    public var pageNumber: String?
    /** The width of the tab in pixels. */
    public var width: String?
    /** This property indicates the horizontal offset of the object on the page. DocuSign uses 72 DPI when determining position. Required. May be zero.  */
    public var xPosition: String?
    /** This property indicates the vertical offset of the object on the page. DocuSign uses 72 DPI when determining position. Required. May be zero.  */
    public var yPosition: String?

    public init(height: String? = nil, pageNumber: String? = nil, width: String? = nil, xPosition: String? = nil, yPosition: String? = nil) {
        self.height = height
        self.pageNumber = pageNumber
        self.width = width
        self.xPosition = xPosition
        self.yPosition = yPosition
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case height
        case pageNumber
        case width
        case xPosition
        case yPosition
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(pageNumber, forKey: .pageNumber)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(xPosition, forKey: .xPosition)
        try container.encodeIfPresent(yPosition, forKey: .yPosition)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        height = try container.decodeIfPresent(String.self, forKey: .height)
        pageNumber = try container.decodeIfPresent(String.self, forKey: .pageNumber)
        width = try container.decodeIfPresent(String.self, forKey: .width)
        xPosition = try container.decodeIfPresent(String.self, forKey: .xPosition)
        yPosition = try container.decodeIfPresent(String.self, forKey: .yPosition)
    }
}

extension MatchBox: Hashable {
    public static func == (lhs: MatchBox, rhs: MatchBox) -> Bool {
        lhs.height == rhs.height &&
            lhs.pageNumber == rhs.pageNumber &&
            lhs.width == rhs.width &&
            lhs.xPosition == rhs.xPosition &&
            lhs.yPosition == rhs.yPosition
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(height?.hashValue)
        hasher.combine(pageNumber?.hashValue)
        hasher.combine(width?.hashValue)
        hasher.combine(xPosition?.hashValue)
        hasher.combine(yPosition?.hashValue)
    }
}

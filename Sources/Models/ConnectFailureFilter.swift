//
// ConnectFailureFilter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** A list of failed envelope IDs to retry. */
public final class ConnectFailureFilter: Content {
    /** An array of envelope GUIDs.  Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`  */
    public var envelopeIds: [String]?
    /** Must be **false**. Setting this property to any other value will result in errors. */
    public var synchronous: String?

    public init(envelopeIds: [String]? = nil, synchronous: String? = nil) {
        self.envelopeIds = envelopeIds
        self.synchronous = synchronous
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case envelopeIds
        case synchronous
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(envelopeIds, forKey: .envelopeIds)
        try container.encodeIfPresent(synchronous, forKey: .synchronous)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        envelopeIds = try container.decodeIfPresent([String].self, forKey: .envelopeIds)
        synchronous = try container.decodeIfPresent(String.self, forKey: .synchronous)
    }
}

extension ConnectFailureFilter: Hashable {
    public static func == (lhs: ConnectFailureFilter, rhs: ConnectFailureFilter) -> Bool {
        lhs.envelopeIds == rhs.envelopeIds &&
            lhs.synchronous == rhs.synchronous
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(envelopeIds?.hashValue)
        hasher.combine(synchronous?.hashValue)
    }
}

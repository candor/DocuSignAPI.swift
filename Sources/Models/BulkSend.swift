//
// BulkSend.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** The bulk send list resource provides methods that enable you to create and manage bulk sending lists, which you can use to send multiple copies of an envelope in a single batch.   **Note**: The Bulk Send feature is only available on Business Pro plans that are using EasySign. */
public final class BulkSend: Content {
    /** An array of `bulkCopy` objects. Each object represents an instance or copy of an envelope and contains details such as the recipient, custom fields, tabs, and other information. */
    public var bulkCopies: [BulkSendingCopy]?
    /** The GUID of the bulk send list. This property is created after you post a new bulk send list. */
    public var listId: String?
    /** The name of the bulk send list. */
    public var name: String?

    public init(bulkCopies: [BulkSendingCopy]? = nil, listId: String? = nil, name: String? = nil) {
        self.bulkCopies = bulkCopies
        self.listId = listId
        self.name = name
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bulkCopies
        case listId
        case name
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(bulkCopies, forKey: .bulkCopies)
        try container.encodeIfPresent(listId, forKey: .listId)
        try container.encodeIfPresent(name, forKey: .name)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        bulkCopies = try container.decodeIfPresent([BulkSendingCopy].self, forKey: .bulkCopies)
        listId = try container.decodeIfPresent(String.self, forKey: .listId)
        name = try container.decodeIfPresent(String.self, forKey: .name)
    }
}

extension BulkSend: Hashable {
    public static func == (lhs: BulkSend, rhs: BulkSend) -> Bool {
        lhs.bulkCopies == rhs.bulkCopies &&
            lhs.listId == rhs.listId &&
            lhs.name == rhs.name
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bulkCopies?.hashValue)
        hasher.combine(listId?.hashValue)
        hasher.combine(name?.hashValue)
    }
}

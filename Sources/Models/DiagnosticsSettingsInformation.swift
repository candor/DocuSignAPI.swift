//
// DiagnosticsSettingsInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class DiagnosticsSettingsInformation: Content {
    /**  When set to **true**, enables API request logging for the user.  */
    public var apiRequestLogging: String?
    /** Specifies the maximum number of API requests to log. */
    public var apiRequestLogMaxEntries: String?
    /** Indicates the remaining number of API requests that can be logged. */
    public var apiRequestLogRemainingEntries: String?

    public init(apiRequestLogging: String? = nil, apiRequestLogMaxEntries: String? = nil, apiRequestLogRemainingEntries: String? = nil) {
        self.apiRequestLogging = apiRequestLogging
        self.apiRequestLogMaxEntries = apiRequestLogMaxEntries
        self.apiRequestLogRemainingEntries = apiRequestLogRemainingEntries
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case apiRequestLogging
        case apiRequestLogMaxEntries
        case apiRequestLogRemainingEntries
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(apiRequestLogging, forKey: .apiRequestLogging)
        try container.encodeIfPresent(apiRequestLogMaxEntries, forKey: .apiRequestLogMaxEntries)
        try container.encodeIfPresent(apiRequestLogRemainingEntries, forKey: .apiRequestLogRemainingEntries)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        apiRequestLogging = try container.decodeIfPresent(String.self, forKey: .apiRequestLogging)
        apiRequestLogMaxEntries = try container.decodeIfPresent(String.self, forKey: .apiRequestLogMaxEntries)
        apiRequestLogRemainingEntries = try container.decodeIfPresent(String.self, forKey: .apiRequestLogRemainingEntries)
    }
}

extension DiagnosticsSettingsInformation: Hashable {
    public static func == (lhs: DiagnosticsSettingsInformation, rhs: DiagnosticsSettingsInformation) -> Bool {
        lhs.apiRequestLogging == rhs.apiRequestLogging &&
            lhs.apiRequestLogMaxEntries == rhs.apiRequestLogMaxEntries &&
            lhs.apiRequestLogRemainingEntries == rhs.apiRequestLogRemainingEntries
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(apiRequestLogging?.hashValue)
        hasher.combine(apiRequestLogMaxEntries?.hashValue)
        hasher.combine(apiRequestLogRemainingEntries?.hashValue)
    }
}

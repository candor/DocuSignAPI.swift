//
// AuthenticationMethod.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Contains information about the method used for authentication. */
public final class AuthenticationMethod: Content {
    /** Indicates the type of authentication. Valid values are:   - `PhoneAuth` - `STAN` - `ISCheck`  - `OFAC` - `AccessCode` - `AgeVerify` - `SSOAuth` */
    public var authenticationType: String?
    /** The last provider that authenticated the user.  */
    public var lastProvider: String?
    /**  The data and time the user last used the authentication method.  */
    public var lastTimestamp: String?
    /** The number of times the authentication method was used.  */
    public var totalCount: String?

    public init(authenticationType: String? = nil, lastProvider: String? = nil, lastTimestamp: String? = nil, totalCount: String? = nil) {
        self.authenticationType = authenticationType
        self.lastProvider = lastProvider
        self.lastTimestamp = lastTimestamp
        self.totalCount = totalCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticationType
        case lastProvider
        case lastTimestamp
        case totalCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(authenticationType, forKey: .authenticationType)
        try container.encodeIfPresent(lastProvider, forKey: .lastProvider)
        try container.encodeIfPresent(lastTimestamp, forKey: .lastTimestamp)
        try container.encodeIfPresent(totalCount, forKey: .totalCount)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        authenticationType = try container.decodeIfPresent(String.self, forKey: .authenticationType)
        lastProvider = try container.decodeIfPresent(String.self, forKey: .lastProvider)
        lastTimestamp = try container.decodeIfPresent(String.self, forKey: .lastTimestamp)
        totalCount = try container.decodeIfPresent(String.self, forKey: .totalCount)
    }
}

extension AuthenticationMethod: Hashable {
    public static func == (lhs: AuthenticationMethod, rhs: AuthenticationMethod) -> Bool {
        lhs.authenticationType == rhs.authenticationType &&
            lhs.lastProvider == rhs.lastProvider &&
            lhs.lastTimestamp == rhs.lastTimestamp &&
            lhs.totalCount == rhs.totalCount
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(authenticationType?.hashValue)
        hasher.combine(lastProvider?.hashValue)
        hasher.combine(lastTimestamp?.hashValue)
        hasher.combine(totalCount?.hashValue)
    }
}

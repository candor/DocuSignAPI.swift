//
// ReportInProductRunResponseRowFields.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class ReportInProductRunResponseRowFields: Content {
    /**  */
    public var accessCodeRequired: String?
    /**  */
    public var accessCodesAttempted: String?
    /**  */
    public var accessCodesFailed: String?
    /** The external account number (int) or account ID GUID. */
    public var accountId: String?
    /**  */
    public var authenticationCategory: String?
    /**  */
    public var authenticationSuccess: String?
    /** Indicates the type of authentication. Valid values are:   - `PhoneAuth` - `STAN` - `ISCheck`  - `OFAC` - `AccessCode` - `AgeVerify` - `SSOAuth` */
    public var authenticationType: String?
    /**  */
    public var averageTimeToCompleteSeconds: String?
    /**  */
    public var avgCompleteSeconds: String?
    /**  */
    public var completed: String?
    /**  */
    public var completedTs: String?
    /** The creation date of the account in UTC timedate format. */
    public var createdDate: String?
    /**  */
    public var customField: String?
    /**  */
    public var declinedDate: String?
    /** The reason the recipient declined the document. Read only. */
    public var declinedReason: String?
    /**  */
    public var deliveredDate: String?
    /**  */
    public var envelopeCount: String?
    /**  */
    public var envelopeCreator: String?
    /** The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`  */
    public var envelopeId: String?
    /**  */
    public var envelopeInitialSendTs: String?
    /**  */
    public var envelopesBilled: String?
    /**  */
    public var envelopesCompleted: String?
    /**  */
    public var envelopesCompletedCount: String?
    /**  */
    public var envelopesDeclined: String?
    /**  */
    public var envelopesSent: String?
    /**  */
    public var envelopesSentCount: String?
    /**  */
    public var envelopesVoided: String?
    /**  */
    public var envelopeVoidedReason: String?
    /**  */
    public var eodDocumentDescription: String?
    /**  */
    public var eodDocumentName: String?
    /**  */
    public var eodDocumentProfileId: String?
    /**  */
    public var eodTransactionId: String?
    /**  */
    public var eodTransactionName: String?
    /**  */
    public var eventDate: String?
    /**  */
    public var expirationDate: String?
    /**  */
    public var expiredTs: String?
    /** A list of Connect failure logs. */
    public var failures: String?
    /**  */
    public var failureVendorCode: String?
    /**  */
    public var failureVendorReason: String?
    /**  */
    public var firstSendTs: String?
    /** The ID of the group being accessed. */
    public var groupId: String?
    /** The name of the group. The search_text provided in the call automatically performs a wild card search on group_name. */
    public var groupName: String?
    /**  */
    public var hoursToCompleteEnd: String?
    /**  */
    public var hoursToCompleteStart: String?
    /**  */
    public var idChecksAttempted: String?
    /**  */
    public var idChecksFailed: String?
    /**  */
    public var initialSendTs: String?
    /**  */
    public var ipAddress: String?
    /**  */
    public var lastActivity: String?
    /**  */
    public var lastActivityDate: String?
    /**  */
    public var lastSentDate: String?
    /**  */
    public var notSigned: String?
    /**  */
    public var numberOfAuthenticatedRecipients: String?
    /**  */
    public var numberOfCompletedSignatures: String?
    /**  */
    public var numberOfDocuments: String?
    /**  */
    public var numberOfPages: String?
    /**  */
    public var numberOfRecipients: String?
    /**  */
    public var numberOfSends: String?
    /**  */
    public var numberOfSigners: String?
    /**  */
    public var numberOfTotalDocuments: String?
    /**  */
    public var numberOfTotalPages: String?
    /**  */
    public var numberOfTotalSigners: String?
    /**  */
    public var numberOfUniqueSenders: String?
    /**  */
    public var numberTotalRecipients: String?
    /**  */
    public var periodEnd: String?
    /**  */
    public var periodStart: String?
    /**  */
    public var phoneCallsAttempted: String?
    /**  */
    public var phoneCallsFailed: String?
    /**  */
    public var reasonForDeclining: String?
    /**  */
    public var reasonForVoiding: String?
    /**  */
    public var reassignReason: String?
    /**  */
    public var received: String?
    /**  */
    public var recipient: String?
    /**  */
    public var recipientAction: String?
    /**  */
    public var recipientCompanyName: String?
    /**  */
    public var recipientCountry: String?
    /**  */
    public var recipientEmail: String?
    /** A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`. */
    public var recipientId: String?
    /**  */
    public var recipientName: String?
    /**  */
    public var recipientTemplateRoleName: String?
    /**  */
    public var recipientTitle: String?
    /** The recipient type, as specified by the following values: - `agent`: Agent recipients can add name and email information for recipients that appear after the agent in routing order. - `carbonCopy`: Carbon copy recipients get a copy of the envelope but don't need to sign, initial, date, or add information to any of the documents. This type of recipient can be used in any routing order. - `certifiedDelivery`: Certified delivery recipients must receive the completed documents for the envelope to be completed. They don't need to sign, initial, date, or add information to any of the documents. - `editor`: Editors have the same management and access rights for the envelope as the sender. Editors can add name and email information, add or change the routing order, set authentication options, and can edit signature/initial tabs and data fields for the remaining recipients. - `inPersonSigner`: In-person recipients are DocuSign users who act as signing hosts in the same physical location as the signer. - `intermediaries`: Intermediary recipients can optionally add name and email information for recipients at the same or subsequent level in the routing order. - `seal`: Electronic seal recipients represent legal entities. - `signer`: Signers are recipients who must sign, initial, date, or add data to form fields on the documents in the envelope. - `witness`: Witnesses are recipients whose signatures affirm that the identified signers have signed the documents in the envelope. */
    public var recipientType: String?
    /**  */
    public var recipientUserId: String?
    /** The number of remaining signatures that need to be applied to this document. */
    public var remainingSignatures: String?
    /** Specifies the routing order of the recipient in the envelope.  */
    public var routingOrder: String?
    /**  */
    public var senderAccountId: String?
    /**  */
    public var senderCompanyName: String?
    /**  */
    public var senderCountry: String?
    /** The sender's email address. */
    public var senderEmail: String?
    /**  */
    public var senderIPAddress: String?
    /**  */
    public var senderJobTitle: String?
    /** The sender's name. */
    public var senderName: String?
    /** The id of the sender. */
    public var senderUserId: String?
    /**  */
    public var signDate: String?
    /**  */
    public var signed: String?
    /**  */
    public var signedDate: String?
    /**  */
    public var signedOnMobile: String?
    /**  */
    public var signedOnPaper: String?
    /**  */
    public var signerList: String?
    /** The status of the item. */
    public var status: String?
    /**  */
    public var statusChangedDate: String?
    /**  */
    public var statusChangedTs: String?
    /**  */
    public var subject: String?
    /**  */
    public var successes: String?
    /**  */
    public var templatesCreated: String?
    /**  */
    public var templatesCreatedCount: String?
    /**  */
    public var terminalStatusDate: String?
    /**  */
    public var timeToCompleteSeconds: String?
    /**  */
    public var timeToDeliver: String?
    /**  */
    public var totalDocuments: String?
    /**  */
    public var totalEnvelopes: String?
    /**  */
    public var totalPages: String?
    /**  */
    public var totalRecipients: String?
    /**  */
    public var totalSigners: String?
    /**  */
    public var uniqueSenders: String?
    /**  */
    public var userAccountEmail: String?
    /**  */
    public var userAccountName: String?
    /**  */
    public var userAccountStatus: String?
    /**  */
    public var userCount: String?
    /** The ID of the user to access. Generally this is the ID of the current authenticated user, but if the authenticated user is an Administrator on the account, `userId` can represent another user whom the Administrator is accessing.  */
    public var userId: String?
    /**  */
    public var viewDate: String?
    /**  */
    public var voidedTs: String?

    public init(accessCodeRequired: String? = nil, accessCodesAttempted: String? = nil, accessCodesFailed: String? = nil, accountId: String? = nil, authenticationCategory: String? = nil, authenticationSuccess: String? = nil, authenticationType: String? = nil, averageTimeToCompleteSeconds: String? = nil, avgCompleteSeconds: String? = nil, completed: String? = nil, completedTs: String? = nil, createdDate: String? = nil, customField: String? = nil, declinedDate: String? = nil, declinedReason: String? = nil, deliveredDate: String? = nil, envelopeCount: String? = nil, envelopeCreator: String? = nil, envelopeId: String? = nil, envelopeInitialSendTs: String? = nil, envelopesBilled: String? = nil, envelopesCompleted: String? = nil, envelopesCompletedCount: String? = nil, envelopesDeclined: String? = nil, envelopesSent: String? = nil, envelopesSentCount: String? = nil, envelopesVoided: String? = nil, envelopeVoidedReason: String? = nil, eodDocumentDescription: String? = nil, eodDocumentName: String? = nil, eodDocumentProfileId: String? = nil, eodTransactionId: String? = nil, eodTransactionName: String? = nil, eventDate: String? = nil, expirationDate: String? = nil, expiredTs: String? = nil, failures: String? = nil, failureVendorCode: String? = nil, failureVendorReason: String? = nil, firstSendTs: String? = nil, groupId: String? = nil, groupName: String? = nil, hoursToCompleteEnd: String? = nil, hoursToCompleteStart: String? = nil, idChecksAttempted: String? = nil, idChecksFailed: String? = nil, initialSendTs: String? = nil, ipAddress: String? = nil, lastActivity: String? = nil, lastActivityDate: String? = nil, lastSentDate: String? = nil, notSigned: String? = nil, numberOfAuthenticatedRecipients: String? = nil, numberOfCompletedSignatures: String? = nil, numberOfDocuments: String? = nil, numberOfPages: String? = nil, numberOfRecipients: String? = nil, numberOfSends: String? = nil, numberOfSigners: String? = nil, numberOfTotalDocuments: String? = nil, numberOfTotalPages: String? = nil, numberOfTotalSigners: String? = nil, numberOfUniqueSenders: String? = nil, numberTotalRecipients: String? = nil, periodEnd: String? = nil, periodStart: String? = nil, phoneCallsAttempted: String? = nil, phoneCallsFailed: String? = nil, reasonForDeclining: String? = nil, reasonForVoiding: String? = nil, reassignReason: String? = nil, received: String? = nil, recipient: String? = nil, recipientAction: String? = nil, recipientCompanyName: String? = nil, recipientCountry: String? = nil, recipientEmail: String? = nil, recipientId: String? = nil, recipientName: String? = nil, recipientTemplateRoleName: String? = nil, recipientTitle: String? = nil, recipientType: String? = nil, recipientUserId: String? = nil, remainingSignatures: String? = nil, routingOrder: String? = nil, senderAccountId: String? = nil, senderCompanyName: String? = nil, senderCountry: String? = nil, senderEmail: String? = nil, senderIPAddress: String? = nil, senderJobTitle: String? = nil, senderName: String? = nil, senderUserId: String? = nil, signDate: String? = nil, signed: String? = nil, signedDate: String? = nil, signedOnMobile: String? = nil, signedOnPaper: String? = nil, signerList: String? = nil, status: String? = nil, statusChangedDate: String? = nil, statusChangedTs: String? = nil, subject: String? = nil, successes: String? = nil, templatesCreated: String? = nil, templatesCreatedCount: String? = nil, terminalStatusDate: String? = nil, timeToCompleteSeconds: String? = nil, timeToDeliver: String? = nil, totalDocuments: String? = nil, totalEnvelopes: String? = nil, totalPages: String? = nil, totalRecipients: String? = nil, totalSigners: String? = nil, uniqueSenders: String? = nil, userAccountEmail: String? = nil, userAccountName: String? = nil, userAccountStatus: String? = nil, userCount: String? = nil, userId: String? = nil, viewDate: String? = nil, voidedTs: String? = nil) {
        self.accessCodeRequired = accessCodeRequired
        self.accessCodesAttempted = accessCodesAttempted
        self.accessCodesFailed = accessCodesFailed
        self.accountId = accountId
        self.authenticationCategory = authenticationCategory
        self.authenticationSuccess = authenticationSuccess
        self.authenticationType = authenticationType
        self.averageTimeToCompleteSeconds = averageTimeToCompleteSeconds
        self.avgCompleteSeconds = avgCompleteSeconds
        self.completed = completed
        self.completedTs = completedTs
        self.createdDate = createdDate
        self.customField = customField
        self.declinedDate = declinedDate
        self.declinedReason = declinedReason
        self.deliveredDate = deliveredDate
        self.envelopeCount = envelopeCount
        self.envelopeCreator = envelopeCreator
        self.envelopeId = envelopeId
        self.envelopeInitialSendTs = envelopeInitialSendTs
        self.envelopesBilled = envelopesBilled
        self.envelopesCompleted = envelopesCompleted
        self.envelopesCompletedCount = envelopesCompletedCount
        self.envelopesDeclined = envelopesDeclined
        self.envelopesSent = envelopesSent
        self.envelopesSentCount = envelopesSentCount
        self.envelopesVoided = envelopesVoided
        self.envelopeVoidedReason = envelopeVoidedReason
        self.eodDocumentDescription = eodDocumentDescription
        self.eodDocumentName = eodDocumentName
        self.eodDocumentProfileId = eodDocumentProfileId
        self.eodTransactionId = eodTransactionId
        self.eodTransactionName = eodTransactionName
        self.eventDate = eventDate
        self.expirationDate = expirationDate
        self.expiredTs = expiredTs
        self.failures = failures
        self.failureVendorCode = failureVendorCode
        self.failureVendorReason = failureVendorReason
        self.firstSendTs = firstSendTs
        self.groupId = groupId
        self.groupName = groupName
        self.hoursToCompleteEnd = hoursToCompleteEnd
        self.hoursToCompleteStart = hoursToCompleteStart
        self.idChecksAttempted = idChecksAttempted
        self.idChecksFailed = idChecksFailed
        self.initialSendTs = initialSendTs
        self.ipAddress = ipAddress
        self.lastActivity = lastActivity
        self.lastActivityDate = lastActivityDate
        self.lastSentDate = lastSentDate
        self.notSigned = notSigned
        self.numberOfAuthenticatedRecipients = numberOfAuthenticatedRecipients
        self.numberOfCompletedSignatures = numberOfCompletedSignatures
        self.numberOfDocuments = numberOfDocuments
        self.numberOfPages = numberOfPages
        self.numberOfRecipients = numberOfRecipients
        self.numberOfSends = numberOfSends
        self.numberOfSigners = numberOfSigners
        self.numberOfTotalDocuments = numberOfTotalDocuments
        self.numberOfTotalPages = numberOfTotalPages
        self.numberOfTotalSigners = numberOfTotalSigners
        self.numberOfUniqueSenders = numberOfUniqueSenders
        self.numberTotalRecipients = numberTotalRecipients
        self.periodEnd = periodEnd
        self.periodStart = periodStart
        self.phoneCallsAttempted = phoneCallsAttempted
        self.phoneCallsFailed = phoneCallsFailed
        self.reasonForDeclining = reasonForDeclining
        self.reasonForVoiding = reasonForVoiding
        self.reassignReason = reassignReason
        self.received = received
        self.recipient = recipient
        self.recipientAction = recipientAction
        self.recipientCompanyName = recipientCompanyName
        self.recipientCountry = recipientCountry
        self.recipientEmail = recipientEmail
        self.recipientId = recipientId
        self.recipientName = recipientName
        self.recipientTemplateRoleName = recipientTemplateRoleName
        self.recipientTitle = recipientTitle
        self.recipientType = recipientType
        self.recipientUserId = recipientUserId
        self.remainingSignatures = remainingSignatures
        self.routingOrder = routingOrder
        self.senderAccountId = senderAccountId
        self.senderCompanyName = senderCompanyName
        self.senderCountry = senderCountry
        self.senderEmail = senderEmail
        self.senderIPAddress = senderIPAddress
        self.senderJobTitle = senderJobTitle
        self.senderName = senderName
        self.senderUserId = senderUserId
        self.signDate = signDate
        self.signed = signed
        self.signedDate = signedDate
        self.signedOnMobile = signedOnMobile
        self.signedOnPaper = signedOnPaper
        self.signerList = signerList
        self.status = status
        self.statusChangedDate = statusChangedDate
        self.statusChangedTs = statusChangedTs
        self.subject = subject
        self.successes = successes
        self.templatesCreated = templatesCreated
        self.templatesCreatedCount = templatesCreatedCount
        self.terminalStatusDate = terminalStatusDate
        self.timeToCompleteSeconds = timeToCompleteSeconds
        self.timeToDeliver = timeToDeliver
        self.totalDocuments = totalDocuments
        self.totalEnvelopes = totalEnvelopes
        self.totalPages = totalPages
        self.totalRecipients = totalRecipients
        self.totalSigners = totalSigners
        self.uniqueSenders = uniqueSenders
        self.userAccountEmail = userAccountEmail
        self.userAccountName = userAccountName
        self.userAccountStatus = userAccountStatus
        self.userCount = userCount
        self.userId = userId
        self.viewDate = viewDate
        self.voidedTs = voidedTs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessCodeRequired
        case accessCodesAttempted
        case accessCodesFailed
        case accountId
        case authenticationCategory
        case authenticationSuccess
        case authenticationType
        case averageTimeToCompleteSeconds
        case avgCompleteSeconds
        case completed
        case completedTs
        case createdDate
        case customField
        case declinedDate
        case declinedReason
        case deliveredDate
        case envelopeCount
        case envelopeCreator
        case envelopeId
        case envelopeInitialSendTs
        case envelopesBilled
        case envelopesCompleted
        case envelopesCompletedCount
        case envelopesDeclined
        case envelopesSent
        case envelopesSentCount
        case envelopesVoided
        case envelopeVoidedReason
        case eodDocumentDescription
        case eodDocumentName
        case eodDocumentProfileId
        case eodTransactionId
        case eodTransactionName
        case eventDate
        case expirationDate
        case expiredTs
        case failures
        case failureVendorCode
        case failureVendorReason
        case firstSendTs
        case groupId
        case groupName
        case hoursToCompleteEnd
        case hoursToCompleteStart
        case idChecksAttempted
        case idChecksFailed
        case initialSendTs
        case ipAddress
        case lastActivity
        case lastActivityDate
        case lastSentDate
        case notSigned
        case numberOfAuthenticatedRecipients
        case numberOfCompletedSignatures
        case numberOfDocuments
        case numberOfPages
        case numberOfRecipients
        case numberOfSends
        case numberOfSigners
        case numberOfTotalDocuments
        case numberOfTotalPages
        case numberOfTotalSigners
        case numberOfUniqueSenders
        case numberTotalRecipients
        case periodEnd
        case periodStart
        case phoneCallsAttempted
        case phoneCallsFailed
        case reasonForDeclining
        case reasonForVoiding
        case reassignReason
        case received
        case recipient
        case recipientAction
        case recipientCompanyName
        case recipientCountry
        case recipientEmail
        case recipientId
        case recipientName
        case recipientTemplateRoleName
        case recipientTitle
        case recipientType
        case recipientUserId
        case remainingSignatures
        case routingOrder
        case senderAccountId
        case senderCompanyName
        case senderCountry
        case senderEmail
        case senderIPAddress
        case senderJobTitle
        case senderName
        case senderUserId
        case signDate
        case signed
        case signedDate
        case signedOnMobile
        case signedOnPaper
        case signerList
        case status
        case statusChangedDate
        case statusChangedTs
        case subject
        case successes
        case templatesCreated
        case templatesCreatedCount
        case terminalStatusDate
        case timeToCompleteSeconds
        case timeToDeliver
        case totalDocuments
        case totalEnvelopes
        case totalPages
        case totalRecipients
        case totalSigners
        case uniqueSenders
        case userAccountEmail
        case userAccountName
        case userAccountStatus
        case userCount
        case userId
        case viewDate
        case voidedTs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accessCodeRequired, forKey: .accessCodeRequired)
        try container.encodeIfPresent(accessCodesAttempted, forKey: .accessCodesAttempted)
        try container.encodeIfPresent(accessCodesFailed, forKey: .accessCodesFailed)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(authenticationCategory, forKey: .authenticationCategory)
        try container.encodeIfPresent(authenticationSuccess, forKey: .authenticationSuccess)
        try container.encodeIfPresent(authenticationType, forKey: .authenticationType)
        try container.encodeIfPresent(averageTimeToCompleteSeconds, forKey: .averageTimeToCompleteSeconds)
        try container.encodeIfPresent(avgCompleteSeconds, forKey: .avgCompleteSeconds)
        try container.encodeIfPresent(completed, forKey: .completed)
        try container.encodeIfPresent(completedTs, forKey: .completedTs)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(customField, forKey: .customField)
        try container.encodeIfPresent(declinedDate, forKey: .declinedDate)
        try container.encodeIfPresent(declinedReason, forKey: .declinedReason)
        try container.encodeIfPresent(deliveredDate, forKey: .deliveredDate)
        try container.encodeIfPresent(envelopeCount, forKey: .envelopeCount)
        try container.encodeIfPresent(envelopeCreator, forKey: .envelopeCreator)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
        try container.encodeIfPresent(envelopeInitialSendTs, forKey: .envelopeInitialSendTs)
        try container.encodeIfPresent(envelopesBilled, forKey: .envelopesBilled)
        try container.encodeIfPresent(envelopesCompleted, forKey: .envelopesCompleted)
        try container.encodeIfPresent(envelopesCompletedCount, forKey: .envelopesCompletedCount)
        try container.encodeIfPresent(envelopesDeclined, forKey: .envelopesDeclined)
        try container.encodeIfPresent(envelopesSent, forKey: .envelopesSent)
        try container.encodeIfPresent(envelopesSentCount, forKey: .envelopesSentCount)
        try container.encodeIfPresent(envelopesVoided, forKey: .envelopesVoided)
        try container.encodeIfPresent(envelopeVoidedReason, forKey: .envelopeVoidedReason)
        try container.encodeIfPresent(eodDocumentDescription, forKey: .eodDocumentDescription)
        try container.encodeIfPresent(eodDocumentName, forKey: .eodDocumentName)
        try container.encodeIfPresent(eodDocumentProfileId, forKey: .eodDocumentProfileId)
        try container.encodeIfPresent(eodTransactionId, forKey: .eodTransactionId)
        try container.encodeIfPresent(eodTransactionName, forKey: .eodTransactionName)
        try container.encodeIfPresent(eventDate, forKey: .eventDate)
        try container.encodeIfPresent(expirationDate, forKey: .expirationDate)
        try container.encodeIfPresent(expiredTs, forKey: .expiredTs)
        try container.encodeIfPresent(failures, forKey: .failures)
        try container.encodeIfPresent(failureVendorCode, forKey: .failureVendorCode)
        try container.encodeIfPresent(failureVendorReason, forKey: .failureVendorReason)
        try container.encodeIfPresent(firstSendTs, forKey: .firstSendTs)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(groupName, forKey: .groupName)
        try container.encodeIfPresent(hoursToCompleteEnd, forKey: .hoursToCompleteEnd)
        try container.encodeIfPresent(hoursToCompleteStart, forKey: .hoursToCompleteStart)
        try container.encodeIfPresent(idChecksAttempted, forKey: .idChecksAttempted)
        try container.encodeIfPresent(idChecksFailed, forKey: .idChecksFailed)
        try container.encodeIfPresent(initialSendTs, forKey: .initialSendTs)
        try container.encodeIfPresent(ipAddress, forKey: .ipAddress)
        try container.encodeIfPresent(lastActivity, forKey: .lastActivity)
        try container.encodeIfPresent(lastActivityDate, forKey: .lastActivityDate)
        try container.encodeIfPresent(lastSentDate, forKey: .lastSentDate)
        try container.encodeIfPresent(notSigned, forKey: .notSigned)
        try container.encodeIfPresent(numberOfAuthenticatedRecipients, forKey: .numberOfAuthenticatedRecipients)
        try container.encodeIfPresent(numberOfCompletedSignatures, forKey: .numberOfCompletedSignatures)
        try container.encodeIfPresent(numberOfDocuments, forKey: .numberOfDocuments)
        try container.encodeIfPresent(numberOfPages, forKey: .numberOfPages)
        try container.encodeIfPresent(numberOfRecipients, forKey: .numberOfRecipients)
        try container.encodeIfPresent(numberOfSends, forKey: .numberOfSends)
        try container.encodeIfPresent(numberOfSigners, forKey: .numberOfSigners)
        try container.encodeIfPresent(numberOfTotalDocuments, forKey: .numberOfTotalDocuments)
        try container.encodeIfPresent(numberOfTotalPages, forKey: .numberOfTotalPages)
        try container.encodeIfPresent(numberOfTotalSigners, forKey: .numberOfTotalSigners)
        try container.encodeIfPresent(numberOfUniqueSenders, forKey: .numberOfUniqueSenders)
        try container.encodeIfPresent(numberTotalRecipients, forKey: .numberTotalRecipients)
        try container.encodeIfPresent(periodEnd, forKey: .periodEnd)
        try container.encodeIfPresent(periodStart, forKey: .periodStart)
        try container.encodeIfPresent(phoneCallsAttempted, forKey: .phoneCallsAttempted)
        try container.encodeIfPresent(phoneCallsFailed, forKey: .phoneCallsFailed)
        try container.encodeIfPresent(reasonForDeclining, forKey: .reasonForDeclining)
        try container.encodeIfPresent(reasonForVoiding, forKey: .reasonForVoiding)
        try container.encodeIfPresent(reassignReason, forKey: .reassignReason)
        try container.encodeIfPresent(received, forKey: .received)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(recipientAction, forKey: .recipientAction)
        try container.encodeIfPresent(recipientCompanyName, forKey: .recipientCompanyName)
        try container.encodeIfPresent(recipientCountry, forKey: .recipientCountry)
        try container.encodeIfPresent(recipientEmail, forKey: .recipientEmail)
        try container.encodeIfPresent(recipientId, forKey: .recipientId)
        try container.encodeIfPresent(recipientName, forKey: .recipientName)
        try container.encodeIfPresent(recipientTemplateRoleName, forKey: .recipientTemplateRoleName)
        try container.encodeIfPresent(recipientTitle, forKey: .recipientTitle)
        try container.encodeIfPresent(recipientType, forKey: .recipientType)
        try container.encodeIfPresent(recipientUserId, forKey: .recipientUserId)
        try container.encodeIfPresent(remainingSignatures, forKey: .remainingSignatures)
        try container.encodeIfPresent(routingOrder, forKey: .routingOrder)
        try container.encodeIfPresent(senderAccountId, forKey: .senderAccountId)
        try container.encodeIfPresent(senderCompanyName, forKey: .senderCompanyName)
        try container.encodeIfPresent(senderCountry, forKey: .senderCountry)
        try container.encodeIfPresent(senderEmail, forKey: .senderEmail)
        try container.encodeIfPresent(senderIPAddress, forKey: .senderIPAddress)
        try container.encodeIfPresent(senderJobTitle, forKey: .senderJobTitle)
        try container.encodeIfPresent(senderName, forKey: .senderName)
        try container.encodeIfPresent(senderUserId, forKey: .senderUserId)
        try container.encodeIfPresent(signDate, forKey: .signDate)
        try container.encodeIfPresent(signed, forKey: .signed)
        try container.encodeIfPresent(signedDate, forKey: .signedDate)
        try container.encodeIfPresent(signedOnMobile, forKey: .signedOnMobile)
        try container.encodeIfPresent(signedOnPaper, forKey: .signedOnPaper)
        try container.encodeIfPresent(signerList, forKey: .signerList)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusChangedDate, forKey: .statusChangedDate)
        try container.encodeIfPresent(statusChangedTs, forKey: .statusChangedTs)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encodeIfPresent(successes, forKey: .successes)
        try container.encodeIfPresent(templatesCreated, forKey: .templatesCreated)
        try container.encodeIfPresent(templatesCreatedCount, forKey: .templatesCreatedCount)
        try container.encodeIfPresent(terminalStatusDate, forKey: .terminalStatusDate)
        try container.encodeIfPresent(timeToCompleteSeconds, forKey: .timeToCompleteSeconds)
        try container.encodeIfPresent(timeToDeliver, forKey: .timeToDeliver)
        try container.encodeIfPresent(totalDocuments, forKey: .totalDocuments)
        try container.encodeIfPresent(totalEnvelopes, forKey: .totalEnvelopes)
        try container.encodeIfPresent(totalPages, forKey: .totalPages)
        try container.encodeIfPresent(totalRecipients, forKey: .totalRecipients)
        try container.encodeIfPresent(totalSigners, forKey: .totalSigners)
        try container.encodeIfPresent(uniqueSenders, forKey: .uniqueSenders)
        try container.encodeIfPresent(userAccountEmail, forKey: .userAccountEmail)
        try container.encodeIfPresent(userAccountName, forKey: .userAccountName)
        try container.encodeIfPresent(userAccountStatus, forKey: .userAccountStatus)
        try container.encodeIfPresent(userCount, forKey: .userCount)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(viewDate, forKey: .viewDate)
        try container.encodeIfPresent(voidedTs, forKey: .voidedTs)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accessCodeRequired = try container.decodeIfPresent(String.self, forKey: .accessCodeRequired)
        accessCodesAttempted = try container.decodeIfPresent(String.self, forKey: .accessCodesAttempted)
        accessCodesFailed = try container.decodeIfPresent(String.self, forKey: .accessCodesFailed)
        accountId = try container.decodeIfPresent(String.self, forKey: .accountId)
        authenticationCategory = try container.decodeIfPresent(String.self, forKey: .authenticationCategory)
        authenticationSuccess = try container.decodeIfPresent(String.self, forKey: .authenticationSuccess)
        authenticationType = try container.decodeIfPresent(String.self, forKey: .authenticationType)
        averageTimeToCompleteSeconds = try container.decodeIfPresent(String.self, forKey: .averageTimeToCompleteSeconds)
        avgCompleteSeconds = try container.decodeIfPresent(String.self, forKey: .avgCompleteSeconds)
        completed = try container.decodeIfPresent(String.self, forKey: .completed)
        completedTs = try container.decodeIfPresent(String.self, forKey: .completedTs)
        createdDate = try container.decodeIfPresent(String.self, forKey: .createdDate)
        customField = try container.decodeIfPresent(String.self, forKey: .customField)
        declinedDate = try container.decodeIfPresent(String.self, forKey: .declinedDate)
        declinedReason = try container.decodeIfPresent(String.self, forKey: .declinedReason)
        deliveredDate = try container.decodeIfPresent(String.self, forKey: .deliveredDate)
        envelopeCount = try container.decodeIfPresent(String.self, forKey: .envelopeCount)
        envelopeCreator = try container.decodeIfPresent(String.self, forKey: .envelopeCreator)
        envelopeId = try container.decodeIfPresent(String.self, forKey: .envelopeId)
        envelopeInitialSendTs = try container.decodeIfPresent(String.self, forKey: .envelopeInitialSendTs)
        envelopesBilled = try container.decodeIfPresent(String.self, forKey: .envelopesBilled)
        envelopesCompleted = try container.decodeIfPresent(String.self, forKey: .envelopesCompleted)
        envelopesCompletedCount = try container.decodeIfPresent(String.self, forKey: .envelopesCompletedCount)
        envelopesDeclined = try container.decodeIfPresent(String.self, forKey: .envelopesDeclined)
        envelopesSent = try container.decodeIfPresent(String.self, forKey: .envelopesSent)
        envelopesSentCount = try container.decodeIfPresent(String.self, forKey: .envelopesSentCount)
        envelopesVoided = try container.decodeIfPresent(String.self, forKey: .envelopesVoided)
        envelopeVoidedReason = try container.decodeIfPresent(String.self, forKey: .envelopeVoidedReason)
        eodDocumentDescription = try container.decodeIfPresent(String.self, forKey: .eodDocumentDescription)
        eodDocumentName = try container.decodeIfPresent(String.self, forKey: .eodDocumentName)
        eodDocumentProfileId = try container.decodeIfPresent(String.self, forKey: .eodDocumentProfileId)
        eodTransactionId = try container.decodeIfPresent(String.self, forKey: .eodTransactionId)
        eodTransactionName = try container.decodeIfPresent(String.self, forKey: .eodTransactionName)
        eventDate = try container.decodeIfPresent(String.self, forKey: .eventDate)
        expirationDate = try container.decodeIfPresent(String.self, forKey: .expirationDate)
        expiredTs = try container.decodeIfPresent(String.self, forKey: .expiredTs)
        failures = try container.decodeIfPresent(String.self, forKey: .failures)
        failureVendorCode = try container.decodeIfPresent(String.self, forKey: .failureVendorCode)
        failureVendorReason = try container.decodeIfPresent(String.self, forKey: .failureVendorReason)
        firstSendTs = try container.decodeIfPresent(String.self, forKey: .firstSendTs)
        groupId = try container.decodeIfPresent(String.self, forKey: .groupId)
        groupName = try container.decodeIfPresent(String.self, forKey: .groupName)
        hoursToCompleteEnd = try container.decodeIfPresent(String.self, forKey: .hoursToCompleteEnd)
        hoursToCompleteStart = try container.decodeIfPresent(String.self, forKey: .hoursToCompleteStart)
        idChecksAttempted = try container.decodeIfPresent(String.self, forKey: .idChecksAttempted)
        idChecksFailed = try container.decodeIfPresent(String.self, forKey: .idChecksFailed)
        initialSendTs = try container.decodeIfPresent(String.self, forKey: .initialSendTs)
        ipAddress = try container.decodeIfPresent(String.self, forKey: .ipAddress)
        lastActivity = try container.decodeIfPresent(String.self, forKey: .lastActivity)
        lastActivityDate = try container.decodeIfPresent(String.self, forKey: .lastActivityDate)
        lastSentDate = try container.decodeIfPresent(String.self, forKey: .lastSentDate)
        notSigned = try container.decodeIfPresent(String.self, forKey: .notSigned)
        numberOfAuthenticatedRecipients = try container.decodeIfPresent(String.self, forKey: .numberOfAuthenticatedRecipients)
        numberOfCompletedSignatures = try container.decodeIfPresent(String.self, forKey: .numberOfCompletedSignatures)
        numberOfDocuments = try container.decodeIfPresent(String.self, forKey: .numberOfDocuments)
        numberOfPages = try container.decodeIfPresent(String.self, forKey: .numberOfPages)
        numberOfRecipients = try container.decodeIfPresent(String.self, forKey: .numberOfRecipients)
        numberOfSends = try container.decodeIfPresent(String.self, forKey: .numberOfSends)
        numberOfSigners = try container.decodeIfPresent(String.self, forKey: .numberOfSigners)
        numberOfTotalDocuments = try container.decodeIfPresent(String.self, forKey: .numberOfTotalDocuments)
        numberOfTotalPages = try container.decodeIfPresent(String.self, forKey: .numberOfTotalPages)
        numberOfTotalSigners = try container.decodeIfPresent(String.self, forKey: .numberOfTotalSigners)
        numberOfUniqueSenders = try container.decodeIfPresent(String.self, forKey: .numberOfUniqueSenders)
        numberTotalRecipients = try container.decodeIfPresent(String.self, forKey: .numberTotalRecipients)
        periodEnd = try container.decodeIfPresent(String.self, forKey: .periodEnd)
        periodStart = try container.decodeIfPresent(String.self, forKey: .periodStart)
        phoneCallsAttempted = try container.decodeIfPresent(String.self, forKey: .phoneCallsAttempted)
        phoneCallsFailed = try container.decodeIfPresent(String.self, forKey: .phoneCallsFailed)
        reasonForDeclining = try container.decodeIfPresent(String.self, forKey: .reasonForDeclining)
        reasonForVoiding = try container.decodeIfPresent(String.self, forKey: .reasonForVoiding)
        reassignReason = try container.decodeIfPresent(String.self, forKey: .reassignReason)
        received = try container.decodeIfPresent(String.self, forKey: .received)
        recipient = try container.decodeIfPresent(String.self, forKey: .recipient)
        recipientAction = try container.decodeIfPresent(String.self, forKey: .recipientAction)
        recipientCompanyName = try container.decodeIfPresent(String.self, forKey: .recipientCompanyName)
        recipientCountry = try container.decodeIfPresent(String.self, forKey: .recipientCountry)
        recipientEmail = try container.decodeIfPresent(String.self, forKey: .recipientEmail)
        recipientId = try container.decodeIfPresent(String.self, forKey: .recipientId)
        recipientName = try container.decodeIfPresent(String.self, forKey: .recipientName)
        recipientTemplateRoleName = try container.decodeIfPresent(String.self, forKey: .recipientTemplateRoleName)
        recipientTitle = try container.decodeIfPresent(String.self, forKey: .recipientTitle)
        recipientType = try container.decodeIfPresent(String.self, forKey: .recipientType)
        recipientUserId = try container.decodeIfPresent(String.self, forKey: .recipientUserId)
        remainingSignatures = try container.decodeIfPresent(String.self, forKey: .remainingSignatures)
        routingOrder = try container.decodeIfPresent(String.self, forKey: .routingOrder)
        senderAccountId = try container.decodeIfPresent(String.self, forKey: .senderAccountId)
        senderCompanyName = try container.decodeIfPresent(String.self, forKey: .senderCompanyName)
        senderCountry = try container.decodeIfPresent(String.self, forKey: .senderCountry)
        senderEmail = try container.decodeIfPresent(String.self, forKey: .senderEmail)
        senderIPAddress = try container.decodeIfPresent(String.self, forKey: .senderIPAddress)
        senderJobTitle = try container.decodeIfPresent(String.self, forKey: .senderJobTitle)
        senderName = try container.decodeIfPresent(String.self, forKey: .senderName)
        senderUserId = try container.decodeIfPresent(String.self, forKey: .senderUserId)
        signDate = try container.decodeIfPresent(String.self, forKey: .signDate)
        signed = try container.decodeIfPresent(String.self, forKey: .signed)
        signedDate = try container.decodeIfPresent(String.self, forKey: .signedDate)
        signedOnMobile = try container.decodeIfPresent(String.self, forKey: .signedOnMobile)
        signedOnPaper = try container.decodeIfPresent(String.self, forKey: .signedOnPaper)
        signerList = try container.decodeIfPresent(String.self, forKey: .signerList)
        status = try container.decodeIfPresent(String.self, forKey: .status)
        statusChangedDate = try container.decodeIfPresent(String.self, forKey: .statusChangedDate)
        statusChangedTs = try container.decodeIfPresent(String.self, forKey: .statusChangedTs)
        subject = try container.decodeIfPresent(String.self, forKey: .subject)
        successes = try container.decodeIfPresent(String.self, forKey: .successes)
        templatesCreated = try container.decodeIfPresent(String.self, forKey: .templatesCreated)
        templatesCreatedCount = try container.decodeIfPresent(String.self, forKey: .templatesCreatedCount)
        terminalStatusDate = try container.decodeIfPresent(String.self, forKey: .terminalStatusDate)
        timeToCompleteSeconds = try container.decodeIfPresent(String.self, forKey: .timeToCompleteSeconds)
        timeToDeliver = try container.decodeIfPresent(String.self, forKey: .timeToDeliver)
        totalDocuments = try container.decodeIfPresent(String.self, forKey: .totalDocuments)
        totalEnvelopes = try container.decodeIfPresent(String.self, forKey: .totalEnvelopes)
        totalPages = try container.decodeIfPresent(String.self, forKey: .totalPages)
        totalRecipients = try container.decodeIfPresent(String.self, forKey: .totalRecipients)
        totalSigners = try container.decodeIfPresent(String.self, forKey: .totalSigners)
        uniqueSenders = try container.decodeIfPresent(String.self, forKey: .uniqueSenders)
        userAccountEmail = try container.decodeIfPresent(String.self, forKey: .userAccountEmail)
        userAccountName = try container.decodeIfPresent(String.self, forKey: .userAccountName)
        userAccountStatus = try container.decodeIfPresent(String.self, forKey: .userAccountStatus)
        userCount = try container.decodeIfPresent(String.self, forKey: .userCount)
        userId = try container.decodeIfPresent(String.self, forKey: .userId)
        viewDate = try container.decodeIfPresent(String.self, forKey: .viewDate)
        voidedTs = try container.decodeIfPresent(String.self, forKey: .voidedTs)
    }
}

extension ReportInProductRunResponseRowFields: Hashable {
    public static func == (lhs: ReportInProductRunResponseRowFields, rhs: ReportInProductRunResponseRowFields) -> Bool {
        lhs.accessCodeRequired == rhs.accessCodeRequired &&
            lhs.accessCodesAttempted == rhs.accessCodesAttempted &&
            lhs.accessCodesFailed == rhs.accessCodesFailed &&
            lhs.accountId == rhs.accountId &&
            lhs.authenticationCategory == rhs.authenticationCategory &&
            lhs.authenticationSuccess == rhs.authenticationSuccess &&
            lhs.authenticationType == rhs.authenticationType &&
            lhs.averageTimeToCompleteSeconds == rhs.averageTimeToCompleteSeconds &&
            lhs.avgCompleteSeconds == rhs.avgCompleteSeconds &&
            lhs.completed == rhs.completed &&
            lhs.completedTs == rhs.completedTs &&
            lhs.createdDate == rhs.createdDate &&
            lhs.customField == rhs.customField &&
            lhs.declinedDate == rhs.declinedDate &&
            lhs.declinedReason == rhs.declinedReason &&
            lhs.deliveredDate == rhs.deliveredDate &&
            lhs.envelopeCount == rhs.envelopeCount &&
            lhs.envelopeCreator == rhs.envelopeCreator &&
            lhs.envelopeId == rhs.envelopeId &&
            lhs.envelopeInitialSendTs == rhs.envelopeInitialSendTs &&
            lhs.envelopesBilled == rhs.envelopesBilled &&
            lhs.envelopesCompleted == rhs.envelopesCompleted &&
            lhs.envelopesCompletedCount == rhs.envelopesCompletedCount &&
            lhs.envelopesDeclined == rhs.envelopesDeclined &&
            lhs.envelopesSent == rhs.envelopesSent &&
            lhs.envelopesSentCount == rhs.envelopesSentCount &&
            lhs.envelopesVoided == rhs.envelopesVoided &&
            lhs.envelopeVoidedReason == rhs.envelopeVoidedReason &&
            lhs.eodDocumentDescription == rhs.eodDocumentDescription &&
            lhs.eodDocumentName == rhs.eodDocumentName &&
            lhs.eodDocumentProfileId == rhs.eodDocumentProfileId &&
            lhs.eodTransactionId == rhs.eodTransactionId &&
            lhs.eodTransactionName == rhs.eodTransactionName &&
            lhs.eventDate == rhs.eventDate &&
            lhs.expirationDate == rhs.expirationDate &&
            lhs.expiredTs == rhs.expiredTs &&
            lhs.failures == rhs.failures &&
            lhs.failureVendorCode == rhs.failureVendorCode &&
            lhs.failureVendorReason == rhs.failureVendorReason &&
            lhs.firstSendTs == rhs.firstSendTs &&
            lhs.groupId == rhs.groupId &&
            lhs.groupName == rhs.groupName &&
            lhs.hoursToCompleteEnd == rhs.hoursToCompleteEnd &&
            lhs.hoursToCompleteStart == rhs.hoursToCompleteStart &&
            lhs.idChecksAttempted == rhs.idChecksAttempted &&
            lhs.idChecksFailed == rhs.idChecksFailed &&
            lhs.initialSendTs == rhs.initialSendTs &&
            lhs.ipAddress == rhs.ipAddress &&
            lhs.lastActivity == rhs.lastActivity &&
            lhs.lastActivityDate == rhs.lastActivityDate &&
            lhs.lastSentDate == rhs.lastSentDate &&
            lhs.notSigned == rhs.notSigned &&
            lhs.numberOfAuthenticatedRecipients == rhs.numberOfAuthenticatedRecipients &&
            lhs.numberOfCompletedSignatures == rhs.numberOfCompletedSignatures &&
            lhs.numberOfDocuments == rhs.numberOfDocuments &&
            lhs.numberOfPages == rhs.numberOfPages &&
            lhs.numberOfRecipients == rhs.numberOfRecipients &&
            lhs.numberOfSends == rhs.numberOfSends &&
            lhs.numberOfSigners == rhs.numberOfSigners &&
            lhs.numberOfTotalDocuments == rhs.numberOfTotalDocuments &&
            lhs.numberOfTotalPages == rhs.numberOfTotalPages &&
            lhs.numberOfTotalSigners == rhs.numberOfTotalSigners &&
            lhs.numberOfUniqueSenders == rhs.numberOfUniqueSenders &&
            lhs.numberTotalRecipients == rhs.numberTotalRecipients &&
            lhs.periodEnd == rhs.periodEnd &&
            lhs.periodStart == rhs.periodStart &&
            lhs.phoneCallsAttempted == rhs.phoneCallsAttempted &&
            lhs.phoneCallsFailed == rhs.phoneCallsFailed &&
            lhs.reasonForDeclining == rhs.reasonForDeclining &&
            lhs.reasonForVoiding == rhs.reasonForVoiding &&
            lhs.reassignReason == rhs.reassignReason &&
            lhs.received == rhs.received &&
            lhs.recipient == rhs.recipient &&
            lhs.recipientAction == rhs.recipientAction &&
            lhs.recipientCompanyName == rhs.recipientCompanyName &&
            lhs.recipientCountry == rhs.recipientCountry &&
            lhs.recipientEmail == rhs.recipientEmail &&
            lhs.recipientId == rhs.recipientId &&
            lhs.recipientName == rhs.recipientName &&
            lhs.recipientTemplateRoleName == rhs.recipientTemplateRoleName &&
            lhs.recipientTitle == rhs.recipientTitle &&
            lhs.recipientType == rhs.recipientType &&
            lhs.recipientUserId == rhs.recipientUserId &&
            lhs.remainingSignatures == rhs.remainingSignatures &&
            lhs.routingOrder == rhs.routingOrder &&
            lhs.senderAccountId == rhs.senderAccountId &&
            lhs.senderCompanyName == rhs.senderCompanyName &&
            lhs.senderCountry == rhs.senderCountry &&
            lhs.senderEmail == rhs.senderEmail &&
            lhs.senderIPAddress == rhs.senderIPAddress &&
            lhs.senderJobTitle == rhs.senderJobTitle &&
            lhs.senderName == rhs.senderName &&
            lhs.senderUserId == rhs.senderUserId &&
            lhs.signDate == rhs.signDate &&
            lhs.signed == rhs.signed &&
            lhs.signedDate == rhs.signedDate &&
            lhs.signedOnMobile == rhs.signedOnMobile &&
            lhs.signedOnPaper == rhs.signedOnPaper &&
            lhs.signerList == rhs.signerList &&
            lhs.status == rhs.status &&
            lhs.statusChangedDate == rhs.statusChangedDate &&
            lhs.statusChangedTs == rhs.statusChangedTs &&
            lhs.subject == rhs.subject &&
            lhs.successes == rhs.successes &&
            lhs.templatesCreated == rhs.templatesCreated &&
            lhs.templatesCreatedCount == rhs.templatesCreatedCount &&
            lhs.terminalStatusDate == rhs.terminalStatusDate &&
            lhs.timeToCompleteSeconds == rhs.timeToCompleteSeconds &&
            lhs.timeToDeliver == rhs.timeToDeliver &&
            lhs.totalDocuments == rhs.totalDocuments &&
            lhs.totalEnvelopes == rhs.totalEnvelopes &&
            lhs.totalPages == rhs.totalPages &&
            lhs.totalRecipients == rhs.totalRecipients &&
            lhs.totalSigners == rhs.totalSigners &&
            lhs.uniqueSenders == rhs.uniqueSenders &&
            lhs.userAccountEmail == rhs.userAccountEmail &&
            lhs.userAccountName == rhs.userAccountName &&
            lhs.userAccountStatus == rhs.userAccountStatus &&
            lhs.userCount == rhs.userCount &&
            lhs.userId == rhs.userId &&
            lhs.viewDate == rhs.viewDate &&
            lhs.voidedTs == rhs.voidedTs
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accessCodeRequired?.hashValue)
        hasher.combine(accessCodesAttempted?.hashValue)
        hasher.combine(accessCodesFailed?.hashValue)
        hasher.combine(accountId?.hashValue)
        hasher.combine(authenticationCategory?.hashValue)
        hasher.combine(authenticationSuccess?.hashValue)
        hasher.combine(authenticationType?.hashValue)
        hasher.combine(averageTimeToCompleteSeconds?.hashValue)
        hasher.combine(avgCompleteSeconds?.hashValue)
        hasher.combine(completed?.hashValue)
        hasher.combine(completedTs?.hashValue)
        hasher.combine(createdDate?.hashValue)
        hasher.combine(customField?.hashValue)
        hasher.combine(declinedDate?.hashValue)
        hasher.combine(declinedReason?.hashValue)
        hasher.combine(deliveredDate?.hashValue)
        hasher.combine(envelopeCount?.hashValue)
        hasher.combine(envelopeCreator?.hashValue)
        hasher.combine(envelopeId?.hashValue)
        hasher.combine(envelopeInitialSendTs?.hashValue)
        hasher.combine(envelopesBilled?.hashValue)
        hasher.combine(envelopesCompleted?.hashValue)
        hasher.combine(envelopesCompletedCount?.hashValue)
        hasher.combine(envelopesDeclined?.hashValue)
        hasher.combine(envelopesSent?.hashValue)
        hasher.combine(envelopesSentCount?.hashValue)
        hasher.combine(envelopesVoided?.hashValue)
        hasher.combine(envelopeVoidedReason?.hashValue)
        hasher.combine(eodDocumentDescription?.hashValue)
        hasher.combine(eodDocumentName?.hashValue)
        hasher.combine(eodDocumentProfileId?.hashValue)
        hasher.combine(eodTransactionId?.hashValue)
        hasher.combine(eodTransactionName?.hashValue)
        hasher.combine(eventDate?.hashValue)
        hasher.combine(expirationDate?.hashValue)
        hasher.combine(expiredTs?.hashValue)
        hasher.combine(failures?.hashValue)
        hasher.combine(failureVendorCode?.hashValue)
        hasher.combine(failureVendorReason?.hashValue)
        hasher.combine(firstSendTs?.hashValue)
        hasher.combine(groupId?.hashValue)
        hasher.combine(groupName?.hashValue)
        hasher.combine(hoursToCompleteEnd?.hashValue)
        hasher.combine(hoursToCompleteStart?.hashValue)
        hasher.combine(idChecksAttempted?.hashValue)
        hasher.combine(idChecksFailed?.hashValue)
        hasher.combine(initialSendTs?.hashValue)
        hasher.combine(ipAddress?.hashValue)
        hasher.combine(lastActivity?.hashValue)
        hasher.combine(lastActivityDate?.hashValue)
        hasher.combine(lastSentDate?.hashValue)
        hasher.combine(notSigned?.hashValue)
        hasher.combine(numberOfAuthenticatedRecipients?.hashValue)
        hasher.combine(numberOfCompletedSignatures?.hashValue)
        hasher.combine(numberOfDocuments?.hashValue)
        hasher.combine(numberOfPages?.hashValue)
        hasher.combine(numberOfRecipients?.hashValue)
        hasher.combine(numberOfSends?.hashValue)
        hasher.combine(numberOfSigners?.hashValue)
        hasher.combine(numberOfTotalDocuments?.hashValue)
        hasher.combine(numberOfTotalPages?.hashValue)
        hasher.combine(numberOfTotalSigners?.hashValue)
        hasher.combine(numberOfUniqueSenders?.hashValue)
        hasher.combine(numberTotalRecipients?.hashValue)
        hasher.combine(periodEnd?.hashValue)
        hasher.combine(periodStart?.hashValue)
        hasher.combine(phoneCallsAttempted?.hashValue)
        hasher.combine(phoneCallsFailed?.hashValue)
        hasher.combine(reasonForDeclining?.hashValue)
        hasher.combine(reasonForVoiding?.hashValue)
        hasher.combine(reassignReason?.hashValue)
        hasher.combine(received?.hashValue)
        hasher.combine(recipient?.hashValue)
        hasher.combine(recipientAction?.hashValue)
        hasher.combine(recipientCompanyName?.hashValue)
        hasher.combine(recipientCountry?.hashValue)
        hasher.combine(recipientEmail?.hashValue)
        hasher.combine(recipientId?.hashValue)
        hasher.combine(recipientName?.hashValue)
        hasher.combine(recipientTemplateRoleName?.hashValue)
        hasher.combine(recipientTitle?.hashValue)
        hasher.combine(recipientType?.hashValue)
        hasher.combine(recipientUserId?.hashValue)
        hasher.combine(remainingSignatures?.hashValue)
        hasher.combine(routingOrder?.hashValue)
        hasher.combine(senderAccountId?.hashValue)
        hasher.combine(senderCompanyName?.hashValue)
        hasher.combine(senderCountry?.hashValue)
        hasher.combine(senderEmail?.hashValue)
        hasher.combine(senderIPAddress?.hashValue)
        hasher.combine(senderJobTitle?.hashValue)
        hasher.combine(senderName?.hashValue)
        hasher.combine(senderUserId?.hashValue)
        hasher.combine(signDate?.hashValue)
        hasher.combine(signed?.hashValue)
        hasher.combine(signedDate?.hashValue)
        hasher.combine(signedOnMobile?.hashValue)
        hasher.combine(signedOnPaper?.hashValue)
        hasher.combine(signerList?.hashValue)
        hasher.combine(status?.hashValue)
        hasher.combine(statusChangedDate?.hashValue)
        hasher.combine(statusChangedTs?.hashValue)
        hasher.combine(subject?.hashValue)
        hasher.combine(successes?.hashValue)
        hasher.combine(templatesCreated?.hashValue)
        hasher.combine(templatesCreatedCount?.hashValue)
        hasher.combine(terminalStatusDate?.hashValue)
        hasher.combine(timeToCompleteSeconds?.hashValue)
        hasher.combine(timeToDeliver?.hashValue)
        hasher.combine(totalDocuments?.hashValue)
        hasher.combine(totalEnvelopes?.hashValue)
        hasher.combine(totalPages?.hashValue)
        hasher.combine(totalRecipients?.hashValue)
        hasher.combine(totalSigners?.hashValue)
        hasher.combine(uniqueSenders?.hashValue)
        hasher.combine(userAccountEmail?.hashValue)
        hasher.combine(userAccountName?.hashValue)
        hasher.combine(userAccountStatus?.hashValue)
        hasher.combine(userCount?.hashValue)
        hasher.combine(userId?.hashValue)
        hasher.combine(viewDate?.hashValue)
        hasher.combine(voidedTs?.hashValue)
    }
}

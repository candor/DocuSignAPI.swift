//
// Services.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** API service information */
public final class Services: Content {
    /** Reserved: TBD */
    public var buildBranch: String?
    /** Reserved: TBD */
    public var buildBranchDeployedDateTime: String?
    /** Reserved: TBD */
    public var buildSHA: String?
    /** Reserved: TBD */
    public var buildVersion: String?
    /**  */
    public var linkedSites: [String]?
    /**  */
    public var serviceVersions: [ServiceVersion]?

    public init(buildBranch: String? = nil, buildBranchDeployedDateTime: String? = nil, buildSHA: String? = nil, buildVersion: String? = nil, linkedSites: [String]? = nil, serviceVersions: [ServiceVersion]? = nil) {
        self.buildBranch = buildBranch
        self.buildBranchDeployedDateTime = buildBranchDeployedDateTime
        self.buildSHA = buildSHA
        self.buildVersion = buildVersion
        self.linkedSites = linkedSites
        self.serviceVersions = serviceVersions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case buildBranch
        case buildBranchDeployedDateTime
        case buildSHA
        case buildVersion
        case linkedSites
        case serviceVersions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(buildBranch, forKey: .buildBranch)
        try container.encodeIfPresent(buildBranchDeployedDateTime, forKey: .buildBranchDeployedDateTime)
        try container.encodeIfPresent(buildSHA, forKey: .buildSHA)
        try container.encodeIfPresent(buildVersion, forKey: .buildVersion)
        try container.encodeIfPresent(linkedSites, forKey: .linkedSites)
        try container.encodeIfPresent(serviceVersions, forKey: .serviceVersions)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        buildBranch = try container.decodeIfPresent(String.self, forKey: .buildBranch)
        buildBranchDeployedDateTime = try container.decodeIfPresent(String.self, forKey: .buildBranchDeployedDateTime)
        buildSHA = try container.decodeIfPresent(String.self, forKey: .buildSHA)
        buildVersion = try container.decodeIfPresent(String.self, forKey: .buildVersion)
        linkedSites = try container.decodeIfPresent([String].self, forKey: .linkedSites)
        serviceVersions = try container.decodeIfPresent([ServiceVersion].self, forKey: .serviceVersions)
    }
}

extension Services: Hashable {
    public static func == (lhs: Services, rhs: Services) -> Bool {
        lhs.buildBranch == rhs.buildBranch &&
            lhs.buildBranchDeployedDateTime == rhs.buildBranchDeployedDateTime &&
            lhs.buildSHA == rhs.buildSHA &&
            lhs.buildVersion == rhs.buildVersion &&
            lhs.linkedSites == rhs.linkedSites &&
            lhs.serviceVersions == rhs.serviceVersions
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(buildBranch?.hashValue)
        hasher.combine(buildBranchDeployedDateTime?.hashValue)
        hasher.combine(buildSHA?.hashValue)
        hasher.combine(buildVersion?.hashValue)
        hasher.combine(linkedSites?.hashValue)
        hasher.combine(serviceVersions?.hashValue)
    }
}

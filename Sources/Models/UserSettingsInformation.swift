//
// UserSettingsInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Properties that configure the settings for a user. Some elements of this object have a &#x60;metadata&#x60; property, which includes the following: - &#x60;rights&#x60;: The calling users permissions to edit this setting (can be &#x60;editable&#x60; or &#x60;read_only&#x60;) - &#x60;uiHint&#x60;: Internally used to build UIs (can be &#x60;available&#x60; or &#x60;hidden&#x60;) - &#x60;options&#x60;: The values supported for this setting (not all settings have this element) */
public final class UserSettingsInformation: Content {
    public var accountManagementGranular: UserAccountManagementGranularInformation?
    /** Reserved for DocuSign. */
    public var adminOnly: String?
    public var adminOnlyMetadata: SettingsMetadata?
    /** When set to **true**, the API returns suggested tabs for documents for this user. */
    public var allowAutoTagging: String?
    /** When set to **true**, this user can participate in envelope transfers on the account. */
    public var allowEnvelopeTransferTo: String?
    public var allowEnvelopeTransferToMetadata: SettingsMetadata?
    /** When set to **true**, this user can create [electronic seal recipients][eseal].  [eseal]: /esign/restapi//Envelopes/EnvelopeRecipients#seal-recipient */
    public var allowEsealRecipients: String?
    public var allowEsealRecipientsMetadata: SettingsMetadata?
    /** When set to **true** and this user is an administrator, they can view all of the envelopes generated from PowerForms. The default value is **false**. */
    public var allowPowerFormsAdminToAccessAllPowerFormEnvelope: String?
    public var allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata: SettingsMetadata?
    /** When set to **true**, this user can set the language used in the standard email format for a recipient when creating an envelope. */
    public var allowRecipientLanguageSelection: String?
    public var allowRecipientLanguageSelectionMetadata: SettingsMetadata?
    /** When set to **true**, this user can send envelopes \"on behalf of\" other users through the API. */
    public var allowSendOnBehalfOf: String?
    public var allowSendOnBehalfOfMetadata: SettingsMetadata?
    /** When **true**, this user can include supplemental documents. */
    public var allowSupplementalDocuments: String?
    public var allowSupplementalDocumentsMetadata: SettingsMetadata?
    /** Reserved for DocuSign.  */
    public var anchorTagVersionedPlacementEnabled: String?
    /** When **true**, indicates that this user can send envelope-specific API requests on the account. */
    public var apiAccountWideAccess: String?
    public var apiAccountWideAccessMetadata: SettingsMetadata?
    /** When **true**, this user can export authoritative copy for the account. */
    public var apiCanExportAC: String?
    public var apiCanExportACMetadata: SettingsMetadata?
    /** When **true**, this user can use the bulk send feature for the account. */
    public var bulkSend: String?
    public var bulkSendMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var canChargeAccount: String?
    public var canChargeAccountMetadata: SettingsMetadata?
    /** When true, this user can edit the shared address book for the account. */
    public var canEditSharedAddressbook: String?
    public var canEditSharedAddressbookMetadata: SettingsMetadata?
    /** When set to **true**, this user can lock envelopes. */
    public var canLockEnvelopes: String?
    public var canLockEnvelopesMetadata: SettingsMetadata?
    /** When **true**, this user is an administrator for the account. */
    public var canManageAccount: String?
    public var canManageAccountMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var canManageDistributor: String?
    public var canManageDistributorMetadata: SettingsMetadata?
    /** When **true**, this user can manage templates for the account. */
    public var canManageTemplates: String?
    public var canManageTemplatesMetadata: SettingsMetadata?
    /** When **true**, this user can send API requests on the account. */
    public var canSendAPIRequests: String?
    public var canSendAPIRequestsMetadata: SettingsMetadata?
    /** When **true**, this user can send envelopes on the account. */
    public var canSendEnvelope: String?
    public var canSendEnvelopeMetadata: SettingsMetadata?
    /** When **true**, this user can sign envelopes. */
    public var canSignEnvelope: String?
    public var canSignEnvelopeMetadata: SettingsMetadata?
    /** When set to **true**, this user can use a scratchpad to edit information. */
    public var canUseScratchpad: String?
    public var canUseScratchpadMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var canUseSmartContracts: String?
    public var canUseSmartContractsMetadata: SettingsMetadata?
    /** When **true**, this user is prohibited from uploading documents during sending. */
    public var disableDocumentUpload: String?
    public var disableDocumentUploadMetadata: SettingsMetadata?
    /** When **true**, this user can access the **Other Actions** menu. */
    public var disableOtherActions: String?
    public var disableOtherActionsMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableDSPro: String?
    public var enableDSProMetadata: SettingsMetadata?
    /** When set to **true**, the account can define the routing order of recipients for envelopes sent by using the eSignature API.  **Note**: Only SysAdmin users can change this setting. */
    public var enableSequentialSigningAPI: String?
    public var enableSequentialSigningAPIMetadata: SettingsMetadata?
    /** When set to **true**, the account can define the routing order of recipients for envelopes sent by using the DocuSign application.  **Note**: Only SysAdmin users can change this setting.  */
    public var enableSequentialSigningUI: String?
    public var enableSequentialSigningUIMetadata: SettingsMetadata?
    /** When **true**, this user can use the signing attachments feature. */
    public var enableSignerAttachments: String?
    public var enableSignerAttachmentsMetadata: SettingsMetadata?
    /** When set to **true**, a user can override the default default account setting for the Sign on Paper option, which specifies whether signers can sign documents on paper as an option to signing electronically.  **Note**: Only Admin users can change this setting. */
    public var enableSignOnPaperOverride: String?
    public var enableSignOnPaperOverrideMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var enableTransactionPoint: String?
    public var enableTransactionPointMetadata: SettingsMetadata?
    /** When set to **true**, Vaulting is enabled for the account. */
    public var enableVaulting: String?
    public var enableVaultingMetadata: SettingsMetadata?
    /** When set to **false**, this user can apply tabs to documents during the sending experience. */
    public var expressSendOnly: String?
    /** The user's locale code. Valid values are: - `zh_CN` - `zh_TW` - `nl` - `en` - `fr` - `de` - `it` - `ja` - `ko` - `pt` - `pt_BR` - `ru` - `es` */
    public var locale: String?
    public var localeMetadata: SettingsMetadata?
    public var localePolicy: LocalePolicy?
    /** When set to **true**, this user can create and manage [Clickwraps](https://developers.docusign.com/click-api). */
    public var manageClickwrapsMode: String?
    public var manageClickwrapsModeMetadata: SettingsMetadata?
    /** The user id (GUID) of the user who last modified this user record. */
    public var modifiedBy: String?
    public var modifiedByMetadata: SettingsMetadata?
    /** The date on which this user record was last modified. */
    public var modifiedDate: String?
    public var modifiedDateMetadata: SettingsMetadata?
    /** Note referencing the page that modified this user record. */
    public var modifiedPage: String?
    public var modifiedPageMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var newSendUI: String?
    public var newSendUIMetadata: SettingsMetadata?
    /** Indicates the Power Form mode setting for the user: - `none` - `admin` - `user` */
    public var powerFormMode: String?
    public var powerFormModeMetadata: SettingsMetadata?
    /** When **true**, this user receives notifications when envelopes are viewed. */
    public var recipientViewedNotification: String?
    public var recipientViewedNotificationMetadata: SettingsMetadata?
    /** Information about the seals associated with this user. */
    public var sealIdentifiers: [SealIdentifier]?
    /** Sets how self-signed documents are presented to the email recipients. Valid values are:  - `include_pdf`: A PDF of the completed document is attached to the email. - `include_link`: A secure link to the self-signed documents is included    in the email.  **Note**: Only Admin users can change this setting.  */
    public var selfSignedRecipientEmailDocument: String?
    public var selfSignedRecipientEmailDocumentMetadata: SettingsMetadata?
    public var senderEmailNotifications: SenderEmailNotifications?
    public var signerEmailNotifications: SignerEmailNotifications?
    /** When **true**, this user gets supplemental documents when downloading documents. */
    public var supplementalDocumentIncludeInDownload: String?
    /** When **true**, this user must accept supplemental documents. */
    public var supplementalDocumentsMustAccept: String?
    public var supplementalDocumentsMustAcceptMetadata: SettingsMetadata?
    /** When **true**, this user must both view and accept supplemental documents. */
    public var supplementalDocumentsMustRead: String?
    public var supplementalDocumentsMustReadMetadata: SettingsMetadata?
    /** When **true**, this user must view supplemental documents. */
    public var supplementalDocumentsMustView: String?
    public var supplementalDocumentsMustViewMetadata: SettingsMetadata?
    /** When set to **true**, a new template is created each time the user sends an envelope. */
    public var templateActiveCreation: String?
    public var templateActiveCreationMetadata: SettingsMetadata?
    /** When set to **true**, the system notifies this user before applying a matching template. */
    public var templateApplyNotify: String?
    public var templateApplyNotifyMetadata: SettingsMetadata?
    /** When set to **true**, the system automatically applies a matching template to a document if only one template matches. If there are multiple matches, it displays a list of matches to select from. */
    public var templateAutoMatching: String?
    public var templateAutoMatchingMetadata: SettingsMetadata?
    /** Percentage used when matching templates. */
    public var templateMatchingSensitivity: String?
    public var templateMatchingSensitivityMetadata: SettingsMetadata?
    /** When **true**, users see template matching functionality. */
    public var templatePageLevelMatching: String?
    public var templatePageLevelMatchingMetadata: SettingsMetadata?
    /** When true, daylight savings time is in effect for this user's time zone. */
    public var timezoneDST: String?
    public var timezoneDSTMetadata: SettingsMetadata?
    /** The custom DateTime format setting for this user. */
    public var timezoneMask: String?
    public var timezoneMaskMetadata: SettingsMetadata?
    /** The timezone offset for the user. Valid values: - `tz_01_afghanistan` - `tz_02_alaskan` - `tz_03_arab` - `tz_04_arabian` - `tz_05_arabic` - `tz_06_argentina` - `tz_07_atlantic` - `tz_08_aus_central` - `tz_09_aus_eastern` - `tz_10_azerbaijan` - `tz_11_azores` - `tz_12_bangladesh` - `tz_13_canada_central` - `tz_14_cape_verde` - `tz_15_caucasus` - `tz_16_central_australia` - `tz_17_central_america` - `tz_18_central_asia` - `tz_19_central_brazilian` - `tz_20_central_europe` - `tz_21_central_european` - `tz_22_central_pacific` - `tz_23_central` - `tz_24_central_mexico` - `tz_25_china` - `tz_26_dateline` - `tz_27_east_africa` - `tz_28_east_australia` - `tz_29_east_europe` - `tz_30_east_south_america` - `tz_31_eastern` - `tz_32_egypt` - `tz_33_ekaterinburg` - `tz_34_fiji` - `tz_35_fli` - `tz_36_georgian` - `tz_37_gmt` - `tz_38_greenland` - `tz_39_greenwich` - `tz_40_gtb` - `tz_41_hawaiian` - `tz_42_india` - `tz_43_iran` - `tz_44_israel` - `tz_45_jordan` - `tz_46_kaliningrad` - `tz_47_kamchatka` - `tz_48_korea` - `tz_49_magadan` - `tz_50_mauritius` - `tz_51_mid_atlantic` - `tz_52_middle_east` - `tz_53_montevideo` - `tz_54_morocco` - `tz_55_mountain` - `tz_56_mountain_mexico` - `tz_57_myanmar` - `tz_58_north_central_asia` - `tz_59_namibia` - `tz_60_nepal` - `tz_61_new_zealand` - `tz_62_new_foundland` - `tz_63_north_asia_east` - `tz_64_north_asia` - `tz_65_pacific_sa` - `tz_66_pacific` - `tz_67_pacific_mexico` - `tz_68_pakistan` - `tz_69_paraguay` - `tz_70_romance` - `tz_71_russian` - `tz_72_sa_eastern` - `tz_73_sa_pacific` - `tz_74_sa_western` - `tz_75_samoa` - `tz_76_se_asia` - `tz_77_singapore` - `tz_78_south_africa` - `tz_79_sriLanka` - `tz_80_syria` - `tz_81_taipei` - `tz_82_tasmania` - `tz_83_tokyo` - `tz_84_tonga` - `tz_85_turkey` - `tz_86_ulaanbaatar` - `tz_87_us_eastern` - `tz_88_us_mountain` - `tz_89_venezuela` - `tz_90_vladivostok` - `tz_91_west_australia` - `tz_92_west_central_africa` - `tz_93_west_europe` - `tz_94_west_asia` - `tz_95_west_pacific` - `tz_96_yakutsk` */
    public var timezoneOffset: String?
    public var timezoneOffsetMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var timezoneSendingPref: String?
    public var timezoneSendingPrefMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var timezoneSigningPref: String?
    public var timezoneSigningPrefMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var transactionPointSiteNameURL: String?
    public var transactionPointSiteNameURLMetadata: SettingsMetadata?
    /** Reserved for DocuSign. */
    public var transactionPointUserName: String?
    public var transactionPointUserNameMetadata: SettingsMetadata?
    /** Indicates the specified Vaulting mode: - `none` - `estored` - `electronic_original` */
    public var vaultingMode: String?
    public var vaultingModeMetadata: SettingsMetadata?

    public init(accountManagementGranular: UserAccountManagementGranularInformation? = nil, adminOnly: String? = nil, adminOnlyMetadata: SettingsMetadata? = nil, allowAutoTagging: String? = nil, allowEnvelopeTransferTo: String? = nil, allowEnvelopeTransferToMetadata: SettingsMetadata? = nil, allowEsealRecipients: String? = nil, allowEsealRecipientsMetadata: SettingsMetadata? = nil, allowPowerFormsAdminToAccessAllPowerFormEnvelope: String? = nil, allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata: SettingsMetadata? = nil, allowRecipientLanguageSelection: String? = nil, allowRecipientLanguageSelectionMetadata: SettingsMetadata? = nil, allowSendOnBehalfOf: String? = nil, allowSendOnBehalfOfMetadata: SettingsMetadata? = nil, allowSupplementalDocuments: String? = nil, allowSupplementalDocumentsMetadata: SettingsMetadata? = nil, anchorTagVersionedPlacementEnabled: String? = nil, apiAccountWideAccess: String? = nil, apiAccountWideAccessMetadata: SettingsMetadata? = nil, apiCanExportAC: String? = nil, apiCanExportACMetadata: SettingsMetadata? = nil, bulkSend: String? = nil, bulkSendMetadata: SettingsMetadata? = nil, canChargeAccount: String? = nil, canChargeAccountMetadata: SettingsMetadata? = nil, canEditSharedAddressbook: String? = nil, canEditSharedAddressbookMetadata: SettingsMetadata? = nil, canLockEnvelopes: String? = nil, canLockEnvelopesMetadata: SettingsMetadata? = nil, canManageAccount: String? = nil, canManageAccountMetadata: SettingsMetadata? = nil, canManageDistributor: String? = nil, canManageDistributorMetadata: SettingsMetadata? = nil, canManageTemplates: String? = nil, canManageTemplatesMetadata: SettingsMetadata? = nil, canSendAPIRequests: String? = nil, canSendAPIRequestsMetadata: SettingsMetadata? = nil, canSendEnvelope: String? = nil, canSendEnvelopeMetadata: SettingsMetadata? = nil, canSignEnvelope: String? = nil, canSignEnvelopeMetadata: SettingsMetadata? = nil, canUseScratchpad: String? = nil, canUseScratchpadMetadata: SettingsMetadata? = nil, canUseSmartContracts: String? = nil, canUseSmartContractsMetadata: SettingsMetadata? = nil, disableDocumentUpload: String? = nil, disableDocumentUploadMetadata: SettingsMetadata? = nil, disableOtherActions: String? = nil, disableOtherActionsMetadata: SettingsMetadata? = nil, enableDSPro: String? = nil, enableDSProMetadata: SettingsMetadata? = nil, enableSequentialSigningAPI: String? = nil, enableSequentialSigningAPIMetadata: SettingsMetadata? = nil, enableSequentialSigningUI: String? = nil, enableSequentialSigningUIMetadata: SettingsMetadata? = nil, enableSignerAttachments: String? = nil, enableSignerAttachmentsMetadata: SettingsMetadata? = nil, enableSignOnPaperOverride: String? = nil, enableSignOnPaperOverrideMetadata: SettingsMetadata? = nil, enableTransactionPoint: String? = nil, enableTransactionPointMetadata: SettingsMetadata? = nil, enableVaulting: String? = nil, enableVaultingMetadata: SettingsMetadata? = nil, expressSendOnly: String? = nil, locale: String? = nil, localeMetadata: SettingsMetadata? = nil, localePolicy: LocalePolicy? = nil, manageClickwrapsMode: String? = nil, manageClickwrapsModeMetadata: SettingsMetadata? = nil, modifiedBy: String? = nil, modifiedByMetadata: SettingsMetadata? = nil, modifiedDate: String? = nil, modifiedDateMetadata: SettingsMetadata? = nil, modifiedPage: String? = nil, modifiedPageMetadata: SettingsMetadata? = nil, newSendUI: String? = nil, newSendUIMetadata: SettingsMetadata? = nil, powerFormMode: String? = nil, powerFormModeMetadata: SettingsMetadata? = nil, recipientViewedNotification: String? = nil, recipientViewedNotificationMetadata: SettingsMetadata? = nil, sealIdentifiers: [SealIdentifier]? = nil, selfSignedRecipientEmailDocument: String? = nil, selfSignedRecipientEmailDocumentMetadata: SettingsMetadata? = nil, senderEmailNotifications: SenderEmailNotifications? = nil, signerEmailNotifications: SignerEmailNotifications? = nil, supplementalDocumentIncludeInDownload: String? = nil, supplementalDocumentsMustAccept: String? = nil, supplementalDocumentsMustAcceptMetadata: SettingsMetadata? = nil, supplementalDocumentsMustRead: String? = nil, supplementalDocumentsMustReadMetadata: SettingsMetadata? = nil, supplementalDocumentsMustView: String? = nil, supplementalDocumentsMustViewMetadata: SettingsMetadata? = nil, templateActiveCreation: String? = nil, templateActiveCreationMetadata: SettingsMetadata? = nil, templateApplyNotify: String? = nil, templateApplyNotifyMetadata: SettingsMetadata? = nil, templateAutoMatching: String? = nil, templateAutoMatchingMetadata: SettingsMetadata? = nil, templateMatchingSensitivity: String? = nil, templateMatchingSensitivityMetadata: SettingsMetadata? = nil, templatePageLevelMatching: String? = nil, templatePageLevelMatchingMetadata: SettingsMetadata? = nil, timezoneDST: String? = nil, timezoneDSTMetadata: SettingsMetadata? = nil, timezoneMask: String? = nil, timezoneMaskMetadata: SettingsMetadata? = nil, timezoneOffset: String? = nil, timezoneOffsetMetadata: SettingsMetadata? = nil, timezoneSendingPref: String? = nil, timezoneSendingPrefMetadata: SettingsMetadata? = nil, timezoneSigningPref: String? = nil, timezoneSigningPrefMetadata: SettingsMetadata? = nil, transactionPointSiteNameURL: String? = nil, transactionPointSiteNameURLMetadata: SettingsMetadata? = nil, transactionPointUserName: String? = nil, transactionPointUserNameMetadata: SettingsMetadata? = nil, vaultingMode: String? = nil, vaultingModeMetadata: SettingsMetadata? = nil) {
        self.accountManagementGranular = accountManagementGranular
        self.adminOnly = adminOnly
        self.adminOnlyMetadata = adminOnlyMetadata
        self.allowAutoTagging = allowAutoTagging
        self.allowEnvelopeTransferTo = allowEnvelopeTransferTo
        self.allowEnvelopeTransferToMetadata = allowEnvelopeTransferToMetadata
        self.allowEsealRecipients = allowEsealRecipients
        self.allowEsealRecipientsMetadata = allowEsealRecipientsMetadata
        self.allowPowerFormsAdminToAccessAllPowerFormEnvelope = allowPowerFormsAdminToAccessAllPowerFormEnvelope
        self.allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata = allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata
        self.allowRecipientLanguageSelection = allowRecipientLanguageSelection
        self.allowRecipientLanguageSelectionMetadata = allowRecipientLanguageSelectionMetadata
        self.allowSendOnBehalfOf = allowSendOnBehalfOf
        self.allowSendOnBehalfOfMetadata = allowSendOnBehalfOfMetadata
        self.allowSupplementalDocuments = allowSupplementalDocuments
        self.allowSupplementalDocumentsMetadata = allowSupplementalDocumentsMetadata
        self.anchorTagVersionedPlacementEnabled = anchorTagVersionedPlacementEnabled
        self.apiAccountWideAccess = apiAccountWideAccess
        self.apiAccountWideAccessMetadata = apiAccountWideAccessMetadata
        self.apiCanExportAC = apiCanExportAC
        self.apiCanExportACMetadata = apiCanExportACMetadata
        self.bulkSend = bulkSend
        self.bulkSendMetadata = bulkSendMetadata
        self.canChargeAccount = canChargeAccount
        self.canChargeAccountMetadata = canChargeAccountMetadata
        self.canEditSharedAddressbook = canEditSharedAddressbook
        self.canEditSharedAddressbookMetadata = canEditSharedAddressbookMetadata
        self.canLockEnvelopes = canLockEnvelopes
        self.canLockEnvelopesMetadata = canLockEnvelopesMetadata
        self.canManageAccount = canManageAccount
        self.canManageAccountMetadata = canManageAccountMetadata
        self.canManageDistributor = canManageDistributor
        self.canManageDistributorMetadata = canManageDistributorMetadata
        self.canManageTemplates = canManageTemplates
        self.canManageTemplatesMetadata = canManageTemplatesMetadata
        self.canSendAPIRequests = canSendAPIRequests
        self.canSendAPIRequestsMetadata = canSendAPIRequestsMetadata
        self.canSendEnvelope = canSendEnvelope
        self.canSendEnvelopeMetadata = canSendEnvelopeMetadata
        self.canSignEnvelope = canSignEnvelope
        self.canSignEnvelopeMetadata = canSignEnvelopeMetadata
        self.canUseScratchpad = canUseScratchpad
        self.canUseScratchpadMetadata = canUseScratchpadMetadata
        self.canUseSmartContracts = canUseSmartContracts
        self.canUseSmartContractsMetadata = canUseSmartContractsMetadata
        self.disableDocumentUpload = disableDocumentUpload
        self.disableDocumentUploadMetadata = disableDocumentUploadMetadata
        self.disableOtherActions = disableOtherActions
        self.disableOtherActionsMetadata = disableOtherActionsMetadata
        self.enableDSPro = enableDSPro
        self.enableDSProMetadata = enableDSProMetadata
        self.enableSequentialSigningAPI = enableSequentialSigningAPI
        self.enableSequentialSigningAPIMetadata = enableSequentialSigningAPIMetadata
        self.enableSequentialSigningUI = enableSequentialSigningUI
        self.enableSequentialSigningUIMetadata = enableSequentialSigningUIMetadata
        self.enableSignerAttachments = enableSignerAttachments
        self.enableSignerAttachmentsMetadata = enableSignerAttachmentsMetadata
        self.enableSignOnPaperOverride = enableSignOnPaperOverride
        self.enableSignOnPaperOverrideMetadata = enableSignOnPaperOverrideMetadata
        self.enableTransactionPoint = enableTransactionPoint
        self.enableTransactionPointMetadata = enableTransactionPointMetadata
        self.enableVaulting = enableVaulting
        self.enableVaultingMetadata = enableVaultingMetadata
        self.expressSendOnly = expressSendOnly
        self.locale = locale
        self.localeMetadata = localeMetadata
        self.localePolicy = localePolicy
        self.manageClickwrapsMode = manageClickwrapsMode
        self.manageClickwrapsModeMetadata = manageClickwrapsModeMetadata
        self.modifiedBy = modifiedBy
        self.modifiedByMetadata = modifiedByMetadata
        self.modifiedDate = modifiedDate
        self.modifiedDateMetadata = modifiedDateMetadata
        self.modifiedPage = modifiedPage
        self.modifiedPageMetadata = modifiedPageMetadata
        self.newSendUI = newSendUI
        self.newSendUIMetadata = newSendUIMetadata
        self.powerFormMode = powerFormMode
        self.powerFormModeMetadata = powerFormModeMetadata
        self.recipientViewedNotification = recipientViewedNotification
        self.recipientViewedNotificationMetadata = recipientViewedNotificationMetadata
        self.sealIdentifiers = sealIdentifiers
        self.selfSignedRecipientEmailDocument = selfSignedRecipientEmailDocument
        self.selfSignedRecipientEmailDocumentMetadata = selfSignedRecipientEmailDocumentMetadata
        self.senderEmailNotifications = senderEmailNotifications
        self.signerEmailNotifications = signerEmailNotifications
        self.supplementalDocumentIncludeInDownload = supplementalDocumentIncludeInDownload
        self.supplementalDocumentsMustAccept = supplementalDocumentsMustAccept
        self.supplementalDocumentsMustAcceptMetadata = supplementalDocumentsMustAcceptMetadata
        self.supplementalDocumentsMustRead = supplementalDocumentsMustRead
        self.supplementalDocumentsMustReadMetadata = supplementalDocumentsMustReadMetadata
        self.supplementalDocumentsMustView = supplementalDocumentsMustView
        self.supplementalDocumentsMustViewMetadata = supplementalDocumentsMustViewMetadata
        self.templateActiveCreation = templateActiveCreation
        self.templateActiveCreationMetadata = templateActiveCreationMetadata
        self.templateApplyNotify = templateApplyNotify
        self.templateApplyNotifyMetadata = templateApplyNotifyMetadata
        self.templateAutoMatching = templateAutoMatching
        self.templateAutoMatchingMetadata = templateAutoMatchingMetadata
        self.templateMatchingSensitivity = templateMatchingSensitivity
        self.templateMatchingSensitivityMetadata = templateMatchingSensitivityMetadata
        self.templatePageLevelMatching = templatePageLevelMatching
        self.templatePageLevelMatchingMetadata = templatePageLevelMatchingMetadata
        self.timezoneDST = timezoneDST
        self.timezoneDSTMetadata = timezoneDSTMetadata
        self.timezoneMask = timezoneMask
        self.timezoneMaskMetadata = timezoneMaskMetadata
        self.timezoneOffset = timezoneOffset
        self.timezoneOffsetMetadata = timezoneOffsetMetadata
        self.timezoneSendingPref = timezoneSendingPref
        self.timezoneSendingPrefMetadata = timezoneSendingPrefMetadata
        self.timezoneSigningPref = timezoneSigningPref
        self.timezoneSigningPrefMetadata = timezoneSigningPrefMetadata
        self.transactionPointSiteNameURL = transactionPointSiteNameURL
        self.transactionPointSiteNameURLMetadata = transactionPointSiteNameURLMetadata
        self.transactionPointUserName = transactionPointUserName
        self.transactionPointUserNameMetadata = transactionPointUserNameMetadata
        self.vaultingMode = vaultingMode
        self.vaultingModeMetadata = vaultingModeMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountManagementGranular
        case adminOnly
        case adminOnlyMetadata
        case allowAutoTagging
        case allowEnvelopeTransferTo
        case allowEnvelopeTransferToMetadata
        case allowEsealRecipients
        case allowEsealRecipientsMetadata
        case allowPowerFormsAdminToAccessAllPowerFormEnvelope
        case allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata
        case allowRecipientLanguageSelection
        case allowRecipientLanguageSelectionMetadata
        case allowSendOnBehalfOf
        case allowSendOnBehalfOfMetadata
        case allowSupplementalDocuments
        case allowSupplementalDocumentsMetadata
        case anchorTagVersionedPlacementEnabled
        case apiAccountWideAccess
        case apiAccountWideAccessMetadata
        case apiCanExportAC
        case apiCanExportACMetadata
        case bulkSend
        case bulkSendMetadata
        case canChargeAccount
        case canChargeAccountMetadata
        case canEditSharedAddressbook
        case canEditSharedAddressbookMetadata
        case canLockEnvelopes
        case canLockEnvelopesMetadata
        case canManageAccount
        case canManageAccountMetadata
        case canManageDistributor
        case canManageDistributorMetadata
        case canManageTemplates
        case canManageTemplatesMetadata
        case canSendAPIRequests
        case canSendAPIRequestsMetadata
        case canSendEnvelope
        case canSendEnvelopeMetadata
        case canSignEnvelope
        case canSignEnvelopeMetadata
        case canUseScratchpad
        case canUseScratchpadMetadata
        case canUseSmartContracts
        case canUseSmartContractsMetadata
        case disableDocumentUpload
        case disableDocumentUploadMetadata
        case disableOtherActions
        case disableOtherActionsMetadata
        case enableDSPro
        case enableDSProMetadata
        case enableSequentialSigningAPI
        case enableSequentialSigningAPIMetadata
        case enableSequentialSigningUI
        case enableSequentialSigningUIMetadata
        case enableSignerAttachments
        case enableSignerAttachmentsMetadata
        case enableSignOnPaperOverride
        case enableSignOnPaperOverrideMetadata
        case enableTransactionPoint
        case enableTransactionPointMetadata
        case enableVaulting
        case enableVaultingMetadata
        case expressSendOnly
        case locale
        case localeMetadata
        case localePolicy
        case manageClickwrapsMode
        case manageClickwrapsModeMetadata
        case modifiedBy
        case modifiedByMetadata
        case modifiedDate
        case modifiedDateMetadata
        case modifiedPage
        case modifiedPageMetadata
        case newSendUI
        case newSendUIMetadata
        case powerFormMode
        case powerFormModeMetadata
        case recipientViewedNotification
        case recipientViewedNotificationMetadata
        case sealIdentifiers
        case selfSignedRecipientEmailDocument
        case selfSignedRecipientEmailDocumentMetadata
        case senderEmailNotifications
        case signerEmailNotifications
        case supplementalDocumentIncludeInDownload
        case supplementalDocumentsMustAccept
        case supplementalDocumentsMustAcceptMetadata
        case supplementalDocumentsMustRead
        case supplementalDocumentsMustReadMetadata
        case supplementalDocumentsMustView
        case supplementalDocumentsMustViewMetadata
        case templateActiveCreation
        case templateActiveCreationMetadata
        case templateApplyNotify
        case templateApplyNotifyMetadata
        case templateAutoMatching
        case templateAutoMatchingMetadata
        case templateMatchingSensitivity
        case templateMatchingSensitivityMetadata
        case templatePageLevelMatching
        case templatePageLevelMatchingMetadata
        case timezoneDST
        case timezoneDSTMetadata
        case timezoneMask
        case timezoneMaskMetadata
        case timezoneOffset
        case timezoneOffsetMetadata
        case timezoneSendingPref
        case timezoneSendingPrefMetadata
        case timezoneSigningPref
        case timezoneSigningPrefMetadata
        case transactionPointSiteNameURL
        case transactionPointSiteNameURLMetadata
        case transactionPointUserName
        case transactionPointUserNameMetadata
        case vaultingMode
        case vaultingModeMetadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(accountManagementGranular, forKey: .accountManagementGranular)
        try container.encodeIfPresent(adminOnly, forKey: .adminOnly)
        try container.encodeIfPresent(adminOnlyMetadata, forKey: .adminOnlyMetadata)
        try container.encodeIfPresent(allowAutoTagging, forKey: .allowAutoTagging)
        try container.encodeIfPresent(allowEnvelopeTransferTo, forKey: .allowEnvelopeTransferTo)
        try container.encodeIfPresent(allowEnvelopeTransferToMetadata, forKey: .allowEnvelopeTransferToMetadata)
        try container.encodeIfPresent(allowEsealRecipients, forKey: .allowEsealRecipients)
        try container.encodeIfPresent(allowEsealRecipientsMetadata, forKey: .allowEsealRecipientsMetadata)
        try container.encodeIfPresent(allowPowerFormsAdminToAccessAllPowerFormEnvelope, forKey: .allowPowerFormsAdminToAccessAllPowerFormEnvelope)
        try container.encodeIfPresent(allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata, forKey: .allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata)
        try container.encodeIfPresent(allowRecipientLanguageSelection, forKey: .allowRecipientLanguageSelection)
        try container.encodeIfPresent(allowRecipientLanguageSelectionMetadata, forKey: .allowRecipientLanguageSelectionMetadata)
        try container.encodeIfPresent(allowSendOnBehalfOf, forKey: .allowSendOnBehalfOf)
        try container.encodeIfPresent(allowSendOnBehalfOfMetadata, forKey: .allowSendOnBehalfOfMetadata)
        try container.encodeIfPresent(allowSupplementalDocuments, forKey: .allowSupplementalDocuments)
        try container.encodeIfPresent(allowSupplementalDocumentsMetadata, forKey: .allowSupplementalDocumentsMetadata)
        try container.encodeIfPresent(anchorTagVersionedPlacementEnabled, forKey: .anchorTagVersionedPlacementEnabled)
        try container.encodeIfPresent(apiAccountWideAccess, forKey: .apiAccountWideAccess)
        try container.encodeIfPresent(apiAccountWideAccessMetadata, forKey: .apiAccountWideAccessMetadata)
        try container.encodeIfPresent(apiCanExportAC, forKey: .apiCanExportAC)
        try container.encodeIfPresent(apiCanExportACMetadata, forKey: .apiCanExportACMetadata)
        try container.encodeIfPresent(bulkSend, forKey: .bulkSend)
        try container.encodeIfPresent(bulkSendMetadata, forKey: .bulkSendMetadata)
        try container.encodeIfPresent(canChargeAccount, forKey: .canChargeAccount)
        try container.encodeIfPresent(canChargeAccountMetadata, forKey: .canChargeAccountMetadata)
        try container.encodeIfPresent(canEditSharedAddressbook, forKey: .canEditSharedAddressbook)
        try container.encodeIfPresent(canEditSharedAddressbookMetadata, forKey: .canEditSharedAddressbookMetadata)
        try container.encodeIfPresent(canLockEnvelopes, forKey: .canLockEnvelopes)
        try container.encodeIfPresent(canLockEnvelopesMetadata, forKey: .canLockEnvelopesMetadata)
        try container.encodeIfPresent(canManageAccount, forKey: .canManageAccount)
        try container.encodeIfPresent(canManageAccountMetadata, forKey: .canManageAccountMetadata)
        try container.encodeIfPresent(canManageDistributor, forKey: .canManageDistributor)
        try container.encodeIfPresent(canManageDistributorMetadata, forKey: .canManageDistributorMetadata)
        try container.encodeIfPresent(canManageTemplates, forKey: .canManageTemplates)
        try container.encodeIfPresent(canManageTemplatesMetadata, forKey: .canManageTemplatesMetadata)
        try container.encodeIfPresent(canSendAPIRequests, forKey: .canSendAPIRequests)
        try container.encodeIfPresent(canSendAPIRequestsMetadata, forKey: .canSendAPIRequestsMetadata)
        try container.encodeIfPresent(canSendEnvelope, forKey: .canSendEnvelope)
        try container.encodeIfPresent(canSendEnvelopeMetadata, forKey: .canSendEnvelopeMetadata)
        try container.encodeIfPresent(canSignEnvelope, forKey: .canSignEnvelope)
        try container.encodeIfPresent(canSignEnvelopeMetadata, forKey: .canSignEnvelopeMetadata)
        try container.encodeIfPresent(canUseScratchpad, forKey: .canUseScratchpad)
        try container.encodeIfPresent(canUseScratchpadMetadata, forKey: .canUseScratchpadMetadata)
        try container.encodeIfPresent(canUseSmartContracts, forKey: .canUseSmartContracts)
        try container.encodeIfPresent(canUseSmartContractsMetadata, forKey: .canUseSmartContractsMetadata)
        try container.encodeIfPresent(disableDocumentUpload, forKey: .disableDocumentUpload)
        try container.encodeIfPresent(disableDocumentUploadMetadata, forKey: .disableDocumentUploadMetadata)
        try container.encodeIfPresent(disableOtherActions, forKey: .disableOtherActions)
        try container.encodeIfPresent(disableOtherActionsMetadata, forKey: .disableOtherActionsMetadata)
        try container.encodeIfPresent(enableDSPro, forKey: .enableDSPro)
        try container.encodeIfPresent(enableDSProMetadata, forKey: .enableDSProMetadata)
        try container.encodeIfPresent(enableSequentialSigningAPI, forKey: .enableSequentialSigningAPI)
        try container.encodeIfPresent(enableSequentialSigningAPIMetadata, forKey: .enableSequentialSigningAPIMetadata)
        try container.encodeIfPresent(enableSequentialSigningUI, forKey: .enableSequentialSigningUI)
        try container.encodeIfPresent(enableSequentialSigningUIMetadata, forKey: .enableSequentialSigningUIMetadata)
        try container.encodeIfPresent(enableSignerAttachments, forKey: .enableSignerAttachments)
        try container.encodeIfPresent(enableSignerAttachmentsMetadata, forKey: .enableSignerAttachmentsMetadata)
        try container.encodeIfPresent(enableSignOnPaperOverride, forKey: .enableSignOnPaperOverride)
        try container.encodeIfPresent(enableSignOnPaperOverrideMetadata, forKey: .enableSignOnPaperOverrideMetadata)
        try container.encodeIfPresent(enableTransactionPoint, forKey: .enableTransactionPoint)
        try container.encodeIfPresent(enableTransactionPointMetadata, forKey: .enableTransactionPointMetadata)
        try container.encodeIfPresent(enableVaulting, forKey: .enableVaulting)
        try container.encodeIfPresent(enableVaultingMetadata, forKey: .enableVaultingMetadata)
        try container.encodeIfPresent(expressSendOnly, forKey: .expressSendOnly)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(localeMetadata, forKey: .localeMetadata)
        try container.encodeIfPresent(localePolicy, forKey: .localePolicy)
        try container.encodeIfPresent(manageClickwrapsMode, forKey: .manageClickwrapsMode)
        try container.encodeIfPresent(manageClickwrapsModeMetadata, forKey: .manageClickwrapsModeMetadata)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encodeIfPresent(modifiedByMetadata, forKey: .modifiedByMetadata)
        try container.encodeIfPresent(modifiedDate, forKey: .modifiedDate)
        try container.encodeIfPresent(modifiedDateMetadata, forKey: .modifiedDateMetadata)
        try container.encodeIfPresent(modifiedPage, forKey: .modifiedPage)
        try container.encodeIfPresent(modifiedPageMetadata, forKey: .modifiedPageMetadata)
        try container.encodeIfPresent(newSendUI, forKey: .newSendUI)
        try container.encodeIfPresent(newSendUIMetadata, forKey: .newSendUIMetadata)
        try container.encodeIfPresent(powerFormMode, forKey: .powerFormMode)
        try container.encodeIfPresent(powerFormModeMetadata, forKey: .powerFormModeMetadata)
        try container.encodeIfPresent(recipientViewedNotification, forKey: .recipientViewedNotification)
        try container.encodeIfPresent(recipientViewedNotificationMetadata, forKey: .recipientViewedNotificationMetadata)
        try container.encodeIfPresent(sealIdentifiers, forKey: .sealIdentifiers)
        try container.encodeIfPresent(selfSignedRecipientEmailDocument, forKey: .selfSignedRecipientEmailDocument)
        try container.encodeIfPresent(selfSignedRecipientEmailDocumentMetadata, forKey: .selfSignedRecipientEmailDocumentMetadata)
        try container.encodeIfPresent(senderEmailNotifications, forKey: .senderEmailNotifications)
        try container.encodeIfPresent(signerEmailNotifications, forKey: .signerEmailNotifications)
        try container.encodeIfPresent(supplementalDocumentIncludeInDownload, forKey: .supplementalDocumentIncludeInDownload)
        try container.encodeIfPresent(supplementalDocumentsMustAccept, forKey: .supplementalDocumentsMustAccept)
        try container.encodeIfPresent(supplementalDocumentsMustAcceptMetadata, forKey: .supplementalDocumentsMustAcceptMetadata)
        try container.encodeIfPresent(supplementalDocumentsMustRead, forKey: .supplementalDocumentsMustRead)
        try container.encodeIfPresent(supplementalDocumentsMustReadMetadata, forKey: .supplementalDocumentsMustReadMetadata)
        try container.encodeIfPresent(supplementalDocumentsMustView, forKey: .supplementalDocumentsMustView)
        try container.encodeIfPresent(supplementalDocumentsMustViewMetadata, forKey: .supplementalDocumentsMustViewMetadata)
        try container.encodeIfPresent(templateActiveCreation, forKey: .templateActiveCreation)
        try container.encodeIfPresent(templateActiveCreationMetadata, forKey: .templateActiveCreationMetadata)
        try container.encodeIfPresent(templateApplyNotify, forKey: .templateApplyNotify)
        try container.encodeIfPresent(templateApplyNotifyMetadata, forKey: .templateApplyNotifyMetadata)
        try container.encodeIfPresent(templateAutoMatching, forKey: .templateAutoMatching)
        try container.encodeIfPresent(templateAutoMatchingMetadata, forKey: .templateAutoMatchingMetadata)
        try container.encodeIfPresent(templateMatchingSensitivity, forKey: .templateMatchingSensitivity)
        try container.encodeIfPresent(templateMatchingSensitivityMetadata, forKey: .templateMatchingSensitivityMetadata)
        try container.encodeIfPresent(templatePageLevelMatching, forKey: .templatePageLevelMatching)
        try container.encodeIfPresent(templatePageLevelMatchingMetadata, forKey: .templatePageLevelMatchingMetadata)
        try container.encodeIfPresent(timezoneDST, forKey: .timezoneDST)
        try container.encodeIfPresent(timezoneDSTMetadata, forKey: .timezoneDSTMetadata)
        try container.encodeIfPresent(timezoneMask, forKey: .timezoneMask)
        try container.encodeIfPresent(timezoneMaskMetadata, forKey: .timezoneMaskMetadata)
        try container.encodeIfPresent(timezoneOffset, forKey: .timezoneOffset)
        try container.encodeIfPresent(timezoneOffsetMetadata, forKey: .timezoneOffsetMetadata)
        try container.encodeIfPresent(timezoneSendingPref, forKey: .timezoneSendingPref)
        try container.encodeIfPresent(timezoneSendingPrefMetadata, forKey: .timezoneSendingPrefMetadata)
        try container.encodeIfPresent(timezoneSigningPref, forKey: .timezoneSigningPref)
        try container.encodeIfPresent(timezoneSigningPrefMetadata, forKey: .timezoneSigningPrefMetadata)
        try container.encodeIfPresent(transactionPointSiteNameURL, forKey: .transactionPointSiteNameURL)
        try container.encodeIfPresent(transactionPointSiteNameURLMetadata, forKey: .transactionPointSiteNameURLMetadata)
        try container.encodeIfPresent(transactionPointUserName, forKey: .transactionPointUserName)
        try container.encodeIfPresent(transactionPointUserNameMetadata, forKey: .transactionPointUserNameMetadata)
        try container.encodeIfPresent(vaultingMode, forKey: .vaultingMode)
        try container.encodeIfPresent(vaultingModeMetadata, forKey: .vaultingModeMetadata)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        accountManagementGranular = try container.decodeIfPresent(UserAccountManagementGranularInformation.self, forKey: .accountManagementGranular)
        adminOnly = try container.decodeIfPresent(String.self, forKey: .adminOnly)
        adminOnlyMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .adminOnlyMetadata)
        allowAutoTagging = try container.decodeIfPresent(String.self, forKey: .allowAutoTagging)
        allowEnvelopeTransferTo = try container.decodeIfPresent(String.self, forKey: .allowEnvelopeTransferTo)
        allowEnvelopeTransferToMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEnvelopeTransferToMetadata)
        allowEsealRecipients = try container.decodeIfPresent(String.self, forKey: .allowEsealRecipients)
        allowEsealRecipientsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowEsealRecipientsMetadata)
        allowPowerFormsAdminToAccessAllPowerFormEnvelope = try container.decodeIfPresent(String.self, forKey: .allowPowerFormsAdminToAccessAllPowerFormEnvelope)
        allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata)
        allowRecipientLanguageSelection = try container.decodeIfPresent(String.self, forKey: .allowRecipientLanguageSelection)
        allowRecipientLanguageSelectionMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowRecipientLanguageSelectionMetadata)
        allowSendOnBehalfOf = try container.decodeIfPresent(String.self, forKey: .allowSendOnBehalfOf)
        allowSendOnBehalfOfMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSendOnBehalfOfMetadata)
        allowSupplementalDocuments = try container.decodeIfPresent(String.self, forKey: .allowSupplementalDocuments)
        allowSupplementalDocumentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .allowSupplementalDocumentsMetadata)
        anchorTagVersionedPlacementEnabled = try container.decodeIfPresent(String.self, forKey: .anchorTagVersionedPlacementEnabled)
        apiAccountWideAccess = try container.decodeIfPresent(String.self, forKey: .apiAccountWideAccess)
        apiAccountWideAccessMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .apiAccountWideAccessMetadata)
        apiCanExportAC = try container.decodeIfPresent(String.self, forKey: .apiCanExportAC)
        apiCanExportACMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .apiCanExportACMetadata)
        bulkSend = try container.decodeIfPresent(String.self, forKey: .bulkSend)
        bulkSendMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .bulkSendMetadata)
        canChargeAccount = try container.decodeIfPresent(String.self, forKey: .canChargeAccount)
        canChargeAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canChargeAccountMetadata)
        canEditSharedAddressbook = try container.decodeIfPresent(String.self, forKey: .canEditSharedAddressbook)
        canEditSharedAddressbookMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canEditSharedAddressbookMetadata)
        canLockEnvelopes = try container.decodeIfPresent(String.self, forKey: .canLockEnvelopes)
        canLockEnvelopesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canLockEnvelopesMetadata)
        canManageAccount = try container.decodeIfPresent(String.self, forKey: .canManageAccount)
        canManageAccountMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canManageAccountMetadata)
        canManageDistributor = try container.decodeIfPresent(String.self, forKey: .canManageDistributor)
        canManageDistributorMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canManageDistributorMetadata)
        canManageTemplates = try container.decodeIfPresent(String.self, forKey: .canManageTemplates)
        canManageTemplatesMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canManageTemplatesMetadata)
        canSendAPIRequests = try container.decodeIfPresent(String.self, forKey: .canSendAPIRequests)
        canSendAPIRequestsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canSendAPIRequestsMetadata)
        canSendEnvelope = try container.decodeIfPresent(String.self, forKey: .canSendEnvelope)
        canSendEnvelopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canSendEnvelopeMetadata)
        canSignEnvelope = try container.decodeIfPresent(String.self, forKey: .canSignEnvelope)
        canSignEnvelopeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canSignEnvelopeMetadata)
        canUseScratchpad = try container.decodeIfPresent(String.self, forKey: .canUseScratchpad)
        canUseScratchpadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canUseScratchpadMetadata)
        canUseSmartContracts = try container.decodeIfPresent(String.self, forKey: .canUseSmartContracts)
        canUseSmartContractsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .canUseSmartContractsMetadata)
        disableDocumentUpload = try container.decodeIfPresent(String.self, forKey: .disableDocumentUpload)
        disableDocumentUploadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableDocumentUploadMetadata)
        disableOtherActions = try container.decodeIfPresent(String.self, forKey: .disableOtherActions)
        disableOtherActionsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .disableOtherActionsMetadata)
        enableDSPro = try container.decodeIfPresent(String.self, forKey: .enableDSPro)
        enableDSProMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableDSProMetadata)
        enableSequentialSigningAPI = try container.decodeIfPresent(String.self, forKey: .enableSequentialSigningAPI)
        enableSequentialSigningAPIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSequentialSigningAPIMetadata)
        enableSequentialSigningUI = try container.decodeIfPresent(String.self, forKey: .enableSequentialSigningUI)
        enableSequentialSigningUIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSequentialSigningUIMetadata)
        enableSignerAttachments = try container.decodeIfPresent(String.self, forKey: .enableSignerAttachments)
        enableSignerAttachmentsMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignerAttachmentsMetadata)
        enableSignOnPaperOverride = try container.decodeIfPresent(String.self, forKey: .enableSignOnPaperOverride)
        enableSignOnPaperOverrideMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableSignOnPaperOverrideMetadata)
        enableTransactionPoint = try container.decodeIfPresent(String.self, forKey: .enableTransactionPoint)
        enableTransactionPointMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableTransactionPointMetadata)
        enableVaulting = try container.decodeIfPresent(String.self, forKey: .enableVaulting)
        enableVaultingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .enableVaultingMetadata)
        expressSendOnly = try container.decodeIfPresent(String.self, forKey: .expressSendOnly)
        locale = try container.decodeIfPresent(String.self, forKey: .locale)
        localeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .localeMetadata)
        localePolicy = try container.decodeIfPresent(LocalePolicy.self, forKey: .localePolicy)
        manageClickwrapsMode = try container.decodeIfPresent(String.self, forKey: .manageClickwrapsMode)
        manageClickwrapsModeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .manageClickwrapsModeMetadata)
        modifiedBy = try container.decodeIfPresent(String.self, forKey: .modifiedBy)
        modifiedByMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .modifiedByMetadata)
        modifiedDate = try container.decodeIfPresent(String.self, forKey: .modifiedDate)
        modifiedDateMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .modifiedDateMetadata)
        modifiedPage = try container.decodeIfPresent(String.self, forKey: .modifiedPage)
        modifiedPageMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .modifiedPageMetadata)
        newSendUI = try container.decodeIfPresent(String.self, forKey: .newSendUI)
        newSendUIMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .newSendUIMetadata)
        powerFormMode = try container.decodeIfPresent(String.self, forKey: .powerFormMode)
        powerFormModeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .powerFormModeMetadata)
        recipientViewedNotification = try container.decodeIfPresent(String.self, forKey: .recipientViewedNotification)
        recipientViewedNotificationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .recipientViewedNotificationMetadata)
        sealIdentifiers = try container.decodeIfPresent([SealIdentifier].self, forKey: .sealIdentifiers)
        selfSignedRecipientEmailDocument = try container.decodeIfPresent(String.self, forKey: .selfSignedRecipientEmailDocument)
        selfSignedRecipientEmailDocumentMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .selfSignedRecipientEmailDocumentMetadata)
        senderEmailNotifications = try container.decodeIfPresent(SenderEmailNotifications.self, forKey: .senderEmailNotifications)
        signerEmailNotifications = try container.decodeIfPresent(SignerEmailNotifications.self, forKey: .signerEmailNotifications)
        supplementalDocumentIncludeInDownload = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentIncludeInDownload)
        supplementalDocumentsMustAccept = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustAccept)
        supplementalDocumentsMustAcceptMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustAcceptMetadata)
        supplementalDocumentsMustRead = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustRead)
        supplementalDocumentsMustReadMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustReadMetadata)
        supplementalDocumentsMustView = try container.decodeIfPresent(String.self, forKey: .supplementalDocumentsMustView)
        supplementalDocumentsMustViewMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .supplementalDocumentsMustViewMetadata)
        templateActiveCreation = try container.decodeIfPresent(String.self, forKey: .templateActiveCreation)
        templateActiveCreationMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .templateActiveCreationMetadata)
        templateApplyNotify = try container.decodeIfPresent(String.self, forKey: .templateApplyNotify)
        templateApplyNotifyMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .templateApplyNotifyMetadata)
        templateAutoMatching = try container.decodeIfPresent(String.self, forKey: .templateAutoMatching)
        templateAutoMatchingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .templateAutoMatchingMetadata)
        templateMatchingSensitivity = try container.decodeIfPresent(String.self, forKey: .templateMatchingSensitivity)
        templateMatchingSensitivityMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .templateMatchingSensitivityMetadata)
        templatePageLevelMatching = try container.decodeIfPresent(String.self, forKey: .templatePageLevelMatching)
        templatePageLevelMatchingMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .templatePageLevelMatchingMetadata)
        timezoneDST = try container.decodeIfPresent(String.self, forKey: .timezoneDST)
        timezoneDSTMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneDSTMetadata)
        timezoneMask = try container.decodeIfPresent(String.self, forKey: .timezoneMask)
        timezoneMaskMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneMaskMetadata)
        timezoneOffset = try container.decodeIfPresent(String.self, forKey: .timezoneOffset)
        timezoneOffsetMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneOffsetMetadata)
        timezoneSendingPref = try container.decodeIfPresent(String.self, forKey: .timezoneSendingPref)
        timezoneSendingPrefMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneSendingPrefMetadata)
        timezoneSigningPref = try container.decodeIfPresent(String.self, forKey: .timezoneSigningPref)
        timezoneSigningPrefMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .timezoneSigningPrefMetadata)
        transactionPointSiteNameURL = try container.decodeIfPresent(String.self, forKey: .transactionPointSiteNameURL)
        transactionPointSiteNameURLMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .transactionPointSiteNameURLMetadata)
        transactionPointUserName = try container.decodeIfPresent(String.self, forKey: .transactionPointUserName)
        transactionPointUserNameMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .transactionPointUserNameMetadata)
        vaultingMode = try container.decodeIfPresent(String.self, forKey: .vaultingMode)
        vaultingModeMetadata = try container.decodeIfPresent(SettingsMetadata.self, forKey: .vaultingModeMetadata)
    }
}

extension UserSettingsInformation: Hashable {
    public static func == (lhs: UserSettingsInformation, rhs: UserSettingsInformation) -> Bool {
        lhs.accountManagementGranular == rhs.accountManagementGranular &&
            lhs.adminOnly == rhs.adminOnly &&
            lhs.adminOnlyMetadata == rhs.adminOnlyMetadata &&
            lhs.allowAutoTagging == rhs.allowAutoTagging &&
            lhs.allowEnvelopeTransferTo == rhs.allowEnvelopeTransferTo &&
            lhs.allowEnvelopeTransferToMetadata == rhs.allowEnvelopeTransferToMetadata &&
            lhs.allowEsealRecipients == rhs.allowEsealRecipients &&
            lhs.allowEsealRecipientsMetadata == rhs.allowEsealRecipientsMetadata &&
            lhs.allowPowerFormsAdminToAccessAllPowerFormEnvelope == rhs.allowPowerFormsAdminToAccessAllPowerFormEnvelope &&
            lhs.allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata == rhs.allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata &&
            lhs.allowRecipientLanguageSelection == rhs.allowRecipientLanguageSelection &&
            lhs.allowRecipientLanguageSelectionMetadata == rhs.allowRecipientLanguageSelectionMetadata &&
            lhs.allowSendOnBehalfOf == rhs.allowSendOnBehalfOf &&
            lhs.allowSendOnBehalfOfMetadata == rhs.allowSendOnBehalfOfMetadata &&
            lhs.allowSupplementalDocuments == rhs.allowSupplementalDocuments &&
            lhs.allowSupplementalDocumentsMetadata == rhs.allowSupplementalDocumentsMetadata &&
            lhs.anchorTagVersionedPlacementEnabled == rhs.anchorTagVersionedPlacementEnabled &&
            lhs.apiAccountWideAccess == rhs.apiAccountWideAccess &&
            lhs.apiAccountWideAccessMetadata == rhs.apiAccountWideAccessMetadata &&
            lhs.apiCanExportAC == rhs.apiCanExportAC &&
            lhs.apiCanExportACMetadata == rhs.apiCanExportACMetadata &&
            lhs.bulkSend == rhs.bulkSend &&
            lhs.bulkSendMetadata == rhs.bulkSendMetadata &&
            lhs.canChargeAccount == rhs.canChargeAccount &&
            lhs.canChargeAccountMetadata == rhs.canChargeAccountMetadata &&
            lhs.canEditSharedAddressbook == rhs.canEditSharedAddressbook &&
            lhs.canEditSharedAddressbookMetadata == rhs.canEditSharedAddressbookMetadata &&
            lhs.canLockEnvelopes == rhs.canLockEnvelopes &&
            lhs.canLockEnvelopesMetadata == rhs.canLockEnvelopesMetadata &&
            lhs.canManageAccount == rhs.canManageAccount &&
            lhs.canManageAccountMetadata == rhs.canManageAccountMetadata &&
            lhs.canManageDistributor == rhs.canManageDistributor &&
            lhs.canManageDistributorMetadata == rhs.canManageDistributorMetadata &&
            lhs.canManageTemplates == rhs.canManageTemplates &&
            lhs.canManageTemplatesMetadata == rhs.canManageTemplatesMetadata &&
            lhs.canSendAPIRequests == rhs.canSendAPIRequests &&
            lhs.canSendAPIRequestsMetadata == rhs.canSendAPIRequestsMetadata &&
            lhs.canSendEnvelope == rhs.canSendEnvelope &&
            lhs.canSendEnvelopeMetadata == rhs.canSendEnvelopeMetadata &&
            lhs.canSignEnvelope == rhs.canSignEnvelope &&
            lhs.canSignEnvelopeMetadata == rhs.canSignEnvelopeMetadata &&
            lhs.canUseScratchpad == rhs.canUseScratchpad &&
            lhs.canUseScratchpadMetadata == rhs.canUseScratchpadMetadata &&
            lhs.canUseSmartContracts == rhs.canUseSmartContracts &&
            lhs.canUseSmartContractsMetadata == rhs.canUseSmartContractsMetadata &&
            lhs.disableDocumentUpload == rhs.disableDocumentUpload &&
            lhs.disableDocumentUploadMetadata == rhs.disableDocumentUploadMetadata &&
            lhs.disableOtherActions == rhs.disableOtherActions &&
            lhs.disableOtherActionsMetadata == rhs.disableOtherActionsMetadata &&
            lhs.enableDSPro == rhs.enableDSPro &&
            lhs.enableDSProMetadata == rhs.enableDSProMetadata &&
            lhs.enableSequentialSigningAPI == rhs.enableSequentialSigningAPI &&
            lhs.enableSequentialSigningAPIMetadata == rhs.enableSequentialSigningAPIMetadata &&
            lhs.enableSequentialSigningUI == rhs.enableSequentialSigningUI &&
            lhs.enableSequentialSigningUIMetadata == rhs.enableSequentialSigningUIMetadata &&
            lhs.enableSignerAttachments == rhs.enableSignerAttachments &&
            lhs.enableSignerAttachmentsMetadata == rhs.enableSignerAttachmentsMetadata &&
            lhs.enableSignOnPaperOverride == rhs.enableSignOnPaperOverride &&
            lhs.enableSignOnPaperOverrideMetadata == rhs.enableSignOnPaperOverrideMetadata &&
            lhs.enableTransactionPoint == rhs.enableTransactionPoint &&
            lhs.enableTransactionPointMetadata == rhs.enableTransactionPointMetadata &&
            lhs.enableVaulting == rhs.enableVaulting &&
            lhs.enableVaultingMetadata == rhs.enableVaultingMetadata &&
            lhs.expressSendOnly == rhs.expressSendOnly &&
            lhs.locale == rhs.locale &&
            lhs.localeMetadata == rhs.localeMetadata &&
            lhs.localePolicy == rhs.localePolicy &&
            lhs.manageClickwrapsMode == rhs.manageClickwrapsMode &&
            lhs.manageClickwrapsModeMetadata == rhs.manageClickwrapsModeMetadata &&
            lhs.modifiedBy == rhs.modifiedBy &&
            lhs.modifiedByMetadata == rhs.modifiedByMetadata &&
            lhs.modifiedDate == rhs.modifiedDate &&
            lhs.modifiedDateMetadata == rhs.modifiedDateMetadata &&
            lhs.modifiedPage == rhs.modifiedPage &&
            lhs.modifiedPageMetadata == rhs.modifiedPageMetadata &&
            lhs.newSendUI == rhs.newSendUI &&
            lhs.newSendUIMetadata == rhs.newSendUIMetadata &&
            lhs.powerFormMode == rhs.powerFormMode &&
            lhs.powerFormModeMetadata == rhs.powerFormModeMetadata &&
            lhs.recipientViewedNotification == rhs.recipientViewedNotification &&
            lhs.recipientViewedNotificationMetadata == rhs.recipientViewedNotificationMetadata &&
            lhs.sealIdentifiers == rhs.sealIdentifiers &&
            lhs.selfSignedRecipientEmailDocument == rhs.selfSignedRecipientEmailDocument &&
            lhs.selfSignedRecipientEmailDocumentMetadata == rhs.selfSignedRecipientEmailDocumentMetadata &&
            lhs.senderEmailNotifications == rhs.senderEmailNotifications &&
            lhs.signerEmailNotifications == rhs.signerEmailNotifications &&
            lhs.supplementalDocumentIncludeInDownload == rhs.supplementalDocumentIncludeInDownload &&
            lhs.supplementalDocumentsMustAccept == rhs.supplementalDocumentsMustAccept &&
            lhs.supplementalDocumentsMustAcceptMetadata == rhs.supplementalDocumentsMustAcceptMetadata &&
            lhs.supplementalDocumentsMustRead == rhs.supplementalDocumentsMustRead &&
            lhs.supplementalDocumentsMustReadMetadata == rhs.supplementalDocumentsMustReadMetadata &&
            lhs.supplementalDocumentsMustView == rhs.supplementalDocumentsMustView &&
            lhs.supplementalDocumentsMustViewMetadata == rhs.supplementalDocumentsMustViewMetadata &&
            lhs.templateActiveCreation == rhs.templateActiveCreation &&
            lhs.templateActiveCreationMetadata == rhs.templateActiveCreationMetadata &&
            lhs.templateApplyNotify == rhs.templateApplyNotify &&
            lhs.templateApplyNotifyMetadata == rhs.templateApplyNotifyMetadata &&
            lhs.templateAutoMatching == rhs.templateAutoMatching &&
            lhs.templateAutoMatchingMetadata == rhs.templateAutoMatchingMetadata &&
            lhs.templateMatchingSensitivity == rhs.templateMatchingSensitivity &&
            lhs.templateMatchingSensitivityMetadata == rhs.templateMatchingSensitivityMetadata &&
            lhs.templatePageLevelMatching == rhs.templatePageLevelMatching &&
            lhs.templatePageLevelMatchingMetadata == rhs.templatePageLevelMatchingMetadata &&
            lhs.timezoneDST == rhs.timezoneDST &&
            lhs.timezoneDSTMetadata == rhs.timezoneDSTMetadata &&
            lhs.timezoneMask == rhs.timezoneMask &&
            lhs.timezoneMaskMetadata == rhs.timezoneMaskMetadata &&
            lhs.timezoneOffset == rhs.timezoneOffset &&
            lhs.timezoneOffsetMetadata == rhs.timezoneOffsetMetadata &&
            lhs.timezoneSendingPref == rhs.timezoneSendingPref &&
            lhs.timezoneSendingPrefMetadata == rhs.timezoneSendingPrefMetadata &&
            lhs.timezoneSigningPref == rhs.timezoneSigningPref &&
            lhs.timezoneSigningPrefMetadata == rhs.timezoneSigningPrefMetadata &&
            lhs.transactionPointSiteNameURL == rhs.transactionPointSiteNameURL &&
            lhs.transactionPointSiteNameURLMetadata == rhs.transactionPointSiteNameURLMetadata &&
            lhs.transactionPointUserName == rhs.transactionPointUserName &&
            lhs.transactionPointUserNameMetadata == rhs.transactionPointUserNameMetadata &&
            lhs.vaultingMode == rhs.vaultingMode &&
            lhs.vaultingModeMetadata == rhs.vaultingModeMetadata
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountManagementGranular?.hashValue)
        hasher.combine(adminOnly?.hashValue)
        hasher.combine(adminOnlyMetadata?.hashValue)
        hasher.combine(allowAutoTagging?.hashValue)
        hasher.combine(allowEnvelopeTransferTo?.hashValue)
        hasher.combine(allowEnvelopeTransferToMetadata?.hashValue)
        hasher.combine(allowEsealRecipients?.hashValue)
        hasher.combine(allowEsealRecipientsMetadata?.hashValue)
        hasher.combine(allowPowerFormsAdminToAccessAllPowerFormEnvelope?.hashValue)
        hasher.combine(allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata?.hashValue)
        hasher.combine(allowRecipientLanguageSelection?.hashValue)
        hasher.combine(allowRecipientLanguageSelectionMetadata?.hashValue)
        hasher.combine(allowSendOnBehalfOf?.hashValue)
        hasher.combine(allowSendOnBehalfOfMetadata?.hashValue)
        hasher.combine(allowSupplementalDocuments?.hashValue)
        hasher.combine(allowSupplementalDocumentsMetadata?.hashValue)
        hasher.combine(anchorTagVersionedPlacementEnabled?.hashValue)
        hasher.combine(apiAccountWideAccess?.hashValue)
        hasher.combine(apiAccountWideAccessMetadata?.hashValue)
        hasher.combine(apiCanExportAC?.hashValue)
        hasher.combine(apiCanExportACMetadata?.hashValue)
        hasher.combine(bulkSend?.hashValue)
        hasher.combine(bulkSendMetadata?.hashValue)
        hasher.combine(canChargeAccount?.hashValue)
        hasher.combine(canChargeAccountMetadata?.hashValue)
        hasher.combine(canEditSharedAddressbook?.hashValue)
        hasher.combine(canEditSharedAddressbookMetadata?.hashValue)
        hasher.combine(canLockEnvelopes?.hashValue)
        hasher.combine(canLockEnvelopesMetadata?.hashValue)
        hasher.combine(canManageAccount?.hashValue)
        hasher.combine(canManageAccountMetadata?.hashValue)
        hasher.combine(canManageDistributor?.hashValue)
        hasher.combine(canManageDistributorMetadata?.hashValue)
        hasher.combine(canManageTemplates?.hashValue)
        hasher.combine(canManageTemplatesMetadata?.hashValue)
        hasher.combine(canSendAPIRequests?.hashValue)
        hasher.combine(canSendAPIRequestsMetadata?.hashValue)
        hasher.combine(canSendEnvelope?.hashValue)
        hasher.combine(canSendEnvelopeMetadata?.hashValue)
        hasher.combine(canSignEnvelope?.hashValue)
        hasher.combine(canSignEnvelopeMetadata?.hashValue)
        hasher.combine(canUseScratchpad?.hashValue)
        hasher.combine(canUseScratchpadMetadata?.hashValue)
        hasher.combine(canUseSmartContracts?.hashValue)
        hasher.combine(canUseSmartContractsMetadata?.hashValue)
        hasher.combine(disableDocumentUpload?.hashValue)
        hasher.combine(disableDocumentUploadMetadata?.hashValue)
        hasher.combine(disableOtherActions?.hashValue)
        hasher.combine(disableOtherActionsMetadata?.hashValue)
        hasher.combine(enableDSPro?.hashValue)
        hasher.combine(enableDSProMetadata?.hashValue)
        hasher.combine(enableSequentialSigningAPI?.hashValue)
        hasher.combine(enableSequentialSigningAPIMetadata?.hashValue)
        hasher.combine(enableSequentialSigningUI?.hashValue)
        hasher.combine(enableSequentialSigningUIMetadata?.hashValue)
        hasher.combine(enableSignerAttachments?.hashValue)
        hasher.combine(enableSignerAttachmentsMetadata?.hashValue)
        hasher.combine(enableSignOnPaperOverride?.hashValue)
        hasher.combine(enableSignOnPaperOverrideMetadata?.hashValue)
        hasher.combine(enableTransactionPoint?.hashValue)
        hasher.combine(enableTransactionPointMetadata?.hashValue)
        hasher.combine(enableVaulting?.hashValue)
        hasher.combine(enableVaultingMetadata?.hashValue)
        hasher.combine(expressSendOnly?.hashValue)
        hasher.combine(locale?.hashValue)
        hasher.combine(localeMetadata?.hashValue)
        hasher.combine(localePolicy?.hashValue)
        hasher.combine(manageClickwrapsMode?.hashValue)
        hasher.combine(manageClickwrapsModeMetadata?.hashValue)
        hasher.combine(modifiedBy?.hashValue)
        hasher.combine(modifiedByMetadata?.hashValue)
        hasher.combine(modifiedDate?.hashValue)
        hasher.combine(modifiedDateMetadata?.hashValue)
        hasher.combine(modifiedPage?.hashValue)
        hasher.combine(modifiedPageMetadata?.hashValue)
        hasher.combine(newSendUI?.hashValue)
        hasher.combine(newSendUIMetadata?.hashValue)
        hasher.combine(powerFormMode?.hashValue)
        hasher.combine(powerFormModeMetadata?.hashValue)
        hasher.combine(recipientViewedNotification?.hashValue)
        hasher.combine(recipientViewedNotificationMetadata?.hashValue)
        hasher.combine(sealIdentifiers?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocument?.hashValue)
        hasher.combine(selfSignedRecipientEmailDocumentMetadata?.hashValue)
        hasher.combine(senderEmailNotifications?.hashValue)
        hasher.combine(signerEmailNotifications?.hashValue)
        hasher.combine(supplementalDocumentIncludeInDownload?.hashValue)
        hasher.combine(supplementalDocumentsMustAccept?.hashValue)
        hasher.combine(supplementalDocumentsMustAcceptMetadata?.hashValue)
        hasher.combine(supplementalDocumentsMustRead?.hashValue)
        hasher.combine(supplementalDocumentsMustReadMetadata?.hashValue)
        hasher.combine(supplementalDocumentsMustView?.hashValue)
        hasher.combine(supplementalDocumentsMustViewMetadata?.hashValue)
        hasher.combine(templateActiveCreation?.hashValue)
        hasher.combine(templateActiveCreationMetadata?.hashValue)
        hasher.combine(templateApplyNotify?.hashValue)
        hasher.combine(templateApplyNotifyMetadata?.hashValue)
        hasher.combine(templateAutoMatching?.hashValue)
        hasher.combine(templateAutoMatchingMetadata?.hashValue)
        hasher.combine(templateMatchingSensitivity?.hashValue)
        hasher.combine(templateMatchingSensitivityMetadata?.hashValue)
        hasher.combine(templatePageLevelMatching?.hashValue)
        hasher.combine(templatePageLevelMatchingMetadata?.hashValue)
        hasher.combine(timezoneDST?.hashValue)
        hasher.combine(timezoneDSTMetadata?.hashValue)
        hasher.combine(timezoneMask?.hashValue)
        hasher.combine(timezoneMaskMetadata?.hashValue)
        hasher.combine(timezoneOffset?.hashValue)
        hasher.combine(timezoneOffsetMetadata?.hashValue)
        hasher.combine(timezoneSendingPref?.hashValue)
        hasher.combine(timezoneSendingPrefMetadata?.hashValue)
        hasher.combine(timezoneSigningPref?.hashValue)
        hasher.combine(timezoneSigningPrefMetadata?.hashValue)
        hasher.combine(transactionPointSiteNameURL?.hashValue)
        hasher.combine(transactionPointSiteNameURLMetadata?.hashValue)
        hasher.combine(transactionPointUserName?.hashValue)
        hasher.combine(transactionPointUserNameMetadata?.hashValue)
        hasher.combine(vaultingMode?.hashValue)
        hasher.combine(vaultingModeMetadata?.hashValue)
    }
}

//
// TemplateMatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/**  */
public final class TemplateMatch: Content {
    /**  */
    public var documentEndPage: String?
    /**  */
    public var documentStartPage: String?
    /**  */
    public var matchPercentage: String?

    public init(documentEndPage: String? = nil, documentStartPage: String? = nil, matchPercentage: String? = nil) {
        self.documentEndPage = documentEndPage
        self.documentStartPage = documentStartPage
        self.matchPercentage = matchPercentage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case documentEndPage
        case documentStartPage
        case matchPercentage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(documentEndPage, forKey: .documentEndPage)
        try container.encodeIfPresent(documentStartPage, forKey: .documentStartPage)
        try container.encodeIfPresent(matchPercentage, forKey: .matchPercentage)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        documentEndPage = try container.decodeIfPresent(String.self, forKey: .documentEndPage)
        documentStartPage = try container.decodeIfPresent(String.self, forKey: .documentStartPage)
        matchPercentage = try container.decodeIfPresent(String.self, forKey: .matchPercentage)
    }
}

extension TemplateMatch: Hashable {
    public static func == (lhs: TemplateMatch, rhs: TemplateMatch) -> Bool {
        lhs.documentEndPage == rhs.documentEndPage &&
            lhs.documentStartPage == rhs.documentStartPage &&
            lhs.matchPercentage == rhs.matchPercentage
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(documentEndPage?.hashValue)
        hasher.combine(documentStartPage?.hashValue)
        hasher.combine(matchPercentage?.hashValue)
    }
}

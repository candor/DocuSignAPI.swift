//
// UserProfiles.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

/** Users&#39; profiles */
public final class UserProfiles: Content {
    public var address: AddressInformation?
    /** Indicates the authentication methods that the user uses. These properties cannot be modified by the PUT operation.  */
    public var authenticationMethods: [AuthenticationMethod]?
    /** The name of the user's company. */
    public var companyName: String?
    /**  When set to **true**, the user's company and title information display on the ID card.  */
    public var displayOrganizationInfo: String?
    /** When set to **true**, the user's address and phone number display on the ID card. */
    public var displayPersonalInfo: String?
    /** When set to **true**, the user's ID card can be viewed from signed documents and envelope history. */
    public var displayProfile: String?
    /** When set to **true**, the user's usage information displays on the ID card. */
    public var displayUsageHistory: String?
    /** The URL for retrieving the user's profile image. */
    public var profileImageUri: String?
    /** The user's job title.  Limit: 100 characters. */
    public var title: String?
    public var usageHistory: UsageHistory?
    public var userDetails: UserInformation?
    /** The date and time that the user's profile was last modified. */
    public var userProfileLastModifiedDate: String?

    public init(address: AddressInformation? = nil, authenticationMethods: [AuthenticationMethod]? = nil, companyName: String? = nil, displayOrganizationInfo: String? = nil, displayPersonalInfo: String? = nil, displayProfile: String? = nil, displayUsageHistory: String? = nil, profileImageUri: String? = nil, title: String? = nil, usageHistory: UsageHistory? = nil, userDetails: UserInformation? = nil, userProfileLastModifiedDate: String? = nil) {
        self.address = address
        self.authenticationMethods = authenticationMethods
        self.companyName = companyName
        self.displayOrganizationInfo = displayOrganizationInfo
        self.displayPersonalInfo = displayPersonalInfo
        self.displayProfile = displayProfile
        self.displayUsageHistory = displayUsageHistory
        self.profileImageUri = profileImageUri
        self.title = title
        self.usageHistory = usageHistory
        self.userDetails = userDetails
        self.userProfileLastModifiedDate = userProfileLastModifiedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case authenticationMethods
        case companyName
        case displayOrganizationInfo
        case displayPersonalInfo
        case displayProfile
        case displayUsageHistory
        case profileImageUri
        case title
        case usageHistory
        case userDetails
        case userProfileLastModifiedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(authenticationMethods, forKey: .authenticationMethods)
        try container.encodeIfPresent(companyName, forKey: .companyName)
        try container.encodeIfPresent(displayOrganizationInfo, forKey: .displayOrganizationInfo)
        try container.encodeIfPresent(displayPersonalInfo, forKey: .displayPersonalInfo)
        try container.encodeIfPresent(displayProfile, forKey: .displayProfile)
        try container.encodeIfPresent(displayUsageHistory, forKey: .displayUsageHistory)
        try container.encodeIfPresent(profileImageUri, forKey: .profileImageUri)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(usageHistory, forKey: .usageHistory)
        try container.encodeIfPresent(userDetails, forKey: .userDetails)
        try container.encodeIfPresent(userProfileLastModifiedDate, forKey: .userProfileLastModifiedDate)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        address = try container.decodeIfPresent(AddressInformation.self, forKey: .address)
        authenticationMethods = try container.decodeIfPresent([AuthenticationMethod].self, forKey: .authenticationMethods)
        companyName = try container.decodeIfPresent(String.self, forKey: .companyName)
        displayOrganizationInfo = try container.decodeIfPresent(String.self, forKey: .displayOrganizationInfo)
        displayPersonalInfo = try container.decodeIfPresent(String.self, forKey: .displayPersonalInfo)
        displayProfile = try container.decodeIfPresent(String.self, forKey: .displayProfile)
        displayUsageHistory = try container.decodeIfPresent(String.self, forKey: .displayUsageHistory)
        profileImageUri = try container.decodeIfPresent(String.self, forKey: .profileImageUri)
        title = try container.decodeIfPresent(String.self, forKey: .title)
        usageHistory = try container.decodeIfPresent(UsageHistory.self, forKey: .usageHistory)
        userDetails = try container.decodeIfPresent(UserInformation.self, forKey: .userDetails)
        userProfileLastModifiedDate = try container.decodeIfPresent(String.self, forKey: .userProfileLastModifiedDate)
    }
}

extension UserProfiles: Hashable {
    public static func == (lhs: UserProfiles, rhs: UserProfiles) -> Bool {
        lhs.address == rhs.address &&
            lhs.authenticationMethods == rhs.authenticationMethods &&
            lhs.companyName == rhs.companyName &&
            lhs.displayOrganizationInfo == rhs.displayOrganizationInfo &&
            lhs.displayPersonalInfo == rhs.displayPersonalInfo &&
            lhs.displayProfile == rhs.displayProfile &&
            lhs.displayUsageHistory == rhs.displayUsageHistory &&
            lhs.profileImageUri == rhs.profileImageUri &&
            lhs.title == rhs.title &&
            lhs.usageHistory == rhs.usageHistory &&
            lhs.userDetails == rhs.userDetails &&
            lhs.userProfileLastModifiedDate == rhs.userProfileLastModifiedDate
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address?.hashValue)
        hasher.combine(authenticationMethods?.hashValue)
        hasher.combine(companyName?.hashValue)
        hasher.combine(displayOrganizationInfo?.hashValue)
        hasher.combine(displayPersonalInfo?.hashValue)
        hasher.combine(displayProfile?.hashValue)
        hasher.combine(displayUsageHistory?.hashValue)
        hasher.combine(profileImageUri?.hashValue)
        hasher.combine(title?.hashValue)
        hasher.combine(usageHistory?.hashValue)
        hasher.combine(userDetails?.hashValue)
        hasher.combine(userProfileLastModifiedDate?.hashValue)
    }
}

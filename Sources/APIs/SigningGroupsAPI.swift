//
// SigningGroupsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class SigningGroupsAPI {
    public enum SigningGroupsDeleteSigningGroups {
        case http200(value: SigningGroupInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroupInformation?, raw: ClientResponse)
    }

    /**
     Deletes one or more signing groups.

     DELETE /v2.1/accounts/{accountId}/signing_groups

     Deletes one or more signing groups in the specified account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter signingGroupInformation: (body)  (optional)
     - returns: `EventLoopFuture` of `SigningGroupsDeleteSigningGroups`
     */
    open class func signingGroupsDeleteSigningGroups(accountId: String, signingGroupInformation: SigningGroupInformation? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsDeleteSigningGroups> {
        var path = "/v2.1/accounts/{accountId}/signing_groups"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = signingGroupInformation {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsDeleteSigningGroups in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            }
        }
    }

    public enum SigningGroupsGetSigningGroup {
        case http200(value: SigningGroup?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroup?, raw: ClientResponse)
    }

    /**
     Gets information about a signing group.

     GET /v2.1/accounts/{accountId}/signing_groups/{signingGroupId}

     Retrieves information, including group member information, for the specified signing group.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter signingGroupId: (path) Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).  **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     - returns: `EventLoopFuture` of `SigningGroupsGetSigningGroup`
     */
    open class func signingGroupsGetSigningGroup(accountId: String, signingGroupId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsGetSigningGroup> {
        var path = "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let signingGroupIdPreEscape = String(describing: signingGroupId)
        let signingGroupIdPostEscape = signingGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{signingGroupId}", with: signingGroupIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsGetSigningGroup in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(SigningGroup.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroup.self), raw: response)
            }
        }
    }

    public enum SigningGroupsGetSigningGroups {
        case http200(value: SigningGroupInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroupInformation?, raw: ClientResponse)
    }

    /**
     Gets a list of the Signing Groups in an account.

     GET /v2.1/accounts/{accountId}/signing_groups

     Retrieves a list of all signing groups in the specified account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter groupType: (query)  (optional)
     - parameter includeUsers: (query) When set to **true**, the response includes the signing group members.  (optional)
     - returns: `EventLoopFuture` of `SigningGroupsGetSigningGroups`
     */
    open class func signingGroupsGetSigningGroups(accountId: String, groupType: String? = nil, includeUsers: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsGetSigningGroups> {
        var path = "/v2.1/accounts/{accountId}/signing_groups"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var groupType: String?
                var includeUsers: String?
            }
            try request.query.encode(QueryParams(groupType: groupType, includeUsers: includeUsers))

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsGetSigningGroups in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            }
        }
    }

    public enum SigningGroupsPostSigningGroups {
        case http201(value: SigningGroupInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroupInformation?, raw: ClientResponse)
    }

    /**
     Creates a signing group.

     POST /v2.1/accounts/{accountId}/signing_groups

     Creates one or more signing groups.   Multiple signing groups can be created in one call. Only users with account administrator privileges can create signing groups.   An account can have a maximum of 50 signing groups. Each signing group can have a maximum of 50 group members.   Signing groups can be used by any account user.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter signingGroupInformation: (body)  (optional)
     - returns: `EventLoopFuture` of `SigningGroupsPostSigningGroups`
     */
    open class func signingGroupsPostSigningGroups(accountId: String, signingGroupInformation: SigningGroupInformation? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsPostSigningGroups> {
        var path = "/v2.1/accounts/{accountId}/signing_groups"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = signingGroupInformation {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsPostSigningGroups in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            }
        }
    }

    public enum SigningGroupsPutSigningGroup {
        case http200(value: SigningGroup?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroup?, raw: ClientResponse)
    }

    /**
     Updates a signing group.

     PUT /v2.1/accounts/{accountId}/signing_groups/{signingGroupId}

     Updates signing group name and member information. You can also add new members to the signing group. A signing group can have a maximum of 50 members.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter signingGroupId: (path) Optional. The ID of the [signing group](https://support.docusign.com/en/guides/ndse-user-guide-signing-groups).  **Note**: When you send an envelope to a signing group, anyone in the group can open it and sign it with their own signature. For this reason, we recommend that you do not include non-signer recipients (such as carbon copy recipients) in the same signing group as signer recipients. However, you could create a second signing group for the non-signer recipients and change the default action of Needs to Sign to a different value, such as Receives a Copy.
     - parameter signingGroup: (body)  (optional)
     - returns: `EventLoopFuture` of `SigningGroupsPutSigningGroup`
     */
    open class func signingGroupsPutSigningGroup(accountId: String, signingGroupId: String, signingGroup: SigningGroup? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsPutSigningGroup> {
        var path = "/v2.1/accounts/{accountId}/signing_groups/{signingGroupId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let signingGroupIdPreEscape = String(describing: signingGroupId)
        let signingGroupIdPostEscape = signingGroupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{signingGroupId}", with: signingGroupIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = signingGroup {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsPutSigningGroup in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(SigningGroup.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroup.self), raw: response)
            }
        }
    }

    public enum SigningGroupsPutSigningGroups {
        case http200(value: SigningGroupInformation?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: SigningGroupInformation?, raw: ClientResponse)
    }

    /**
     Updates signing group names.

     PUT /v2.1/accounts/{accountId}/signing_groups

     Updates the name of one or more existing signing groups.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter signingGroupInformation: (body)  (optional)
     - returns: `EventLoopFuture` of `SigningGroupsPutSigningGroups`
     */
    open class func signingGroupsPutSigningGroups(accountId: String, signingGroupInformation: SigningGroupInformation? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<SigningGroupsPutSigningGroups> {
        var path = "/v2.1/accounts/{accountId}/signing_groups"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = signingGroupInformation {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> SigningGroupsPutSigningGroups in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(SigningGroupInformation.self), raw: response)
            }
        }
    }
}

//
// CustomTabsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class CustomTabsAPI {
    public enum TabDeleteCustomTab {
        case http200(value: Void?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Void?, raw: ClientResponse)
    }

    /**
     Deletes custom tab information.

     DELETE /v2.1/accounts/{accountId}/tab_definitions/{customTabId}

     Deletes the custom from the specified account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter customTabId: (path) The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
     - returns: `EventLoopFuture` of `TabDeleteCustomTab`
     */
    open class func tabDeleteCustomTab(accountId: String, customTabId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabDeleteCustomTab> {
        var path = "/v2.1/accounts/{accountId}/tab_definitions/{customTabId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let customTabIdPreEscape = String(describing: customTabId)
        let customTabIdPostEscape = customTabIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customTabId}", with: customTabIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabDeleteCustomTab in
            switch response.status.code {
            case 200:
                return .http200(value: (), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: (), raw: response)
            }
        }
    }

    public enum TabGetCustomTab {
        case http200(value: TabMetadata?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabMetadata?, raw: ClientResponse)
    }

    /**
     Gets custom tab information.

     GET /v2.1/accounts/{accountId}/tab_definitions/{customTabId}

     Retrieves information about the requested custom tab on the specified account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter customTabId: (path) The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
     - returns: `EventLoopFuture` of `TabGetCustomTab`
     */
    open class func tabGetCustomTab(accountId: String, customTabId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabGetCustomTab> {
        var path = "/v2.1/accounts/{accountId}/tab_definitions/{customTabId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let customTabIdPreEscape = String(describing: customTabId)
        let customTabIdPostEscape = customTabIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customTabId}", with: customTabIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabGetCustomTab in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TabMetadata.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabMetadata.self), raw: response)
            }
        }
    }

    public enum TabPutCustomTab {
        case http200(value: TabMetadata?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabMetadata?, raw: ClientResponse)
    }

    /**
     Updates custom tab information.

     PUT /v2.1/accounts/{accountId}/tab_definitions/{customTabId}

     Updates the information in a custom tab for the specified account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter customTabId: (path) The DocuSign-generated custom tab id for the custom tab to be applied. This can only be used when adding new tabs for a recipient. When used, the new tab inherits all the custom tab properties.
     - parameter tabMetadata: (body)  (optional)
     - returns: `EventLoopFuture` of `TabPutCustomTab`
     */
    open class func tabPutCustomTab(accountId: String, customTabId: String, tabMetadata: TabMetadata? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabPutCustomTab> {
        var path = "/v2.1/accounts/{accountId}/tab_definitions/{customTabId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let customTabIdPreEscape = String(describing: customTabId)
        let customTabIdPostEscape = customTabIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{customTabId}", with: customTabIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = tabMetadata {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabPutCustomTab in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TabMetadata.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabMetadata.self), raw: response)
            }
        }
    }

    public enum TabsGetTabDefinitions {
        case http200(value: TabMetadataList?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabMetadataList?, raw: ClientResponse)
    }

    /**
     Gets a list of all account tabs.

     GET /v2.1/accounts/{accountId}/tab_definitions

     Retrieves a list of all tabs associated with the account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter customTabOnly: (query) When set to **true**, only custom tabs are returned in the response.  (optional)
     - returns: `EventLoopFuture` of `TabsGetTabDefinitions`
     */
    open class func tabsGetTabDefinitions(accountId: String, customTabOnly: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabsGetTabDefinitions> {
        var path = "/v2.1/accounts/{accountId}/tab_definitions"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var customTabOnly: String?
            }
            try request.query.encode(QueryParams(customTabOnly: customTabOnly))

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabsGetTabDefinitions in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TabMetadataList.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabMetadataList.self), raw: response)
            }
        }
    }

    public enum TabsPostTabDefinitions {
        case http201(value: TabMetadata?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabMetadata?, raw: ClientResponse)
    }

    /**
     Creates a custom tab.

     POST /v2.1/accounts/{accountId}/tab_definitions

     Creates a tab with pre-defined properties, such as a text tab with a certain font type and validation pattern. Users can access the custom tabs when sending documents through the DocuSign web application.  Custom tabs can be created for approve, checkbox, company, date, date signed, decline, email, email address, envelope ID, first name, formula, full name, initial here, last name, list, note, number, radio, sign here, signer attachment, SSN, text, title, and zip tabs.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter tabMetadata: (body)  (optional)
     - returns: `EventLoopFuture` of `TabsPostTabDefinitions`
     */
    open class func tabsPostTabDefinitions(accountId: String, tabMetadata: TabMetadata? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabsPostTabDefinitions> {
        var path = "/v2.1/accounts/{accountId}/tab_definitions"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = tabMetadata {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabsPostTabDefinitions in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(TabMetadata.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabMetadata.self), raw: response)
            }
        }
    }
}

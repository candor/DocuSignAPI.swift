//
// EnvelopeDocumentFieldsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class EnvelopeDocumentFieldsAPI {
    public enum DocumentFieldsDeleteDocumentFields {
        case http200(value: EnvelopeDocumentFields?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeDocumentFields?, raw: ClientResponse)
    }

    /**
     Deletes custom document fields from an existing envelope document.

     DELETE /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields

     Deletes custom document fields from an existing envelope document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeDocumentFields: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentFieldsDeleteDocumentFields`
     */
    open class func documentFieldsDeleteDocumentFields(accountId: String, documentId: String, envelopeId: String, envelopeDocumentFields: EnvelopeDocumentFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentFieldsDeleteDocumentFields> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeDocumentFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentFieldsDeleteDocumentFields in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            }
        }
    }

    public enum DocumentFieldsGetDocumentFields {
        case http200(value: EnvelopeDocumentFields?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeDocumentFields?, raw: ClientResponse)
    }

    /**
     Gets the custom document fields from an  existing envelope document.

     GET /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields

     Retrieves the custom document field information from an existing envelope document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - returns: `EventLoopFuture` of `DocumentFieldsGetDocumentFields`
     */
    open class func documentFieldsGetDocumentFields(accountId: String, documentId: String, envelopeId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentFieldsGetDocumentFields> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentFieldsGetDocumentFields in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            }
        }
    }

    public enum DocumentFieldsPostDocumentFields {
        case http201(value: EnvelopeDocumentFields?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeDocumentFields?, raw: ClientResponse)
    }

    /**
     Creates custom document fields in an existing envelope document.

     POST /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields

     Creates custom document fields in an existing envelope document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeDocumentFields: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentFieldsPostDocumentFields`
     */
    open class func documentFieldsPostDocumentFields(accountId: String, documentId: String, envelopeId: String, envelopeDocumentFields: EnvelopeDocumentFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentFieldsPostDocumentFields> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeDocumentFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentFieldsPostDocumentFields in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            }
        }
    }

    public enum DocumentFieldsPutDocumentFields {
        case http200(value: EnvelopeDocumentFields?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: EnvelopeDocumentFields?, raw: ClientResponse)
    }

    /**
     Updates existing custom document fields in an existing envelope document.

     PUT /v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields

     Updates existing custom document fields in an existing envelope document.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter documentId: (path) The `documentId` is set by the API client. It is an integer that falls between `1` and 2,147,483,647. The value is encoded as a string without commas. The values `1`, `2`, `3`, and so on are typically used to identify the first few documents in an envelope. Tab definitions include a `documentId` property that specifies the document on which to place the tab.
     - parameter envelopeId: (path) The envelope's GUID.   Example: `93be49ab-xxxx-xxxx-xxxx-f752070d71ec`
     - parameter envelopeDocumentFields: (body)  (optional)
     - returns: `EventLoopFuture` of `DocumentFieldsPutDocumentFields`
     */
    open class func documentFieldsPutDocumentFields(accountId: String, documentId: String, envelopeId: String, envelopeDocumentFields: EnvelopeDocumentFields? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<DocumentFieldsPutDocumentFields> {
        var path = "/v2.1/accounts/{accountId}/envelopes/{envelopeId}/documents/{documentId}/fields"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let documentIdPreEscape = String(describing: documentId)
        let documentIdPostEscape = documentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{documentId}", with: documentIdPostEscape, options: .literal, range: nil)
        let envelopeIdPreEscape = String(describing: envelopeId)
        let envelopeIdPostEscape = envelopeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{envelopeId}", with: envelopeIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = envelopeDocumentFields {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> DocumentFieldsPutDocumentFields in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(EnvelopeDocumentFields.self), raw: response)
            }
        }
    }
}

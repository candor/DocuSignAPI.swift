//
// AccountPasswordRulesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class AccountPasswordRulesAPI {
    public enum AccountPasswordRulesGetAccountPasswordRules {
        case http200(value: AccountPasswordRules?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: AccountPasswordRules?, raw: ClientResponse)
    }

    /**
     Gets the password rules for an account.

     GET /v2.1/accounts/{accountId}/settings/password_rules

     This method retrieves the password rules for an account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - returns: `EventLoopFuture` of `AccountPasswordRulesGetAccountPasswordRules`
     */
    open class func accountPasswordRulesGetAccountPasswordRules(accountId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AccountPasswordRulesGetAccountPasswordRules> {
        var path = "/v2.1/accounts/{accountId}/settings/password_rules"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> AccountPasswordRulesGetAccountPasswordRules in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(AccountPasswordRules.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(AccountPasswordRules.self), raw: response)
            }
        }
    }

    public enum AccountPasswordRulesPutAccountPasswordRules {
        case http200(value: AccountPasswordRules?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: AccountPasswordRules?, raw: ClientResponse)
    }

    /**
     Updates the password rules for an account.

     PUT /v2.1/accounts/{accountId}/settings/password_rules

     This method updates the password rules for an account.  **Note**: To update the password rules for an account, you must be an account administrator.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter accountPasswordRules: (body)  (optional)
     - returns: `EventLoopFuture` of `AccountPasswordRulesPutAccountPasswordRules`
     */
    open class func accountPasswordRulesPutAccountPasswordRules(accountId: String, accountPasswordRules: AccountPasswordRules? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<AccountPasswordRulesPutAccountPasswordRules> {
        var path = "/v2.1/accounts/{accountId}/settings/password_rules"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = accountPasswordRules {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> AccountPasswordRulesPutAccountPasswordRules in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(AccountPasswordRules.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(AccountPasswordRules.self), raw: response)
            }
        }
    }

    public enum PasswordRulesGetPasswordRules {
        case http200(value: UserPasswordRules?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: UserPasswordRules?, raw: ClientResponse)
    }

    /**
     Gets membership account password rules.

     GET /v2.1/current_user/password_rules

     - returns: `EventLoopFuture` of `PasswordRulesGetPasswordRules`
     */
    open class func passwordRulesGetPasswordRules(headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<PasswordRulesGetPasswordRules> {
        let path = "/v2.1/current_user/password_rules"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> PasswordRulesGetPasswordRules in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(UserPasswordRules.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(UserPasswordRules.self), raw: response)
            }
        }
    }
}

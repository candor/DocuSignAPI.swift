//
// TemplateRecipientsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class TemplateRecipientsAPI {
    public enum RecipientsDeleteTemplateRecipient {
        case http200(value: Recipients?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Recipients?, raw: ClientResponse)
    }

    /**
     Deletes the specified recipient file from a template.

     DELETE /v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}

     Deletes the specified recipient file from the specified template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter recipientId: (path) A local reference that senders use to map recipients to other objects, such as specific document tabs. Within an envelope, each `recipientId` must be unique, but there is no uniqueness requirement across envelopes. For example, many envelopes assign the first recipient a `recipientId` of `1`.
     - parameter templateId: (path) The id of the template.
     - parameter templateRecipients: (body)  (optional)
     - returns: `EventLoopFuture` of `RecipientsDeleteTemplateRecipient`
     */
    open class func recipientsDeleteTemplateRecipient(accountId: String, recipientId: String, templateId: String, templateRecipients: TemplateRecipients? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsDeleteTemplateRecipient> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients/{recipientId}"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let recipientIdPreEscape = String(describing: recipientId)
        let recipientIdPostEscape = recipientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{recipientId}", with: recipientIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = templateRecipients {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsDeleteTemplateRecipient in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Recipients.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(Recipients.self), raw: response)
            }
        }
    }

    public enum RecipientsDeleteTemplateRecipients {
        case http200(value: Recipients?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Recipients?, raw: ClientResponse)
    }

    /**
     Deletes recipients from a template.

     DELETE /v2.1/accounts/{accountId}/templates/{templateId}/recipients

     Deletes one or more recipients from a template. Recipients to be deleted are listed in the request, with the `recipientId` being used as the key for deleting recipients.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter templateRecipients: (body)  (optional)
     - returns: `EventLoopFuture` of `RecipientsDeleteTemplateRecipients`
     */
    open class func recipientsDeleteTemplateRecipients(accountId: String, templateId: String, templateRecipients: TemplateRecipients? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsDeleteTemplateRecipients> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = templateRecipients {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsDeleteTemplateRecipients in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Recipients.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(Recipients.self), raw: response)
            }
        }
    }

    public enum RecipientsGetTemplateRecipients {
        case http200(value: Recipients?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Recipients?, raw: ClientResponse)
    }

    /**
     Gets recipient information from a template.

     GET /v2.1/accounts/{accountId}/templates/{templateId}/recipients

     Retrieves the information for all recipients in the specified template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter includeAnchorTabLocations: (query)  When set to **true** and `include_tabs` is set to **true**, all tabs with anchor tab properties are included in the response.  (optional)
     - parameter includeExtended: (query)  When set to **true**, the extended properties are included in the response.  (optional)
     - parameter includeTabs: (query) When set to **true**, the tab information associated with the recipient is included in the response. If you do not specify this parameter, the effect is the default behavior (**false**). (optional)
     - returns: `EventLoopFuture` of `RecipientsGetTemplateRecipients`
     */
    open class func recipientsGetTemplateRecipients(accountId: String, templateId: String, includeAnchorTabLocations: String? = nil, includeExtended: String? = nil, includeTabs: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsGetTemplateRecipients> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var includeAnchorTabLocations: String?
                var includeExtended: String?
                var includeTabs: String?
            }
            try request.query.encode(QueryParams(includeAnchorTabLocations: includeAnchorTabLocations, includeExtended: includeExtended, includeTabs: includeTabs))

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsGetTemplateRecipients in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(Recipients.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(Recipients.self), raw: response)
            }
        }
    }

    public enum RecipientsPostTemplateRecipients {
        case http201(value: Recipients?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: Recipients?, raw: ClientResponse)
    }

    /**
     Adds tabs for a recipient.

     POST /v2.1/accounts/{accountId}/templates/{templateId}/recipients

     Adds one or more recipients to a template.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter resendEnvelope: (query) When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.  **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here. (optional)
     - parameter templateRecipients: (body)  (optional)
     - returns: `EventLoopFuture` of `RecipientsPostTemplateRecipients`
     */
    open class func recipientsPostTemplateRecipients(accountId: String, templateId: String, resendEnvelope: String? = nil, templateRecipients: TemplateRecipients? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsPostTemplateRecipients> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var resendEnvelope: String?
            }
            try request.query.encode(QueryParams(resendEnvelope: resendEnvelope))
            if let body = templateRecipients {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsPostTemplateRecipients in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(Recipients.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(Recipients.self), raw: response)
            }
        }
    }

    public enum RecipientsPutTemplateRecipients {
        case http200(value: RecipientsUpdateSummary?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: RecipientsUpdateSummary?, raw: ClientResponse)
    }

    /**
     Updates recipients in a template.

     PUT /v2.1/accounts/{accountId}/templates/{templateId}/recipients

     Updates recipients in a template.   You can edit the following properties: `email`, `userName`, `routingOrder`, `faxNumber`, `deliveryMethod`, `accessCode`, and `requireIdLookup`.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter resendEnvelope: (query) When set to **true**, resends the envelope to the recipients that you specify in the request body. You use this parameter to resend the envelope to a recipient who deleted the original email notification.  **Note**: Correcting an envelope is a different process. DocuSign always resends an envelope when you correct it, regardless of the value that you enter here. (optional)
     - parameter templateRecipients: (body)  (optional)
     - returns: `EventLoopFuture` of `RecipientsPutTemplateRecipients`
     */
    open class func recipientsPutTemplateRecipients(accountId: String, templateId: String, resendEnvelope: String? = nil, templateRecipients: TemplateRecipients? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<RecipientsPutTemplateRecipients> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/recipients"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var resendEnvelope: String?
            }
            try request.query.encode(QueryParams(resendEnvelope: resendEnvelope))
            if let body = templateRecipients {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> RecipientsPutTemplateRecipients in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(RecipientsUpdateSummary.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(RecipientsUpdateSummary.self), raw: response)
            }
        }
    }

    public enum ViewsPostTemplateRecipientPreview {
        case http201(value: ViewUrl?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: ViewUrl?, raw: ClientResponse)
    }

    /**
     Creates a template recipient preview.

     POST /v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview

     This method returns a URL for a template recipient preview  in the DocuSign UI that you can embed in your application. You use this method to enable the sender to preview the recipients' experience.  For more information, see [Preview and Send](https://support.docusign.com/en/guides/ndse-user-guide-send-your-documents).

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter templateId: (path) The id of the template.
     - parameter recipientPreviewRequest: (body)  (optional)
     - returns: `EventLoopFuture` of `ViewsPostTemplateRecipientPreview`
     */
    open class func viewsPostTemplateRecipientPreview(accountId: String, templateId: String, recipientPreviewRequest: RecipientPreviewRequest? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<ViewsPostTemplateRecipientPreview> {
        var path = "/v2.1/accounts/{accountId}/templates/{templateId}/views/recipient_preview"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let templateIdPreEscape = String(describing: templateId)
        let templateIdPostEscape = templateIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{templateId}", with: templateIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.POST, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = recipientPreviewRequest {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> ViewsPostTemplateRecipientPreview in
            switch response.status.code {
            case 201:
                return .http201(value: try? response.content.decode(ViewUrl.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(ViewUrl.self), raw: response)
            }
        }
    }
}

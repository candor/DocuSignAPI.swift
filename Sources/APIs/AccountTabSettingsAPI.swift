//
// AccountTabSettingsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class AccountTabSettingsAPI {
    public enum TabSettingsGetTabSettings {
        case http200(value: TabAccountSettings?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabAccountSettings?, raw: ClientResponse)
    }

    /**
     Returns tab settings list for specified account

     GET /v2.1/accounts/{accountId}/settings/tabs

     This method returns information about the tab types and tab functionality that is currently enabled for an account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - returns: `EventLoopFuture` of `TabSettingsGetTabSettings`
     */
    open class func tabSettingsGetTabSettings(accountId: String, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabSettingsGetTabSettings> {
        var path = "/v2.1/accounts/{accountId}/settings/tabs"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabSettingsGetTabSettings in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TabAccountSettings.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabAccountSettings.self), raw: response)
            }
        }
    }

    public enum TabSettingsPutSettings {
        case http200(value: TabAccountSettings?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: TabAccountSettings?, raw: ClientResponse)
    }

    /**
     Modifies tab settings for specified account

     PUT /v2.1/accounts/{accountId}/settings/tabs

     This method modifies the tab types and tab functionality that is enabled for an account.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter tabAccountSettings: (body) Account-wide tab settings. (optional)
     - returns: `EventLoopFuture` of `TabSettingsPutSettings`
     */
    open class func tabSettingsPutSettings(accountId: String, tabAccountSettings: TabAccountSettings? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<TabSettingsPutSettings> {
        var path = "/v2.1/accounts/{accountId}/settings/tabs"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = tabAccountSettings {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> TabSettingsPutSettings in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(TabAccountSettings.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(TabAccountSettings.self), raw: response)
            }
        }
    }
}

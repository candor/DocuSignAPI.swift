//
// NotaryJournalsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class NotaryJournalsAPI {
    public enum NotaryJournalsGetNotaryJournals {
        case http200(value: NotaryJournalList?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: NotaryJournalList?, raw: ClientResponse)
    }

    /**

     GET /v2.1/current_user/notary/journals

     - parameter count: (query) The maximum number of results to return. (optional)
     - parameter searchText: (query) Use this parameter to search for specific text. (optional)
     - parameter startPosition: (query) The position within the total result set from which to start returning values. The value **thumbnail** may be used to return the page image. (optional)
     - returns: `EventLoopFuture` of `NotaryJournalsGetNotaryJournals`
     */
    open class func notaryJournalsGetNotaryJournals(count: String? = nil, searchText: String? = nil, startPosition: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<NotaryJournalsGetNotaryJournals> {
        let path = "/v2.1/current_user/notary/journals"
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var count: String?
                var searchText: String?
                var startPosition: String?
            }
            try request.query.encode(QueryParams(count: count, searchText: searchText, startPosition: startPosition))

            try beforeSend(&request)
        }.flatMapThrowing { response -> NotaryJournalsGetNotaryJournals in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(NotaryJournalList.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(NotaryJournalList.self), raw: response)
            }
        }
    }
}

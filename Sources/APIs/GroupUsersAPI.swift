//
// GroupUsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

open class GroupUsersAPI {
    public enum GroupsDeleteGroupUsers {
        case http200(value: UsersResponse?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: UsersResponse?, raw: ClientResponse)
    }

    /**
     Deletes one or more users from a group

     DELETE /v2.1/accounts/{accountId}/groups/{groupId}/users

     Deletes one or more users from a group. This request takes a `userInfoList` that contains the users that you want to delete.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter groupId: (path) The ID of the group being accessed.
     - parameter userInfoList: (body)  (optional)
     - returns: `EventLoopFuture` of `GroupsDeleteGroupUsers`
     */
    open class func groupsDeleteGroupUsers(accountId: String, groupId: String, userInfoList: UserInfoList? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<GroupsDeleteGroupUsers> {
        var path = "/v2.1/accounts/{accountId}/groups/{groupId}/users"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = String(describing: groupId)
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.DELETE, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = userInfoList {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> GroupsDeleteGroupUsers in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(UsersResponse.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(UsersResponse.self), raw: response)
            }
        }
    }

    public enum GroupsGetGroupUsers {
        case http200(value: UsersResponse?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: UsersResponse?, raw: ClientResponse)
    }

    /**
     Gets a list of users in a group.

     GET /v2.1/accounts/{accountId}/groups/{groupId}/users

     Retrieves a list of users in a group.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter groupId: (path) The ID of the group being accessed.
     - parameter count: (query) Number of records to return. The number must be greater than 1 and less than or equal to 100.  (optional)
     - parameter startPosition: (query) Starting value for the list. (optional)
     - returns: `EventLoopFuture` of `GroupsGetGroupUsers`
     */
    open class func groupsGetGroupUsers(accountId: String, groupId: String, count: String? = nil, startPosition: String? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<GroupsGetGroupUsers> {
        var path = "/v2.1/accounts/{accountId}/groups/{groupId}/users"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = String(describing: groupId)
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.GET, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            struct QueryParams: Content {
                var count: String?
                var startPosition: String?
            }
            try request.query.encode(QueryParams(count: count, startPosition: startPosition))

            try beforeSend(&request)
        }.flatMapThrowing { response -> GroupsGetGroupUsers in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(UsersResponse.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(UsersResponse.self), raw: response)
            }
        }
    }

    public enum GroupsPutGroupUsers {
        case http200(value: UsersResponse?, raw: ClientResponse)
        case http400(value: ErrorDetails?, raw: ClientResponse)
        case http0(value: UsersResponse?, raw: ClientResponse)
    }

    /**
     Adds one or more users to an existing group.

     PUT /v2.1/accounts/{accountId}/groups/{groupId}/users

     Adds one or more existing DocuSign users to an existing group.

     - parameter accountId: (path) The external account number (int) or account ID GUID.
     - parameter groupId: (path) The ID of the group being accessed.
     - parameter userInfoList: (body)  (optional)
     - returns: `EventLoopFuture` of `GroupsPutGroupUsers`
     */
    open class func groupsPutGroupUsers(accountId: String, groupId: String, userInfoList: UserInfoList? = nil, headers: HTTPHeaders = DocuSignAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> Void = { _ in }) -> EventLoopFuture<GroupsPutGroupUsers> {
        var path = "/v2.1/accounts/{accountId}/groups/{groupId}/users"
        let accountIdPreEscape = String(describing: accountId)
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let groupIdPreEscape = String(describing: groupId)
        let groupIdPostEscape = groupIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{groupId}", with: groupIdPostEscape, options: .literal, range: nil)
        let URLString = DocuSignAPI.basePath + path

        guard let apiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return apiClient.send(.PUT, headers: headers, to: URI(string: URLString)) { request in
            try Configuration.apiWrapper(&request)

            if let body = userInfoList {
                try request.content.encode(body)
            }

            try beforeSend(&request)
        }.flatMapThrowing { response -> GroupsPutGroupUsers in
            switch response.status.code {
            case 200:
                return .http200(value: try? response.content.decode(UsersResponse.self), raw: response)
            case 400:
                return .http400(value: try? response.content.decode(ErrorDetails.self), raw: response)
            default:
                return .http0(value: try? response.content.decode(UsersResponse.self), raw: response)
            }
        }
    }
}

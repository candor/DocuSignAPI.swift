// Extensions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor

extension String: CodingKey {
    public var stringValue: String {
        return self
    }

    public init?(stringValue: String) {
        self.init(stringLiteral: stringValue)
    }

    public var intValue: Int? {
        return nil
    }

    public init?(intValue _: Int) {
        return nil
    }
}

public extension KeyedEncodingContainerProtocol {
    mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T: Encodable {
        var arrayContainer = nestedUnkeyedContainer(forKey: key)
        try arrayContainer.encode(contentsOf: values)
    }

    mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T: Encodable {
        if let values = values {
            try encodeArray(values, forKey: key)
        }
    }

    mutating func encodeMap<T>(_ pairs: [Self.Key: T]) throws where T: Encodable {
        for (key, value) in pairs {
            try encode(value, forKey: key)
        }
    }

    mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key: T]?) throws where T: Encodable {
        if let pairs = pairs {
            try encodeMap(pairs)
        }
    }
}

public extension KeyedDecodingContainerProtocol {
    func decodeArray<T>(_: T.Type, forKey key: Self.Key) throws -> [T] where T: Decodable {
        var tmpArray = [T]()

        var nestedContainer = try nestedUnkeyedContainer(forKey: key)
        while !nestedContainer.isAtEnd {
            let arrayValue = try nestedContainer.decode(T.self)
            tmpArray.append(arrayValue)
        }

        return tmpArray
    }

    func decodeArrayIfPresent<T>(_: T.Type, forKey key: Self.Key) throws -> [T]? where T: Decodable {
        var tmpArray: [T]?

        if contains(key) {
            tmpArray = try decodeArray(T.self, forKey: key)
        }

        return tmpArray
    }

    func decodeMap<T>(_: T.Type, excludedKeys: Set<Self.Key>) throws -> [Self.Key: T] where T: Decodable {
        var map: [Self.Key: T] = [:]

        for key in allKeys {
            if !excludedKeys.contains(key) {
                let value = try decode(T.self, forKey: key)
                map[key] = value
            }
        }

        return map
    }
}

public enum JSON: Content {
    case string(String)
    case int(Int)
    case double(Double)
    case bool(Bool)
    case dictionary([String: JSON])
    case array([JSON])

    enum Key: CodingKey {
        case string(String)
        case int(Int)

        init?(intValue: Int) {
            self = .int(intValue)
        }

        init?(stringValue: String) {
            self = .string(stringValue)
        }

        var intValue: Int? {
            switch self {
            case let .int(int):
                return int
            case .string:
                return nil
            }
        }

        var stringValue: String {
            switch self {
            case let .int(int):
                return int.description
            case let .string(string):
                return string
            }
        }
    }

    public init(from decoder: Decoder) throws {
        if let keyed = try? decoder.container(keyedBy: Key.self) {
            self = try .dictionary(.init(
                uniqueKeysWithValues: keyed.allKeys.map { key in
                    try (key.stringValue, keyed.decode(JSON.self, forKey: key))
                }
            ))
        } else if var unkeyed = try? decoder.unkeyedContainer() {
            self = try .array((0 ..< unkeyed.count!).map { _ in
                try unkeyed.decode(JSON.self)
            })
        } else {
            let singleValue = try decoder.singleValueContainer()
            if let double = try? singleValue.decode(Double.self) {
                self = .double(double)
            } else if let int = try? singleValue.decode(Int.self) {
                self = .int(int)
            } else if let bool = try? singleValue.decode(Bool.self) {
                self = .bool(bool)
            } else {
                self = try .string(singleValue.decode(String.self))
            }
        }
    }

    public func encode(to encoder: Encoder) throws {
        switch self {
        case let .string(string):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(string)
        case let .int(int):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(int)
        case let .double(double):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(double)
        case let .bool(bool):
            var singleValue = encoder.singleValueContainer()
            try singleValue.encode(bool)
        case let .dictionary(dictionary):
            var keyed = encoder.container(keyedBy: Key.self)
            try dictionary.forEach { key, value in
                try keyed.encode(value, forKey: .string(key))
            }
        case let .array(array):
            var unkeyed = encoder.unkeyedContainer()
            try array.forEach { value in
                try unkeyed.encode(value)
            }
        }
    }

    public var stringValue: String? {
        if case let .string(str) = self {
            return str
        }
        return nil
    }

    public var intValue: Int? {
        if case let .int(int) = self {
            return int
        }
        return nil
    }

    public var doubleValue: Double? {
        if case let .double(double) = self {
            return double
        }
        return nil
    }

    public var boolValue: Bool? {
        if case let .bool(bool) = self {
            return bool
        }
        return nil
    }

    public var dictionaryValue: [String: JSON]? {
        if case let .dictionary(dictionary) = self {
            return dictionary
        }
        return nil
    }

    public var arrayValue: [JSON]? {
        if case let .array(array) = self {
            return array
        }
        return nil
    }
}

extension JSON: Hashable {
    public static func == (lhs: JSON, rhs: JSON) -> Bool {
        if case let .string(str1) = lhs, case let .string(str2) = rhs {
            return str1 == str2
        } else if case let .int(int1) = lhs, case let .int(int2) = rhs {
            return int1 == int2
        } else if case let .double(double1) = lhs, case let .double(double2) = rhs {
            return double1 == double2
        } else if case let .bool(bool1) = lhs, case let .bool(bool2) = rhs {
            return bool1 == bool2
        } else if case let .dictionary(dictionary1) = lhs, case let .dictionary(dictionary2) = rhs {
            return dictionary1 == dictionary2
        } else if case let .array(array1) = lhs, case let .array(array2) = rhs {
            return array1 == array2
        } else {
            return false
        }
    }

    public func hash(into hasher: inout Hasher) {
        switch self {
        case let .string(str):
            hasher.combine(str.hashValue)
        case let .int(int):
            hasher.combine(int.hashValue)
        case let .double(double):
            hasher.combine(double.hashValue)
        case let .bool(bool):
            hasher.combine(bool.hashValue)
        case let .dictionary(dictionary):
            hasher.combine(dictionary.hashValue)
        case let .array(array):
            hasher.combine(array.hashValue)
        }
    }
}

extension URL: Content {}

extension Bool: Content {}

extension Set: ResponseEncodable where Element: Content {
    public func encodeResponse(for request: Vapor.Request) -> EventLoopFuture<Vapor.Response> {
        let response = Vapor.Response()
        do {
            try response.content.encode(Array(self))
        } catch {
            return request.eventLoop.makeFailedFuture(error)
        }
        return request.eventLoop.makeSucceededFuture(response)
    }
}

extension Set: RequestDecodable where Element: Content {
    public static func decodeRequest(_ request: Vapor.Request) -> EventLoopFuture<Self> {
        do {
            let content = try request.content.decode([Element].self)
            return request.eventLoop.makeSucceededFuture(Set(content))
        } catch {
            return request.eventLoop.makeFailedFuture(error)
        }
    }
}

extension Set: Content where Element: Content {}
